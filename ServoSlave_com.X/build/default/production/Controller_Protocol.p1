Version 3.2 HI-TECH Software Intermediate Code
"26 Controller_Protocol.h
[s S5 :4 `uc 1 :4 `uc 1 ]
[n S5 . lower_data upper_data ]
"24
[u S4 `S5 1 `uc 1 ]
[n S4 . . all_data ]
"35
[s S7 :4 `uc 1 :4 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S7 . lower_data upper_data UD_error LD_error ]
"42
[s S8 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S8 . data0 data1 data2 data3 data4 data5 data6 data7 ]
"53
[s S9 `uc 1 :2 `uc 1 ]
[n S9 . all_data errors ]
"33
[u S6 `S7 1 `S8 1 `S9 1 ]
[n S6 . . . . ]
"7
[s S1 `i 1 `i 1 ]
[n S1 . num count ]
"12
[s S2 `i 1 `uc 1 `uc 1 ]
[n S2 . Buffer_count Start_signal_has_come S_flag ]
"18
[s S3 `i 1 `i 1 `uc 1 ]
[n S3 . data_send_count last_signal byte_data_complete ]
[v F59 `(uc ~T0 @X0 0 tf ]
[v F63 `(v ~T0 @X0 0 tf1`uc ]
[v F66 `(v ~T0 @X0 0 tf1`uc ]
[v F72 `(v ~T0 @X0 0 tf1`uc ]
[v F75 `(v ~T0 @X0 0 tf1`uc ]
[; ;c90\stdbool.h: 15: typedef unsigned char bool;
[; ;Controller_Protocol.h: 7: typedef struct {
[; ;Controller_Protocol.h: 8: int num;
[; ;Controller_Protocol.h: 9: int count;
[; ;Controller_Protocol.h: 10: } Organize_Parameter;
[; ;Controller_Protocol.h: 12: typedef struct {
[; ;Controller_Protocol.h: 13: int Buffer_count;
[; ;Controller_Protocol.h: 14: bool Start_signal_has_come;
[; ;Controller_Protocol.h: 15: bool S_flag;
[; ;Controller_Protocol.h: 16: } Store_Parameter;
[; ;Controller_Protocol.h: 18: typedef struct {
[; ;Controller_Protocol.h: 19: int data_send_count;
[; ;Controller_Protocol.h: 20: int last_signal;
[; ;Controller_Protocol.h: 21: bool byte_data_complete;
[; ;Controller_Protocol.h: 22: } Send_Parameter;
[; ;Controller_Protocol.h: 24: typedef union {
[; ;Controller_Protocol.h: 26: struct {
[; ;Controller_Protocol.h: 27: unsigned lower_data : 4;
[; ;Controller_Protocol.h: 28: unsigned upper_data : 4;
[; ;Controller_Protocol.h: 29: };
[; ;Controller_Protocol.h: 30: unsigned char all_data;
[; ;Controller_Protocol.h: 31: } Untreated;
[; ;Controller_Protocol.h: 33: typedef union {
[; ;Controller_Protocol.h: 35: struct {
[; ;Controller_Protocol.h: 36: unsigned lower_data : 4;
[; ;Controller_Protocol.h: 37: unsigned upper_data : 4;
[; ;Controller_Protocol.h: 38: unsigned UD_error : 1;
[; ;Controller_Protocol.h: 39: unsigned LD_error : 1;
[; ;Controller_Protocol.h: 40: };
[; ;Controller_Protocol.h: 42: struct {
[; ;Controller_Protocol.h: 43: unsigned data0 : 1;
[; ;Controller_Protocol.h: 44: unsigned data1 : 1;
[; ;Controller_Protocol.h: 45: unsigned data2 : 1;
[; ;Controller_Protocol.h: 46: unsigned data3 : 1;
[; ;Controller_Protocol.h: 47: unsigned data4 : 1;
[; ;Controller_Protocol.h: 48: unsigned data5 : 1;
[; ;Controller_Protocol.h: 49: unsigned data6 : 1;
[; ;Controller_Protocol.h: 50: unsigned data7 : 1;
[; ;Controller_Protocol.h: 51: };
[; ;Controller_Protocol.h: 53: struct {
[; ;Controller_Protocol.h: 54: unsigned char all_data;
[; ;Controller_Protocol.h: 55: unsigned errors : 2;
[; ;Controller_Protocol.h: 56: };
[; ;Controller_Protocol.h: 57: } Processed;
"78 Controller_Protocol.h
[v _Buffer0 `S4 ~T0 @X0 + * -> 5 `i -> 2 `i -> 3 `i e ]
[; ;Controller_Protocol.h: 78: Untreated Buffer0[5 * 2 + 3];
"79
[v _RxData0 `S6 ~T0 @X0 -> 5 `i e ]
[; ;Controller_Protocol.h: 79: Processed RxData0[5];
[; ;Controller_Protocol.h: 100: void Initialize_Parameters(void);
[; ;Controller_Protocol.h: 101: void Organize_Datas(Processed *, Untreated *, int, int);
[; ;Controller_Protocol.h: 102: unsigned char Store_Datas(Untreated *, unsigned char, int, int, bool(*)(void));
[; ;Controller_Protocol.h: 103: void Send_StartSignal(void (*)(unsigned char), void (*)(bool), bool);
[; ;Controller_Protocol.h: 104: void Send_Till_EndSignal(unsigned char *, void (*)(bool), void (*)(bool), int, int);
"15 Controller_Protocol.c
[v _not_of_before_data `uc ~T0 @X0 1 e ]
[; ;Controller_Protocol.c: 15: unsigned char not_of_before_data;
"16
[v _OP `S1 ~T0 @X0 -> -> 1 `i `ux e ]
[; ;Controller_Protocol.c: 16: Organize_Parameter OP[1];
"17
[v _StP `S2 ~T0 @X0 -> -> 1 `i `ux e ]
[; ;Controller_Protocol.c: 17: Store_Parameter StP[1];
"18
[v _SeP `S3 ~T0 @X0 -> -> 1 `i `ux e ]
[; ;Controller_Protocol.c: 18: Send_Parameter SeP[1];
"20
[v _Organize_Datas `(v ~T0 @X0 1 ef4`*S6`*S4`i`i ]
{
[; ;Controller_Protocol.c: 20: void Organize_Datas(Processed *RxData, Untreated *Buffer, int number_of_data, int bus_number) {
[e :U _Organize_Datas ]
[v _RxData `*S6 ~T0 @X0 1 r1 ]
[v _Buffer `*S4 ~T0 @X0 1 r2 ]
[v _number_of_data `i ~T0 @X0 1 r3 ]
[v _bus_number `i ~T0 @X0 1 r4 ]
[f ]
[; ;Controller_Protocol.c: 22: OP[bus_number].count = 1;
"22
[e = . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 1 `i ]
[; ;Controller_Protocol.c: 23: for (OP[bus_number].num = 0; OP[bus_number].num < number_of_data; OP[bus_number].num++) {
"23
{
[e = . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 -> 0 `i ]
[e $U 14  ]
[e :U 11 ]
{
[; ;Controller_Protocol.c: 24: RxData[OP[bus_number].num].upper_data = Buffer[OP[bus_number].count].upper_data;
"24
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 1 . . *U + _Buffer * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 `x -> -> # *U _Buffer `i `x 0 1 ]
[; ;Controller_Protocol.c: 25: RxData[OP[bus_number].num].lower_data = Buffer[OP[bus_number].count + 1].upper_data;
"25
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 0 . . *U + _Buffer * -> + . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 1 `i `x -> -> # *U _Buffer `i `x 0 1 ]
[; ;Controller_Protocol.c: 26: if ((Buffer[OP[bus_number].count].upper_data | Buffer[OP[bus_number].count + 1].lower_data) == 15)RxData[OP[bus_number].num].UD_error = 0;
"26
[e $ ! == | -> . . *U + _Buffer * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 `x -> -> # *U _Buffer `i `x 0 1 `i -> . . *U + _Buffer * -> + . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 1 `i `x -> -> # *U _Buffer `i `x 0 0 `i -> 15 `i 15  ]
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 2 -> -> 0 `i `uc ]
[e $U 16  ]
"27
[e :U 15 ]
[; ;Controller_Protocol.c: 27: else RxData[OP[bus_number].num].UD_error = 1;
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 2 -> -> 1 `i `uc ]
[e :U 16 ]
[; ;Controller_Protocol.c: 28: if ((Buffer[OP[bus_number].count + 1].upper_data | Buffer[OP[bus_number].count + 2].lower_data) == 15)RxData[OP[bus_number].num].LD_error = 0;
"28
[e $ ! == | -> . . *U + _Buffer * -> + . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 1 `i `x -> -> # *U _Buffer `i `x 0 1 `i -> . . *U + _Buffer * -> + . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 2 `i `x -> -> # *U _Buffer `i `x 0 0 `i -> 15 `i 17  ]
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 3 -> -> 0 `i `uc ]
[e $U 18  ]
"29
[e :U 17 ]
[; ;Controller_Protocol.c: 29: else RxData[OP[bus_number].num].LD_error = 1;
[e = . . *U + _RxData * -> . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 `x -> -> # *U _RxData `i `x 0 3 -> -> 1 `i `uc ]
[e :U 18 ]
[; ;Controller_Protocol.c: 30: OP[bus_number].count += 2;
"30
[e =+ . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 2 `i ]
"31
}
"23
[e ++ . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 -> 1 `i ]
[e :U 14 ]
[e $ < . *U + &U _OP * -> -> _bus_number `ui `ux -> -> # *U &U _OP `ui `ux 0 _number_of_data 11  ]
[e :U 12 ]
"31
}
[; ;Controller_Protocol.c: 31: }
[; ;Controller_Protocol.c: 32: }
"32
[e :UE 10 ]
}
"34
[v _Store_Datas `(uc ~T0 @X0 1 ef5`*S4`uc`i`i`*F59 ]
{
[; ;Controller_Protocol.c: 34: unsigned char Store_Datas(Untreated *Buffer, unsigned char received_data, int number_of_receive_data, int bus_number, bool(*EUSART_ERROR)(void)) {
[e :U _Store_Datas ]
[v _Buffer `*S4 ~T0 @X0 1 r1 ]
[v _received_data `uc ~T0 @X0 1 r2 ]
[v _number_of_receive_data `i ~T0 @X0 1 r3 ]
[v _bus_number `i ~T0 @X0 1 r4 ]
[v F93 `(uc ~T0 @X0 0 tf ]
[v _EUSART_ERROR `*F93 ~T0 @X0 1 r5 ]
[f ]
[; ;Controller_Protocol.c: 35: if (EUSART_ERROR() == 1) {
"35
[e $ ! == -> ( *U _EUSART_ERROR ..  `i -> 1 `i 20  ]
{
[; ;Controller_Protocol.c: 36: StP[bus_number].S_flag = 0;
"36
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 2 -> -> 0 `i `uc ]
[; ;Controller_Protocol.c: 37: StP[bus_number].Buffer_count = 0;
"37
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 0 `i ]
[; ;Controller_Protocol.c: 38: StP[bus_number].Start_signal_has_come = 0;
"38
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 -> -> 0 `i `uc ]
[; ;Controller_Protocol.c: 39: return 1;
"39
[e ) -> -> 1 `i `uc ]
[e $UE 19  ]
"40
}
[; ;Controller_Protocol.c: 40: } else {
[e $U 21  ]
[e :U 20 ]
{
[; ;Controller_Protocol.c: 41: if (StP[bus_number].Start_signal_has_come == 0) {
"41
[e $ ! == -> . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 `i -> 0 `i 22  ]
{
[; ;Controller_Protocol.c: 42: Buffer[StP[bus_number].S_flag].all_data = received_data;
"42
[e = . *U + _Buffer * -> . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 2 `ux -> -> # *U _Buffer `ui `ux 1 _received_data ]
[; ;Controller_Protocol.c: 43: if (StP[bus_number].S_flag == 1) {
"43
[e $ ! == -> . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 2 `i -> 1 `i 23  ]
{
[; ;Controller_Protocol.c: 44: if (Buffer[1].lower_data == 5) StP[bus_number].Start_signal_has_come = 1;
"44
[e $ ! == -> . . *U + _Buffer * -> -> 1 `i `x -> -> # *U _Buffer `i `x 0 0 `i -> 5 `i 24  ]
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 -> -> 1 `i `uc ]
[e :U 24 ]
[; ;Controller_Protocol.c: 45: StP[bus_number].S_flag = 0;
"45
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 2 -> -> 0 `i `uc ]
"46
}
[; ;Controller_Protocol.c: 46: } else if (Buffer[0].all_data == 'S') {
[e $U 25  ]
[e :U 23 ]
[e $ ! == -> . *U + _Buffer * -> -> 0 `i `x -> -> # *U _Buffer `i `x 1 `ui -> 83 `ui 26  ]
{
[; ;Controller_Protocol.c: 47: StP[bus_number].S_flag = 1;
"47
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 2 -> -> 1 `i `uc ]
"48
}
[; ;Controller_Protocol.c: 48: }else return 1;
[e $U 27  ]
[e :U 26 ]
[e ) -> -> 1 `i `uc ]
[e $UE 19  ]
[e :U 27 ]
[e :U 25 ]
"49
}
[; ;Controller_Protocol.c: 49: } else {
[e $U 28  ]
[e :U 22 ]
{
[; ;Controller_Protocol.c: 50: StP[bus_number].Buffer_count++;
"50
[e ++ . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i ]
[; ;Controller_Protocol.c: 52: if(StP[bus_number].Buffer_count > number_of_receive_data - 1){
"52
[e $ ! > . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 - _number_of_receive_data -> 1 `i 29  ]
{
[; ;Controller_Protocol.c: 53: StP[bus_number].Buffer_count = 1;
"53
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i ]
[; ;Controller_Protocol.c: 54: StP[bus_number].Start_signal_has_come = 0;
"54
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 -> -> 0 `i `uc ]
[; ;Controller_Protocol.c: 55: return 1;
"55
[e ) -> -> 1 `i `uc ]
[e $UE 19  ]
"56
}
[e :U 29 ]
[; ;Controller_Protocol.c: 56: }
[; ;Controller_Protocol.c: 58: Buffer[StP[bus_number].Buffer_count].all_data = received_data;
"58
[e = . *U + _Buffer * -> . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 `x -> -> # *U _Buffer `i `x 1 _received_data ]
[; ;Controller_Protocol.c: 59: if (Buffer[StP[bus_number].Buffer_count].all_data == 'C') {
"59
[e $ ! == -> . *U + _Buffer * -> . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 `x -> -> # *U _Buffer `i `x 1 `ui -> 67 `ui 30  ]
{
[; ;Controller_Protocol.c: 61: if (Buffer[StP[bus_number].Buffer_count - 1].upper_data == 3) {
"61
[e $ ! == -> . . *U + _Buffer * -> - . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i `x -> -> # *U _Buffer `i `x 0 1 `i -> 3 `i 31  ]
{
[; ;Controller_Protocol.c: 62: StP[bus_number].Buffer_count = 1;
"62
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i ]
[; ;Controller_Protocol.c: 63: StP[bus_number].Start_signal_has_come = 0;
"63
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 -> -> 0 `i `uc ]
[; ;Controller_Protocol.c: 64: return 2;
"64
[e ) -> -> 2 `i `uc ]
[e $UE 19  ]
"65
}
[e :U 31 ]
"66
}
[e :U 30 ]
[; ;Controller_Protocol.c: 65: }
[; ;Controller_Protocol.c: 66: }
[; ;Controller_Protocol.c: 67: if (StP[bus_number].Buffer_count == number_of_receive_data - 1) {
"67
[e $ ! == . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 - _number_of_receive_data -> 1 `i 32  ]
{
[; ;Controller_Protocol.c: 68: StP[bus_number].Buffer_count = 1;
"68
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i ]
[; ;Controller_Protocol.c: 69: StP[bus_number].Start_signal_has_come = 0;
"69
[e = . *U + &U _StP * -> -> _bus_number `ui `ux -> -> # *U &U _StP `ui `ux 1 -> -> 0 `i `uc ]
"70
}
[e :U 32 ]
"71
}
[e :U 28 ]
[; ;Controller_Protocol.c: 70: }
[; ;Controller_Protocol.c: 71: }
[; ;Controller_Protocol.c: 73: return 0;
"73
[e ) -> -> 0 `i `uc ]
[e $UE 19  ]
"74
}
[e :U 21 ]
[; ;Controller_Protocol.c: 74: }
[; ;Controller_Protocol.c: 75: }
"75
[e :UE 19 ]
}
"77
[v _Send_StartSignal `(v ~T0 @X0 1 ef3`*F63`*F66`uc ]
{
[; ;Controller_Protocol.c: 77: void Send_StartSignal(void (*transmission)(unsigned char), void (*txinterrupt_control)(bool), bool TXIEbit) {
[e :U _Send_StartSignal ]
[v F96 `(v ~T0 @X0 0 tf1`uc ]
[v _transmission `*F96 ~T0 @X0 1 r1 ]
[v F99 `(v ~T0 @X0 0 tf1`uc ]
[v _txinterrupt_control `*F99 ~T0 @X0 1 r2 ]
[v _TXIEbit `uc ~T0 @X0 1 r3 ]
[f ]
[; ;Controller_Protocol.c: 78: if (!TXIEbit) {
"78
[e $ ! ! != -> _TXIEbit `i -> -> -> 0 `i `uc `i 34  ]
{
[; ;Controller_Protocol.c: 79: transmission('S');
"79
[e ( *U _transmission (1 -> -> 83 `ui `uc ]
[; ;Controller_Protocol.c: 80: not_of_before_data = 0x05;
"80
[e = _not_of_before_data -> -> 5 `i `uc ]
[; ;Controller_Protocol.c: 81: txinterrupt_control(1);
"81
[e ( *U _txinterrupt_control (1 -> -> 1 `i `uc ]
"82
}
[e :U 34 ]
[; ;Controller_Protocol.c: 82: }
[; ;Controller_Protocol.c: 83: }
"83
[e :UE 33 ]
}
"85
[v _Send_Till_EndSignal `(v ~T0 @X0 1 ef5`*uc`*F72`*F75`i`i ]
{
[; ;Controller_Protocol.c: 85: void Send_Till_EndSignal(unsigned char *TxData, void (*transmission)(bool), void (*txinterrupt_control)(bool), int number_of_txdata, int bus_number) {
[e :U _Send_Till_EndSignal ]
[v _TxData `*uc ~T0 @X0 1 r1 ]
[v F104 `(v ~T0 @X0 0 tf1`uc ]
[v _transmission `*F104 ~T0 @X0 1 r2 ]
[v F107 `(v ~T0 @X0 0 tf1`uc ]
[v _txinterrupt_control `*F107 ~T0 @X0 1 r3 ]
[v _number_of_txdata `i ~T0 @X0 1 r4 ]
[v _bus_number `i ~T0 @X0 1 r5 ]
[f ]
[; ;Controller_Protocol.c: 87: if (SeP[bus_number].data_send_count != number_of_txdata) {
"87
[e $ ! != . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 _number_of_txdata 36  ]
{
[; ;Controller_Protocol.c: 88: if (SeP[bus_number].byte_data_complete == 1) {
"88
[e $ ! == -> . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 2 `i -> 1 `i 37  ]
{
[; ;Controller_Protocol.c: 89: transmission((TxData[SeP[bus_number].data_send_count] & 0xf0) | (not_of_before_data & 0x0f));
"89
[e ( *U _transmission (1 -> | & -> *U + _TxData * -> . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 `x -> -> # *U _TxData `i `x `i -> 240 `i & -> _not_of_before_data `i -> 15 `i `uc ]
[; ;Controller_Protocol.c: 90: SeP[bus_number].byte_data_complete = 0;
"90
[e = . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 2 -> -> 0 `i `uc ]
"91
}
[; ;Controller_Protocol.c: 91: } else {
[e $U 38  ]
[e :U 37 ]
{
[; ;Controller_Protocol.c: 92: not_of_before_data = ~TxData[SeP[bus_number].data_send_count];
"92
[e = _not_of_before_data -> ~ -> *U + _TxData * -> . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 `x -> -> # *U _TxData `i `x `i `uc ]
[; ;Controller_Protocol.c: 93: transmission((TxData[SeP[bus_number].data_send_count] << 4) | (not_of_before_data >> 4));
"93
[e ( *U _transmission (1 -> | << -> *U + _TxData * -> . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 `x -> -> # *U _TxData `i `x `i -> 4 `i >> -> _not_of_before_data `i -> 4 `i `uc ]
[; ;Controller_Protocol.c: 94: SeP[bus_number].byte_data_complete = 1;
"94
[e = . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 2 -> -> 1 `i `uc ]
[; ;Controller_Protocol.c: 95: SeP[bus_number].data_send_count++;
"95
[e ++ . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 -> 1 `i ]
"96
}
[e :U 38 ]
"97
}
[; ;Controller_Protocol.c: 96: }
[; ;Controller_Protocol.c: 97: } else {
[e $U 39  ]
[e :U 36 ]
{
[; ;Controller_Protocol.c: 98: if (SeP[bus_number].last_signal == 0) {
"98
[e $ ! == . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 1 -> 0 `i 40  ]
{
[; ;Controller_Protocol.c: 99: transmission(0x30 | (not_of_before_data & 0x0f));
"99
[e ( *U _transmission (1 -> | -> 48 `i & -> _not_of_before_data `i -> 15 `i `uc ]
[; ;Controller_Protocol.c: 100: SeP[bus_number].last_signal++;
"100
[e ++ . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 1 -> 1 `i ]
"101
}
[; ;Controller_Protocol.c: 101: } else if (SeP[bus_number].last_signal == 1) {
[e $U 41  ]
[e :U 40 ]
[e $ ! == . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 1 -> 1 `i 42  ]
{
[; ;Controller_Protocol.c: 102: transmission('C');
"102
[e ( *U _transmission (1 -> -> 67 `ui `uc ]
[; ;Controller_Protocol.c: 103: SeP[bus_number].last_signal++;
"103
[e ++ . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 1 -> 1 `i ]
"104
}
[; ;Controller_Protocol.c: 104: } else {
[e $U 43  ]
[e :U 42 ]
{
[; ;Controller_Protocol.c: 105: SeP[bus_number].last_signal = 0;
"105
[e = . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 1 -> 0 `i ]
[; ;Controller_Protocol.c: 106: SeP[bus_number].data_send_count = 0;
"106
[e = . *U + &U _SeP * -> -> _bus_number `ui `ux -> -> # *U &U _SeP `ui `ux 0 -> 0 `i ]
[; ;Controller_Protocol.c: 107: txinterrupt_control(0);
"107
[e ( *U _txinterrupt_control (1 -> -> 0 `i `uc ]
"108
}
[e :U 43 ]
[e :U 41 ]
"109
}
[e :U 39 ]
[; ;Controller_Protocol.c: 108: }
[; ;Controller_Protocol.c: 109: }
[; ;Controller_Protocol.c: 110: }
"110
[e :UE 35 ]
}
"116
[v _Initialize_Parameters `(v ~T0 @X0 1 ef ]
{
[; ;Controller_Protocol.c: 116: extern void Initialize_Parameters(void) {
[e :U _Initialize_Parameters ]
[f ]
"117
[v F112 `i ~T0 @X0 1 s i ]
[; ;Controller_Protocol.c: 117: static int i;
[; ;Controller_Protocol.c: 119: for (i = 0; i < 1; i++)OP[i].count = 1;
"119
{
[e = F112 -> 0 `i ]
[e $ < F112 -> 1 `i 45  ]
[e $U 46  ]
[e :U 45 ]
[e = . *U + &U _OP * -> -> F112 `ui `ux -> -> # *U &U _OP `ui `ux 1 -> 1 `i ]
[e ++ F112 -> 1 `i ]
[e $ < F112 -> 1 `i 45  ]
[e :U 46 ]
}
[; ;Controller_Protocol.c: 120: for (i = 0; i < 1; i++) {
"120
{
[e = F112 -> 0 `i ]
[e $ < F112 -> 1 `i 48  ]
[e $U 49  ]
[e :U 48 ]
{
[; ;Controller_Protocol.c: 121: StP[i].Buffer_count = 1;
"121
[e = . *U + &U _StP * -> -> F112 `ui `ux -> -> # *U &U _StP `ui `ux 0 -> 1 `i ]
[; ;Controller_Protocol.c: 122: SeP[i].byte_data_complete = 1;
"122
[e = . *U + &U _SeP * -> -> F112 `ui `ux -> -> # *U &U _SeP `ui `ux 2 -> -> 1 `i `uc ]
"123
}
"120
[e ++ F112 -> 1 `i ]
[e $ < F112 -> 1 `i 48  ]
[e :U 49 ]
"123
}
[; ;Controller_Protocol.c: 123: }
[; ;Controller_Protocol.c: 124: }
"124
[e :UE 44 ]
}
