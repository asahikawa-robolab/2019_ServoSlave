

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Sep 29 15:15:48 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1933
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 2.05
    45                           ; Generated 20/12/2018 GMT
    46                           ; 
    47                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F1933 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  0110                     	;# 
   130  0111                     	;# 
   131  0112                     	;# 
   132  0113                     	;# 
   133  0114                     	;# 
   134  0115                     	;# 
   135  0116                     	;# 
   136  0117                     	;# 
   137  0118                     	;# 
   138  0119                     	;# 
   139  011A                     	;# 
   140  011B                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0191                     	;# 
   145  0191                     	;# 
   146  0192                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0193                     	;# 
   150  0194                     	;# 
   151  0195                     	;# 
   152  0196                     	;# 
   153  0199                     	;# 
   154  019A                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019C                     	;# 
   160  019C                     	;# 
   161  019D                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  020D                     	;# 
   165  0210                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0291                     	;# 
   175  0291                     	;# 
   176  0292                     	;# 
   177  0293                     	;# 
   178  0294                     	;# 
   179  0295                     	;# 
   180  0295                     	;# 
   181  0296                     	;# 
   182  0298                     	;# 
   183  0298                     	;# 
   184  0299                     	;# 
   185  029A                     	;# 
   186  029B                     	;# 
   187  029C                     	;# 
   188  029C                     	;# 
   189  029D                     	;# 
   190  029E                     	;# 
   191  029F                     	;# 
   192  0311                     	;# 
   193  0311                     	;# 
   194  0312                     	;# 
   195  0313                     	;# 
   196  0314                     	;# 
   197  0315                     	;# 
   198  0315                     	;# 
   199  0316                     	;# 
   200  0318                     	;# 
   201  0318                     	;# 
   202  0319                     	;# 
   203  031A                     	;# 
   204  031C                     	;# 
   205  031C                     	;# 
   206  031D                     	;# 
   207  031E                     	;# 
   208  0394                     	;# 
   209  0395                     	;# 
   210  0396                     	;# 
   211  0415                     	;# 
   212  0416                     	;# 
   213  0417                     	;# 
   214  041C                     	;# 
   215  041D                     	;# 
   216  041E                     	;# 
   217  0791                     	;# 
   218  0792                     	;# 
   219  0793                     	;# 
   220  0794                     	;# 
   221  0795                     	;# 
   222  0798                     	;# 
   223  0799                     	;# 
   224  07A0                     	;# 
   225  07A1                     	;# 
   226  07A3                     	;# 
   227  07A4                     	;# 
   228  07A6                     	;# 
   229  07A7                     	;# 
   230  07A9                     	;# 
   231  07AA                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0013                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0016                     	;# 
   265  0017                     	;# 
   266  0018                     	;# 
   267  0019                     	;# 
   268  001A                     	;# 
   269  001B                     	;# 
   270  001C                     	;# 
   271  001E                     	;# 
   272  001F                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  0090                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0093                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  0110                     	;# 
   295  0111                     	;# 
   296  0112                     	;# 
   297  0113                     	;# 
   298  0114                     	;# 
   299  0115                     	;# 
   300  0116                     	;# 
   301  0117                     	;# 
   302  0118                     	;# 
   303  0119                     	;# 
   304  011A                     	;# 
   305  011B                     	;# 
   306  011D                     	;# 
   307  018C                     	;# 
   308  018D                     	;# 
   309  0191                     	;# 
   310  0191                     	;# 
   311  0192                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0193                     	;# 
   315  0194                     	;# 
   316  0195                     	;# 
   317  0196                     	;# 
   318  0199                     	;# 
   319  019A                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019C                     	;# 
   325  019C                     	;# 
   326  019D                     	;# 
   327  019E                     	;# 
   328  019F                     	;# 
   329  020D                     	;# 
   330  0210                     	;# 
   331  0211                     	;# 
   332  0212                     	;# 
   333  0213                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0216                     	;# 
   338  0217                     	;# 
   339  0291                     	;# 
   340  0291                     	;# 
   341  0292                     	;# 
   342  0293                     	;# 
   343  0294                     	;# 
   344  0295                     	;# 
   345  0295                     	;# 
   346  0296                     	;# 
   347  0298                     	;# 
   348  0298                     	;# 
   349  0299                     	;# 
   350  029A                     	;# 
   351  029B                     	;# 
   352  029C                     	;# 
   353  029C                     	;# 
   354  029D                     	;# 
   355  029E                     	;# 
   356  029F                     	;# 
   357  0311                     	;# 
   358  0311                     	;# 
   359  0312                     	;# 
   360  0313                     	;# 
   361  0314                     	;# 
   362  0315                     	;# 
   363  0315                     	;# 
   364  0316                     	;# 
   365  0318                     	;# 
   366  0318                     	;# 
   367  0319                     	;# 
   368  031A                     	;# 
   369  031C                     	;# 
   370  031C                     	;# 
   371  031D                     	;# 
   372  031E                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0415                     	;# 
   377  0416                     	;# 
   378  0417                     	;# 
   379  041C                     	;# 
   380  041D                     	;# 
   381  041E                     	;# 
   382  0791                     	;# 
   383  0792                     	;# 
   384  0793                     	;# 
   385  0794                     	;# 
   386  0795                     	;# 
   387  0798                     	;# 
   388  0799                     	;# 
   389  07A0                     	;# 
   390  07A1                     	;# 
   391  07A3                     	;# 
   392  07A4                     	;# 
   393  07A6                     	;# 
   394  07A7                     	;# 
   395  07A9                     	;# 
   396  07AA                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  0010                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0013                     	;# 
   427  0015                     	;# 
   428  0016                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001C                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  008C                     	;# 
   439  008D                     	;# 
   440  008E                     	;# 
   441  0090                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  0110                     	;# 
   460  0111                     	;# 
   461  0112                     	;# 
   462  0113                     	;# 
   463  0114                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011A                     	;# 
   470  011B                     	;# 
   471  011D                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  0191                     	;# 
   475  0191                     	;# 
   476  0192                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0199                     	;# 
   484  019A                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019C                     	;# 
   491  019D                     	;# 
   492  019E                     	;# 
   493  019F                     	;# 
   494  020D                     	;# 
   495  0210                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0213                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0216                     	;# 
   503  0217                     	;# 
   504  0291                     	;# 
   505  0291                     	;# 
   506  0292                     	;# 
   507  0293                     	;# 
   508  0294                     	;# 
   509  0295                     	;# 
   510  0295                     	;# 
   511  0296                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  029B                     	;# 
   517  029C                     	;# 
   518  029C                     	;# 
   519  029D                     	;# 
   520  029E                     	;# 
   521  029F                     	;# 
   522  0311                     	;# 
   523  0311                     	;# 
   524  0312                     	;# 
   525  0313                     	;# 
   526  0314                     	;# 
   527  0315                     	;# 
   528  0315                     	;# 
   529  0316                     	;# 
   530  0318                     	;# 
   531  0318                     	;# 
   532  0319                     	;# 
   533  031A                     	;# 
   534  031C                     	;# 
   535  031C                     	;# 
   536  031D                     	;# 
   537  031E                     	;# 
   538  0394                     	;# 
   539  0395                     	;# 
   540  0396                     	;# 
   541  0415                     	;# 
   542  0416                     	;# 
   543  0417                     	;# 
   544  041C                     	;# 
   545  041D                     	;# 
   546  041E                     	;# 
   547  0791                     	;# 
   548  0792                     	;# 
   549  0793                     	;# 
   550  0794                     	;# 
   551  0795                     	;# 
   552  0798                     	;# 
   553  0799                     	;# 
   554  07A0                     	;# 
   555  07A1                     	;# 
   556  07A3                     	;# 
   557  07A4                     	;# 
   558  07A6                     	;# 
   559  07A7                     	;# 
   560  07A9                     	;# 
   561  07AA                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  0010                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  0110                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011A                     	;# 
   635  011B                     	;# 
   636  011D                     	;# 
   637  018C                     	;# 
   638  018D                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019C                     	;# 
   655  019C                     	;# 
   656  019D                     	;# 
   657  019E                     	;# 
   658  019F                     	;# 
   659  020D                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0294                     	;# 
   674  0295                     	;# 
   675  0295                     	;# 
   676  0296                     	;# 
   677  0298                     	;# 
   678  0298                     	;# 
   679  0299                     	;# 
   680  029A                     	;# 
   681  029B                     	;# 
   682  029C                     	;# 
   683  029C                     	;# 
   684  029D                     	;# 
   685  029E                     	;# 
   686  029F                     	;# 
   687  0311                     	;# 
   688  0311                     	;# 
   689  0312                     	;# 
   690  0313                     	;# 
   691  0314                     	;# 
   692  0315                     	;# 
   693  0315                     	;# 
   694  0316                     	;# 
   695  0318                     	;# 
   696  0318                     	;# 
   697  0319                     	;# 
   698  031A                     	;# 
   699  031C                     	;# 
   700  031C                     	;# 
   701  031D                     	;# 
   702  031E                     	;# 
   703  0394                     	;# 
   704  0395                     	;# 
   705  0396                     	;# 
   706  0415                     	;# 
   707  0416                     	;# 
   708  0417                     	;# 
   709  041C                     	;# 
   710  041D                     	;# 
   711  041E                     	;# 
   712  0791                     	;# 
   713  0792                     	;# 
   714  0793                     	;# 
   715  0794                     	;# 
   716  0795                     	;# 
   717  0798                     	;# 
   718  0799                     	;# 
   719  07A0                     	;# 
   720  07A1                     	;# 
   721  07A3                     	;# 
   722  07A4                     	;# 
   723  07A6                     	;# 
   724  07A7                     	;# 
   725  07A9                     	;# 
   726  07AA                     	;# 
   727  0FE4                     	;# 
   728  0FE5                     	;# 
   729  0FE6                     	;# 
   730  0FE7                     	;# 
   731  0FE8                     	;# 
   732  0FE9                     	;# 
   733  0FEA                     	;# 
   734  0FEB                     	;# 
   735  0FED                     	;# 
   736  0FEE                     	;# 
   737  0FEF                     	;# 
   738  0000                     	;# 
   739  0001                     	;# 
   740  0002                     	;# 
   741  0003                     	;# 
   742  0004                     	;# 
   743  0005                     	;# 
   744  0006                     	;# 
   745  0007                     	;# 
   746  0008                     	;# 
   747  0009                     	;# 
   748  000A                     	;# 
   749  000B                     	;# 
   750  000C                     	;# 
   751  000D                     	;# 
   752  000E                     	;# 
   753  0010                     	;# 
   754  0011                     	;# 
   755  0012                     	;# 
   756  0013                     	;# 
   757  0015                     	;# 
   758  0016                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001B                     	;# 
   765  001C                     	;# 
   766  001E                     	;# 
   767  001F                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  0090                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0093                     	;# 
   775  0095                     	;# 
   776  0096                     	;# 
   777  0097                     	;# 
   778  0098                     	;# 
   779  0099                     	;# 
   780  009A                     	;# 
   781  009B                     	;# 
   782  009B                     	;# 
   783  009C                     	;# 
   784  009D                     	;# 
   785  009E                     	;# 
   786  010C                     	;# 
   787  010D                     	;# 
   788  010E                     	;# 
   789  0110                     	;# 
   790  0111                     	;# 
   791  0112                     	;# 
   792  0113                     	;# 
   793  0114                     	;# 
   794  0115                     	;# 
   795  0116                     	;# 
   796  0117                     	;# 
   797  0118                     	;# 
   798  0119                     	;# 
   799  011A                     	;# 
   800  011B                     	;# 
   801  011D                     	;# 
   802  018C                     	;# 
   803  018D                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0193                     	;# 
   810  0194                     	;# 
   811  0195                     	;# 
   812  0196                     	;# 
   813  0199                     	;# 
   814  019A                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020D                     	;# 
   825  0210                     	;# 
   826  0211                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0214                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0217                     	;# 
   834  0291                     	;# 
   835  0291                     	;# 
   836  0292                     	;# 
   837  0293                     	;# 
   838  0294                     	;# 
   839  0295                     	;# 
   840  0295                     	;# 
   841  0296                     	;# 
   842  0298                     	;# 
   843  0298                     	;# 
   844  0299                     	;# 
   845  029A                     	;# 
   846  029B                     	;# 
   847  029C                     	;# 
   848  029C                     	;# 
   849  029D                     	;# 
   850  029E                     	;# 
   851  029F                     	;# 
   852  0311                     	;# 
   853  0311                     	;# 
   854  0312                     	;# 
   855  0313                     	;# 
   856  0314                     	;# 
   857  0315                     	;# 
   858  0315                     	;# 
   859  0316                     	;# 
   860  0318                     	;# 
   861  0318                     	;# 
   862  0319                     	;# 
   863  031A                     	;# 
   864  031C                     	;# 
   865  031C                     	;# 
   866  031D                     	;# 
   867  031E                     	;# 
   868  0394                     	;# 
   869  0395                     	;# 
   870  0396                     	;# 
   871  0415                     	;# 
   872  0416                     	;# 
   873  0417                     	;# 
   874  041C                     	;# 
   875  041D                     	;# 
   876  041E                     	;# 
   877  0791                     	;# 
   878  0792                     	;# 
   879  0793                     	;# 
   880  0794                     	;# 
   881  0795                     	;# 
   882  0798                     	;# 
   883  0799                     	;# 
   884  07A0                     	;# 
   885  07A1                     	;# 
   886  07A3                     	;# 
   887  07A4                     	;# 
   888  07A6                     	;# 
   889  07A7                     	;# 
   890  07A9                     	;# 
   891  07AA                     	;# 
   892  0FE4                     	;# 
   893  0FE5                     	;# 
   894  0FE6                     	;# 
   895  0FE7                     	;# 
   896  0FE8                     	;# 
   897  0FE9                     	;# 
   898  0FEA                     	;# 
   899  0FEB                     	;# 
   900  0FED                     	;# 
   901  0FEE                     	;# 
   902  0FEF                     	;# 
   903                           
   904                           	psect	idataBANK1
   905  0003                     __pidataBANK1:	
   906                           
   907                           ;initializer for SetParameter@isFirst
   908  0003  3401               	retlw	1
   909                           
   910                           	psect	idataBANK2
   911  07B7                     __pidataBANK2:	
   912                           
   913                           ;initializer for __Parameters
   914  07B7  3498               	retlw	152
   915  07B8  3408               	retlw	8
   916  07B9  3458               	retlw	88
   917  07BA  3402               	retlw	2
   918  07BB  3498               	retlw	152
   919  07BC  3408               	retlw	8
   920  07BD  3458               	retlw	88
   921  07BE  3402               	retlw	2
   922  07BF  3498               	retlw	152
   923  07C0  3408               	retlw	8
   924  07C1  3458               	retlw	88
   925  07C2  3402               	retlw	2
   926  07C3  3498               	retlw	152
   927  07C4  3408               	retlw	8
   928  07C5  3458               	retlw	88
   929  07C6  3402               	retlw	2
   930  07C7  348A               	retlw	138
   931  07C8  3407               	retlw	7
   932  07C9  3484               	retlw	132
   933  07CA  3403               	retlw	3
   934  07CB  348A               	retlw	138
   935  07CC  3407               	retlw	7
   936  07CD  3484               	retlw	132
   937  07CE  3403               	retlw	3
   938  07CF  346C               	retlw	108
   939  07D0  3407               	retlw	7
   940  07D1  3420               	retlw	32
   941  07D2  3403               	retlw	3
   942  07D3  346C               	retlw	108
   943  07D4  3407               	retlw	7
   944  07D5  3420               	retlw	32
   945  07D6  3403               	retlw	3
   946  07D7  348A               	retlw	138
   947  07D8  3407               	retlw	7
   948  07D9  3484               	retlw	132
   949  07DA  3403               	retlw	3
   950  07DB  34F6               	retlw	246
   951  07DC  3409               	retlw	9
   952  07DD  3458               	retlw	88
   953  07DE  3402               	retlw	2
   954  07DF  34F6               	retlw	246
   955  07E0  3409               	retlw	9
   956  07E1  3458               	retlw	88
   957  07E2  3402               	retlw	2
   958  07E3  34F6               	retlw	246
   959  07E4  3409               	retlw	9
   960  07E5  3458               	retlw	88
   961  07E6  3402               	retlw	2
   962                           
   963                           	psect	stringtext1
   964  0800                     __pstringtext1:	
   965  0800                     __CHs:	
   966  0800  3401               	retlw	1
   967  0801  3402               	retlw	2
   968  0802  3404               	retlw	4
   969  0803  3408               	retlw	8
   970  0804                     __end_of__CHs:	
   971  0016                     _TMR1	set	22
   972  0018                     _T1CONbits	set	24
   973  0011                     _PIR1bits	set	17
   974  000B                     _INTCONbits	set	11
   975  000D                     _PORTB	set	13
   976  000C                     _PORTA	set	12
   977  000E                     _PORTCbits	set	14
   978  00C0                     _TMR1ON	set	192
   979  008C                     _TXIF	set	140
   980  0088                     _TMR1IF	set	136
   981  008E                     _TRISCbits	set	142
   982  008D                     _TRISB	set	141
   983  008C                     _TRISA	set	140
   984  0099                     _OSCCONbits	set	153
   985  0091                     _PIE1bits	set	145
   986  010E                     _LATCbits	set	270
   987  019A                     _TXREG	set	410
   988  018D                     _ANSELB	set	397
   989  018C                     _ANSELA	set	396
   990                           
   991                           ; #config settings
   992  0000                     
   993                           	psect	cinit
   994  0034                     start_initialization:	
   995  0034                     __initialization:	
   996                           
   997                           ; Initialize objects allocated to BANK1
   998  0034  0021               	movlb	1	; select bank1
   999  0035  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  1000  0038  00E4               	movwf	__pdataBANK1& (0+127)
  1001                           
  1002                           ; Initialize objects allocated to BANK2
  1003  0039  30B7               	movlw	low __pidataBANK2
  1004  003A  0084               	movwf	4
  1005  003B  3087               	movlw	(high __pidataBANK2)| (0+128)
  1006  003C  0085               	movwf	5
  1007  003D  3020               	movlw	low __pdataBANK2
  1008  003E  0086               	movwf	6
  1009  003F  3001               	movlw	high __pdataBANK2
  1010  0040  0087               	movwf	7
  1011  0041  3030               	movlw	48
  1012  0042  318F  271F  3180   	fcall	init_ram
  1013                           
  1014                           ; Clear objects allocated to COMMON
  1015  0045  01F6               	clrf	__pbssCOMMON& (0+127)
  1016  0046  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1017  0047  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1018  0048  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1019                           
  1020                           ; Clear objects allocated to BANK1
  1021  0049  30A0               	movlw	low __pbssBANK1
  1022  004A  0084               	movwf	4
  1023  004B  3000               	movlw	high __pbssBANK1
  1024  004C  0085               	movwf	5
  1025  004D  3022               	movlw	34
  1026  004E  318F  2719  3180   	fcall	clear_ram0
  1027                           
  1028                           ; Clear objects allocated to BANK2
  1029  0051  3050               	movlw	low __pbssBANK2
  1030  0052  0084               	movwf	4
  1031  0053  3001               	movlw	high __pbssBANK2
  1032  0054  0085               	movwf	5
  1033  0055  3010               	movlw	16
  1034  0056  318F  2719         	fcall	clear_ram0
  1035  0058                     end_of_initialization:	
  1036                           ;End of C runtime variable initialization code
  1037                           
  1038  0058                     __end_of__initialization:	
  1039  0058  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1040  0059  0020               	movlb	0
  1041  005A  318F  2FB1         	ljmp	_main	;jump to C main() function
  1042                           
  1043                           	psect	bssCOMMON
  1044  0076                     __pbssCOMMON:	
  1045  0076                     Interrupt_TMR1@IntCnt:	
  1046  0076                     	ds	2
  1047  0078                     __IntNum:	
  1048  0078                     	ds	2
  1049                           
  1050                           	psect	bssBANK1
  1051  00A0                     __pbssBANK1:	
  1052  00A0                     __TMRCnt:	
  1053  00A0                     	ds	10
  1054  00AA                     ReceiveTargetAngle@pre_angle:	
  1055  00AA                     	ds	8
  1056  00B2                     __DebugTxData:	
  1057  00B2                     	ds	5
  1058  00B7                     ReceiveTargetAngle@F2792:	
  1059  00B7                     	ds	4
  1060  00BB                     __CHq:	
  1061  00BB                     	ds	4
  1062  00BF                     Interrupt_TX@cnt:	
  1063  00BF                     	ds	2
  1064  00C1                     __isBusy:	
  1065  00C1                     	ds	1
  1066                           
  1067                           	psect	dataBANK1
  1068  00E4                     __pdataBANK1:	
  1069  00E4                     SetParameter@isFirst:	
  1070  00E4                     	ds	1
  1071                           
  1072                           	psect	bssBANK2
  1073  0150                     __pbssBANK2:	
  1074  0150                     SetParameter@Parameter:	
  1075  0150                     	ds	16
  1076                           
  1077                           	psect	dataBANK2
  1078  0120                     __pdataBANK2:	
  1079  0120                     __Parameters:	
  1080  0120                     	ds	48
  1081                           
  1082                           	psect	inittext
  1083  0F1F                     init_ram:	
  1084  0F1F  00FE               	movwf	126
  1085  0F20                     initloop:	
  1086  0F20  0012               	moviw fsr0++
  1087  0F21  001E               	movwi fsr1++
  1088  0F22  0BFE               	decfsz	126,f
  1089  0F23  2F20               	goto	initloop
  1090  0F24  3400               	retlw	0
  1091                           
  1092                           	psect	clrtext
  1093  0F19                     clear_ram0:	
  1094                           ;	Called with FSR0 containing the base address, and
  1095                           ;	WREG with the size to clear
  1096                           
  1097  0F19  0064               	clrwdt	;clear the watchdog before getting into this loop
  1098  0F1A                     clrloop0:	
  1099  0F1A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1100  0F1B  3101               	addfsr 0,1
  1101  0F1C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1102  0F1D  2F1A               	goto	clrloop0	;have we reached the end yet?
  1103  0F1E  3400               	retlw	0	;all done for this memory range, return
  1104                           
  1105                           	psect	cstackBANK1
  1106  00C2                     __pcstackBANK1:	
  1107  00C2                     ??_SetParameter:	
  1108                           
  1109                           ; 1 bytes @ 0x0
  1110  00C2                     	ds	9
  1111  00CB                     SetParameter@Mode:	
  1112                           
  1113                           ; 1 bytes @ 0x9
  1114  00CB                     	ds	1
  1115  00CC                     SetParameter@Servo:	
  1116                           
  1117                           ; 1 bytes @ 0xA
  1118  00CC                     	ds	1
  1119  00CD                     SetParameter@i:	
  1120                           
  1121                           ; 2 bytes @ 0xB
  1122  00CD                     	ds	2
  1123  00CF                     main@Servo:	
  1124                           
  1125                           ; 20 bytes @ 0xD
  1126  00CF                     	ds	20
  1127  00E3                     main@isFirst:	
  1128                           
  1129                           ; 1 bytes @ 0x21
  1130  00E3                     	ds	1
  1131                           
  1132                           	psect	cstackCOMMON
  1133  0070                     __pcstackCOMMON:	
  1134  0070                     ?_Init:	
  1135  0070                     ?_ReceiveTargetAngle:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_SetParameter:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_CalcNextCnt:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_Interrupt_TMR1:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_Interrupt_TX:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_Interrupt_TX:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_InitOsc:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_InitPin:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_InitTmr:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_INTERRUPT_HANDLER:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?i1_Output:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_main:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     i1Output@value:	
  1172                           ; 2 bytes @ 0x0
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x0
  1176  0070                     	ds	1
  1177  0071                     ??i1_Output:	
  1178                           
  1179                           ; 1 bytes @ 0x1
  1180  0071                     	ds	1
  1181  0072                     i1Output@ch:	
  1182                           
  1183                           ; 1 bytes @ 0x2
  1184  0072                     	ds	1
  1185  0073                     ??_Interrupt_TMR1:	
  1186                           
  1187                           ; 1 bytes @ 0x3
  1188  0073                     	ds	1
  1189  0074                     ??_INTERRUPT_HANDLER:	
  1190                           
  1191                           ; 1 bytes @ 0x4
  1192  0074                     	ds	2
  1193                           
  1194                           	psect	cstackBANK0
  1195  0020                     __pcstackBANK0:	
  1196  0020                     ??_Init:	
  1197  0020                     ?_Output:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0020                     ??_InitOsc:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  0020                     ??_InitPin:	
  1204                           ; 1 bytes @ 0x0
  1205                           
  1206  0020                     ??_InitTmr:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  0020                     ?___bmul:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0020                     ?___ftpack:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0020                     Output@value:	
  1216                           ; 3 bytes @ 0x0
  1217                           
  1218  0020                     ___bmul@multiplicand:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0020                     ___ftpack@arg:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224                           
  1225                           ; 3 bytes @ 0x0
  1226  0020                     	ds	1
  1227  0021                     ??_Output:	
  1228  0021                     ??___bmul:	
  1229                           ; 1 bytes @ 0x1
  1230                           
  1231                           
  1232                           ; 1 bytes @ 0x1
  1233  0021                     	ds	1
  1234  0022                     Output@ch:	
  1235  0022                     ___bmul@product:	
  1236                           ; 1 bytes @ 0x2
  1237                           
  1238                           
  1239                           ; 1 bytes @ 0x2
  1240  0022                     	ds	1
  1241  0023                     ___bmul@multiplier:	
  1242  0023                     ___ftpack@exp:	
  1243                           ; 1 bytes @ 0x3
  1244                           
  1245                           
  1246                           ; 1 bytes @ 0x3
  1247  0023                     	ds	1
  1248  0024                     ??_ReceiveTargetAngle:	
  1249  0024                     ?_Swap:	
  1250                           ; 1 bytes @ 0x4
  1251                           
  1252  0024                     ?_CalcTMRCnt:	
  1253                           ; 1 bytes @ 0x4
  1254                           
  1255  0024                     Swap@b:	
  1256                           ; 2 bytes @ 0x4
  1257                           
  1258  0024                     ___ftpack@sign:	
  1259                           ; 1 bytes @ 0x4
  1260                           
  1261  0024                     CalcTMRCnt@pulse_width:	
  1262                           ; 1 bytes @ 0x4
  1263                           
  1264                           
  1265                           ; 2 bytes @ 0x4
  1266  0024                     	ds	1
  1267  0025                     ??_Swap:	
  1268  0025                     ??___ftpack:	
  1269                           ; 1 bytes @ 0x5
  1270                           
  1271                           
  1272                           ; 1 bytes @ 0x5
  1273  0025                     	ds	1
  1274  0026                     ??_CalcTMRCnt:	
  1275  0026                     Swap@tmp:	
  1276                           ; 1 bytes @ 0x6
  1277                           
  1278                           
  1279                           ; 5 bytes @ 0x6
  1280  0026                     	ds	2
  1281  0028                     ?___awtoft:	
  1282  0028                     ?___lbtoft:	
  1283                           ; 3 bytes @ 0x8
  1284                           
  1285  0028                     CalcTMRCnt@cnt:	
  1286                           ; 3 bytes @ 0x8
  1287                           
  1288  0028                     ___awtoft@c:	
  1289                           ; 2 bytes @ 0x8
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x8
  1293  0028                     	ds	3
  1294  002B                     ??___awtoft:	
  1295  002B                     ??___lbtoft:	
  1296                           ; 1 bytes @ 0xB
  1297                           
  1298  002B                     Swap@a:	
  1299                           ; 1 bytes @ 0xB
  1300                           
  1301                           
  1302                           ; 1 bytes @ 0xB
  1303  002B                     	ds	1
  1304  002C                     ??_CalcNextCnt:	
  1305                           
  1306                           ; 1 bytes @ 0xC
  1307  002C                     	ds	1
  1308  002D                     ___awtoft@sign:	
  1309                           
  1310                           ; 1 bytes @ 0xD
  1311  002D                     	ds	1
  1312  002E                     ?___ftdiv:	
  1313  002E                     ___ftdiv@f2:	
  1314                           ; 3 bytes @ 0xE
  1315                           
  1316                           
  1317                           ; 3 bytes @ 0xE
  1318  002E                     	ds	1
  1319  002F                     ___lbtoft@c:	
  1320  002F                     ReceiveTargetAngle@angle_buf:	
  1321                           ; 1 bytes @ 0xF
  1322                           
  1323                           
  1324                           ; 8 bytes @ 0xF
  1325  002F                     	ds	2
  1326  0031                     ___ftdiv@f1:	
  1327                           
  1328                           ; 3 bytes @ 0x11
  1329  0031                     	ds	1
  1330  0032                     CalcNextCnt@Servo:	
  1331                           
  1332                           ; 1 bytes @ 0x12
  1333  0032                     	ds	1
  1334  0033                     CalcNextCnt@Tmp:	
  1335                           
  1336                           ; 20 bytes @ 0x13
  1337  0033                     	ds	1
  1338  0034                     ??___ftdiv:	
  1339                           
  1340                           ; 1 bytes @ 0x14
  1341  0034                     	ds	3
  1342  0037                     ReceiveTargetAngle@rx:	
  1343                           
  1344                           ; 4 bytes @ 0x17
  1345  0037                     	ds	1
  1346  0038                     ___ftdiv@cntr:	
  1347                           
  1348                           ; 1 bytes @ 0x18
  1349  0038                     	ds	1
  1350  0039                     ___ftdiv@f3:	
  1351                           
  1352                           ; 3 bytes @ 0x19
  1353  0039                     	ds	2
  1354  003B                     ReceiveTargetAngle@Servo:	
  1355                           
  1356                           ; 1 bytes @ 0x1B
  1357  003B                     	ds	1
  1358  003C                     ___ftdiv@exp:	
  1359  003C                     ReceiveTargetAngle@i:	
  1360                           ; 1 bytes @ 0x1C
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x1C
  1364  003C                     	ds	1
  1365  003D                     ___ftdiv@sign:	
  1366                           
  1367                           ; 1 bytes @ 0x1D
  1368  003D                     	ds	1
  1369  003E                     ?___ftmul:	
  1370  003E                     ___ftmul@f1:	
  1371                           ; 3 bytes @ 0x1E
  1372                           
  1373                           
  1374                           ; 3 bytes @ 0x1E
  1375  003E                     	ds	3
  1376  0041                     ___ftmul@f2:	
  1377                           
  1378                           ; 3 bytes @ 0x21
  1379  0041                     	ds	3
  1380  0044                     ??___ftmul:	
  1381                           
  1382                           ; 1 bytes @ 0x24
  1383  0044                     	ds	3
  1384  0047                     CalcNextCnt@j:	
  1385                           
  1386                           ; 2 bytes @ 0x27
  1387  0047                     	ds	1
  1388  0048                     ___ftmul@exp:	
  1389                           
  1390                           ; 1 bytes @ 0x28
  1391  0048                     	ds	1
  1392  0049                     CalcNextCnt@i:	
  1393  0049                     ___ftmul@f3_as_product:	
  1394                           ; 2 bytes @ 0x29
  1395                           
  1396                           
  1397                           ; 3 bytes @ 0x29
  1398  0049                     	ds	3
  1399  004C                     ___ftmul@cntr:	
  1400                           
  1401                           ; 1 bytes @ 0x2C
  1402  004C                     	ds	1
  1403  004D                     ___ftmul@sign:	
  1404                           
  1405                           ; 1 bytes @ 0x2D
  1406  004D                     	ds	1
  1407  004E                     ?___ftadd:	
  1408  004E                     ___ftadd@f1:	
  1409                           ; 3 bytes @ 0x2E
  1410                           
  1411                           
  1412                           ; 3 bytes @ 0x2E
  1413  004E                     	ds	3
  1414  0051                     ___ftadd@f2:	
  1415                           
  1416                           ; 3 bytes @ 0x31
  1417  0051                     	ds	3
  1418  0054                     ??___ftadd:	
  1419                           
  1420                           ; 1 bytes @ 0x34
  1421  0054                     	ds	4
  1422  0058                     ___ftadd@sign:	
  1423                           
  1424                           ; 1 bytes @ 0x38
  1425  0058                     	ds	1
  1426  0059                     ___ftadd@exp2:	
  1427                           
  1428                           ; 1 bytes @ 0x39
  1429  0059                     	ds	1
  1430  005A                     ___ftadd@exp1:	
  1431                           
  1432                           ; 1 bytes @ 0x3A
  1433  005A                     	ds	1
  1434  005B                     ?___fttol:	
  1435  005B                     ___fttol@f1:	
  1436                           ; 4 bytes @ 0x3B
  1437                           
  1438                           
  1439                           ; 3 bytes @ 0x3B
  1440  005B                     	ds	4
  1441  005F                     ??___fttol:	
  1442                           
  1443                           ; 1 bytes @ 0x3F
  1444  005F                     	ds	4
  1445  0063                     ___fttol@sign1:	
  1446                           
  1447                           ; 1 bytes @ 0x43
  1448  0063                     	ds	1
  1449  0064                     ___fttol@lval:	
  1450                           
  1451                           ; 4 bytes @ 0x44
  1452  0064                     	ds	4
  1453  0068                     ___fttol@exp1:	
  1454                           
  1455                           ; 1 bytes @ 0x48
  1456  0068                     	ds	1
  1457  0069                     ?_CalcWidth:	
  1458  0069                     CalcWidth@Parameter:	
  1459                           ; 2 bytes @ 0x49
  1460                           
  1461                           
  1462                           ; 4 bytes @ 0x49
  1463  0069                     	ds	4
  1464  006D                     ??_CalcWidth:	
  1465  006D                     CalcWidth@width:	
  1466                           ; 1 bytes @ 0x4D
  1467                           
  1468                           
  1469                           ; 2 bytes @ 0x4D
  1470  006D                     	ds	2
  1471  006F                     CalcWidth@angle:	
  1472                           
  1473                           ; 1 bytes @ 0x4F
  1474  006F                     	ds	1
  1475  0070                     ??_main:	
  1476                           
  1477                           	psect	maintext
  1478  0FB1                     __pmaintext:	
  1479                           ; 1 bytes @ 0x50
  1480 ;;
  1481 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1482 ;;
  1483 ;; *************** function _main *****************
  1484 ;; Defined at:
  1485 ;;		line 21 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  Servo          20   13[BANK1 ] struct .[4]
  1490 ;;  isFirst         1   33[BANK1 ] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2   52[None  ] int 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : B1F/0
  1497 ;;		On exit  : 1F/1
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1500 ;;      Params:         0       0       0       0
  1501 ;;      Locals:         0       0      21       0
  1502 ;;      Temps:          0       0       0       0
  1503 ;;      Totals:         0       0      21       0
  1504 ;;Total ram usage:       21 bytes
  1505 ;; Hardware stack levels required when called:    7
  1506 ;; This function calls:
  1507 ;;		_CalcNextCnt
  1508 ;;		_Init
  1509 ;;		_Output
  1510 ;;		_ReceiveTargetAngle
  1511 ;;		_SetParameter
  1512 ;; This function is called by:
  1513 ;;		Startup code after reset
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function _main
  1519  0FB1                     _main:	
  1520                           
  1521                           ;main.c: 23: bool isFirst = 1;
  1522                           
  1523                           ;incstack = 0
  1524                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1525  0FB1  0021               	movlb	1	; select bank1
  1526  0FB2  01E3               	clrf	main@isFirst^(0+128)
  1527  0FB3  0AE3               	incf	main@isFirst^(0+128),f
  1528                           
  1529                           ;main.c: 24: SERVO Servo[4];;main.c: 26: Init();
  1530  0FB4  318F  272C  318F   	fcall	_Init
  1531                           
  1532                           ;main.c: 27: Output(0b1111, 0);
  1533  0FB7  01A0               	clrf	Output@value
  1534  0FB8  300F               	movlw	15
  1535  0FB9  3187  270B  318F   	fcall	_Output
  1536  0FBC                     l1928:	
  1537                           
  1538                           ;main.c: 30: {;main.c: 32: if (isFirst == 1)
  1539  0FBC  0021               	movlb	1	; select bank1
  1540  0FBD  0363               	decf	main@isFirst^(0+128),w
  1541  0FBE  1D03               	btfss	3,2
  1542  0FBF  2FD1               	goto	l1940
  1543                           
  1544                           ;main.c: 33: {;main.c: 34: isFirst = 0;
  1545  0FC0  01E3               	clrf	main@isFirst^(0+128)
  1546                           
  1547                           ;main.c: 35: ReceiveTargetAngle(Servo);
  1548  0FC1  30CF               	movlw	(low (main@Servo| 0))& (0+255)
  1549  0FC2  3183  232B  318F   	fcall	_ReceiveTargetAngle
  1550                           
  1551                           ;main.c: 36: SetParameter(Servo);
  1552  0FC5  30CF               	movlw	(low (main@Servo| 0))& (0+255)
  1553  0FC6  3183  23F2  318F   	fcall	_SetParameter
  1554                           
  1555                           ;main.c: 37: _IntNum = 4 + 1;
  1556  0FC9  3005               	movlw	5
  1557  0FCA  00F8               	movwf	__IntNum
  1558  0FCB  3000               	movlw	0
  1559  0FCC  00F9               	movwf	__IntNum+1
  1560                           
  1561                           ;main.c: 38: CalcNextCnt(Servo);
  1562  0FCD  30CF               	movlw	(low (main@Servo| 0))& (0+255)
  1563  0FCE  3180  205C  318F   	fcall	_CalcNextCnt
  1564  0FD1                     l1940:	
  1565  0FD1  0021               	movlb	1	; select bank1
  1566  0FD2  0841               	movf	__isBusy^(0+128),w
  1567  0FD3  1D03               	btfss	3,2
  1568  0FD4  2FBC               	goto	l1928
  1569                           
  1570                           ;main.c: 43: {;main.c: 44: isFirst = 1;
  1571  0FD5  01E3               	clrf	main@isFirst^(0+128)
  1572  0FD6  0AE3               	incf	main@isFirst^(0+128),f
  1573  0FD7  2FD1               	goto	l1940
  1574  0FD8                     __end_of_main:	
  1575                           
  1576                           	psect	text1
  1577  03F2                     __ptext1:	
  1578 ;; *************** function _SetParameter *****************
  1579 ;; Defined at:
  1580 ;;		line 86 in file "main.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  Servo           1    wreg     PTR struct .
  1583 ;;		 -> main@Servo(20), 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  Servo           1   10[BANK1 ] PTR struct .
  1586 ;;		 -> main@Servo(20), 
  1587 ;;  Mode            1    9[BANK1 ] unsigned char 
  1588 ;;  i               2   11[BANK1 ] int 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/1
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1598 ;;      Params:         0       0       0       0
  1599 ;;      Locals:         0       0       4       0
  1600 ;;      Temps:          0       0       9       0
  1601 ;;      Totals:         0       0      13       0
  1602 ;;Total ram usage:       13 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    6
  1605 ;; This function calls:
  1606 ;;		_CalcWidth
  1607 ;;		___bmul
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _SetParameter
  1615  03F2                     _SetParameter:	
  1616                           
  1617                           ;incstack = 0
  1618                           ; Regs used in _SetParameter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1619                           ;SetParameter@Servo stored from wreg
  1620  03F2  0021               	movlb	1	; select bank1
  1621  03F3  00CC               	movwf	SetParameter@Servo^(0+128)
  1622                           
  1623                           ;main.c: 88: static PARAMETER Parameter[4];;main.c: 89: static bool isFirst = 1;;main.c:
      +                           90: int i;;main.c: 93: if (isFirst == 1)
  1624  03F4  0364               	decf	SetParameter@isFirst^(0+128),w
  1625  03F5  1D03               	btfss	3,2
  1626  03F6  2C44               	goto	l1772
  1627                           
  1628                           ;main.c: 94: {;main.c: 95: isFirst = 0;
  1629  03F7  01E4               	clrf	SetParameter@isFirst^(0+128)
  1630                           
  1631                           ;main.c: 96: uint8_t Mode = (PORTB & 0b00111111);
  1632  03F8  0020               	movlb	0	; select bank0
  1633  03F9  080D               	movf	13,w	;volatile
  1634  03FA  393F               	andlw	63
  1635  03FB  0021               	movlb	1	; select bank1
  1636  03FC  00C2               	movwf	??_SetParameter^(0+128)
  1637  03FD  0842               	movf	??_SetParameter^(0+128),w
  1638  03FE  00CB               	movwf	SetParameter@Mode^(0+128)
  1639                           
  1640                           ;main.c: 97: for (i = 0; i < 4; i++)
  1641  03FF  01CD               	clrf	SetParameter@i^(0+128)
  1642  0400  01CE               	clrf	(SetParameter@i+1)^(0+128)
  1643  0401                     l1766:	
  1644                           
  1645                           ;main.c: 98: {;main.c: 99: Parameter[i] = _Parameters[Mode][i];
  1646  0401  0021               	movlb	1	; select bank1
  1647  0402  084B               	movf	SetParameter@Mode^(0+128),w
  1648  0403  00C2               	movwf	??_SetParameter^(0+128)
  1649  0404  3004               	movlw	4
  1650  0405                     u1915:	
  1651  0405  35C2               	lslf	??_SetParameter^(0+128),f
  1652  0406  0B89               	decfsz	9,f
  1653  0407  2C05               	goto	u1915
  1654  0408  3020               	movlw	(low (__Parameters| (0+256)))& (0+255)
  1655  0409  0742               	addwf	??_SetParameter^(0+128),w
  1656  040A  00C3               	movwf	(??_SetParameter+1)^(0+128)
  1657  040B  084D               	movf	SetParameter@i^(0+128),w
  1658  040C  00C4               	movwf	(??_SetParameter+2)^(0+128)
  1659  040D  3001               	movlw	1
  1660  040E                     u1925:	
  1661  040E  35C4               	lslf	(??_SetParameter+2)^(0+128),f
  1662  040F  3EFF               	addlw	-1
  1663  0410  1D03               	skipz
  1664  0411  2C0E               	goto	u1925
  1665  0412  3544               	lslf	(??_SetParameter+2)^(0+128),w
  1666  0413  0743               	addwf	(??_SetParameter+1)^(0+128),w
  1667  0414  00C5               	movwf	(??_SetParameter+3)^(0+128)
  1668  0415  0845               	movf	(??_SetParameter+3)^(0+128),w
  1669  0416  0086               	movwf	6
  1670  0417  3001               	movlw	1	; select bank2/3
  1671  0418  0087               	movwf	7
  1672  0419  3F40               	moviw [0]fsr1
  1673  041A  00C6               	movwf	(??_SetParameter+4)^(0+128)
  1674  041B  3F41               	moviw [1]fsr1
  1675  041C  00C7               	movwf	((??_SetParameter+4)^(0+128)+1)
  1676  041D  3F42               	moviw [2]fsr1
  1677  041E  00C8               	movwf	((??_SetParameter+4)^(0+128)+2)
  1678  041F  3F43               	moviw [3]fsr1
  1679  0420  00C9               	movwf	((??_SetParameter+4)^(0+128)+3)
  1680  0421  084D               	movf	SetParameter@i^(0+128),w
  1681  0422  00CA               	movwf	(??_SetParameter+8)^(0+128)
  1682  0423  3001               	movlw	1
  1683  0424                     u1935:	
  1684  0424  35CA               	lslf	(??_SetParameter+8)^(0+128),f
  1685  0425  3EFF               	addlw	-1
  1686  0426  1D03               	skipz
  1687  0427  2C24               	goto	u1935
  1688  0428  354A               	lslf	(??_SetParameter+8)^(0+128),w
  1689  0429  3E50               	addlw	(low (SetParameter@Parameter| (0+256)))& (0+255)
  1690  042A  0086               	movwf	6
  1691  042B  3001               	movlw	1	; select bank2/3
  1692  042C  0087               	movwf	7
  1693  042D  0846               	movf	(??_SetParameter+4)^(0+128),w
  1694  042E  3FC0               	movwi [0]fsr1
  1695  042F  0847               	movf	(??_SetParameter+5)^(0+128),w
  1696  0430  3FC1               	movwi [1]fsr1
  1697  0431  0848               	movf	(??_SetParameter+6)^(0+128),w
  1698  0432  3FC2               	movwi [2]fsr1
  1699  0433  0849               	movf	(??_SetParameter+7)^(0+128),w
  1700  0434  3FC3               	movwi [3]fsr1
  1701  0435  3001               	movlw	1
  1702  0436  07CD               	addwf	SetParameter@i^(0+128),f
  1703  0437  3000               	movlw	0
  1704  0438  3DCE               	addwfc	(SetParameter@i+1)^(0+128),f
  1705  0439  084E               	movf	(SetParameter@i+1)^(0+128),w
  1706  043A  3A80               	xorlw	128
  1707  043B  00C2               	movwf	??_SetParameter^(0+128)
  1708  043C  3080               	movlw	128
  1709  043D  0242               	subwf	??_SetParameter^(0+128),w
  1710  043E  1D03               	skipz
  1711  043F  2C42               	goto	u1945
  1712  0440  3004               	movlw	4
  1713  0441  024D               	subwf	SetParameter@i^(0+128),w
  1714  0442                     u1945:	
  1715  0442  1C03               	skipc
  1716  0443  2C01               	goto	l1766
  1717  0444                     l1772:	
  1718                           
  1719                           ;main.c: 100: };main.c: 101: };main.c: 104: for (i = 0; i < 4; i++)
  1720  0444  0021               	movlb	1	; select bank1
  1721  0445  01CD               	clrf	SetParameter@i^(0+128)
  1722  0446  01CE               	clrf	(SetParameter@i+1)^(0+128)
  1723  0447                     l1778:	
  1724                           
  1725                           ;main.c: 105: {;main.c: 106: Servo[i].width = CalcWidth(Servo[i].angle, Parameter[i]);
  1726  0447  3005               	movlw	5
  1727  0448  0021               	movlb	1	; select bank1
  1728  0449  00C2               	movwf	??_SetParameter^(0+128)
  1729  044A  0842               	movf	??_SetParameter^(0+128),w
  1730  044B  0020               	movlb	0	; select bank0
  1731  044C  00A0               	movwf	___bmul@multiplicand
  1732  044D  0021               	movlb	1	; select bank1
  1733  044E  084D               	movf	SetParameter@i^(0+128),w
  1734  044F  318F  2763  3183   	fcall	___bmul
  1735  0452  0021               	movlb	1	; select bank1
  1736  0453  074C               	addwf	SetParameter@Servo^(0+128),w
  1737  0454  00C3               	movwf	(??_SetParameter+1)^(0+128)
  1738  0455  0843               	movf	(??_SetParameter+1)^(0+128),w
  1739  0456  3E02               	addlw	2
  1740  0457  0086               	movwf	6
  1741  0458  0187               	clrf	7
  1742  0459  084D               	movf	SetParameter@i^(0+128),w
  1743  045A  00C4               	movwf	(??_SetParameter+2)^(0+128)
  1744  045B  3001               	movlw	1
  1745  045C                     u1955:	
  1746  045C  35C4               	lslf	(??_SetParameter+2)^(0+128),f
  1747  045D  3EFF               	addlw	-1
  1748  045E  1D03               	skipz
  1749  045F  2C5C               	goto	u1955
  1750  0460  3544               	lslf	(??_SetParameter+2)^(0+128),w
  1751  0461  3E50               	addlw	(low (SetParameter@Parameter| (0+256)))& (0+255)
  1752  0462  0084               	movwf	4
  1753  0463  3001               	movlw	1	; select bank2/3
  1754  0464  0085               	movwf	5
  1755  0465  3F00               	moviw [0]fsr0
  1756  0466  0020               	movlb	0	; select bank0
  1757  0467  00E9               	movwf	CalcWidth@Parameter
  1758  0468  3F01               	moviw [1]fsr0
  1759  0469  00EA               	movwf	CalcWidth@Parameter+1
  1760  046A  3F02               	moviw [2]fsr0
  1761  046B  00EB               	movwf	CalcWidth@Parameter+2
  1762  046C  3F03               	moviw [3]fsr0
  1763  046D  00EC               	movwf	CalcWidth@Parameter+3
  1764  046E  3005               	movlw	5
  1765  046F  0021               	movlb	1	; select bank1
  1766  0470  00C5               	movwf	(??_SetParameter+3)^(0+128)
  1767  0471  0845               	movf	(??_SetParameter+3)^(0+128),w
  1768  0472  0020               	movlb	0	; select bank0
  1769  0473  00A0               	movwf	___bmul@multiplicand
  1770  0474  0021               	movlb	1	; select bank1
  1771  0475  084D               	movf	SetParameter@i^(0+128),w
  1772  0476  318F  2763  3183   	fcall	___bmul
  1773  0479  0021               	movlb	1	; select bank1
  1774  047A  074C               	addwf	SetParameter@Servo^(0+128),w
  1775  047B  00C6               	movwf	(??_SetParameter+4)^(0+128)
  1776  047C  0846               	movf	(??_SetParameter+4)^(0+128),w
  1777  047D  0084               	movwf	4
  1778  047E  0185               	clrf	5
  1779  047F  0800               	movf	0,w
  1780  0480  3186  26B7  3183   	fcall	_CalcWidth
  1781  0483  0869               	movf	?_CalcWidth,w
  1782  0484  3FC0               	movwi [0]fsr1
  1783  0485  086A               	movf	?_CalcWidth+1,w
  1784  0486  3FC1               	movwi [1]fsr1
  1785                           
  1786                           ;main.c: 108: Servo[i].ch = _CHs[i];
  1787  0487  0021               	movlb	1	; select bank1
  1788  0488  084E               	movf	(SetParameter@i+1)^(0+128),w
  1789  0489  0085               	movwf	5
  1790  048A  084D               	movf	SetParameter@i^(0+128),w
  1791  048B  0084               	movwf	4
  1792  048C  3000               	movlw	low (__CHs| (0+32768))
  1793  048D  0784               	addwf	4,f
  1794  048E  3088               	movlw	high (__CHs| (0+32768))
  1795  048F  3D85               	addwfc	5,f
  1796  0490  0800               	movf	0,w	;code access
  1797  0491  00C2               	movwf	??_SetParameter^(0+128)
  1798  0492  3005               	movlw	5
  1799  0493  00C3               	movwf	(??_SetParameter+1)^(0+128)
  1800  0494  0843               	movf	(??_SetParameter+1)^(0+128),w
  1801  0495  0020               	movlb	0	; select bank0
  1802  0496  00A0               	movwf	___bmul@multiplicand
  1803  0497  0021               	movlb	1	; select bank1
  1804  0498  084D               	movf	SetParameter@i^(0+128),w
  1805  0499  318F  2763  3183   	fcall	___bmul
  1806  049C  0021               	movlb	1	; select bank1
  1807  049D  074C               	addwf	SetParameter@Servo^(0+128),w
  1808  049E  00C4               	movwf	(??_SetParameter+2)^(0+128)
  1809  049F  0844               	movf	(??_SetParameter+2)^(0+128),w
  1810  04A0  3E04               	addlw	4
  1811  04A1  0086               	movwf	6
  1812  04A2  0187               	clrf	7
  1813  04A3  0842               	movf	??_SetParameter^(0+128),w
  1814  04A4  0081               	movwf	1
  1815  04A5  3001               	movlw	1
  1816  04A6  07CD               	addwf	SetParameter@i^(0+128),f
  1817  04A7  3000               	movlw	0
  1818  04A8  3DCE               	addwfc	(SetParameter@i+1)^(0+128),f
  1819  04A9  084E               	movf	(SetParameter@i+1)^(0+128),w
  1820  04AA  3A80               	xorlw	128
  1821  04AB  00C2               	movwf	??_SetParameter^(0+128)
  1822  04AC  3080               	movlw	128
  1823  04AD  0242               	subwf	??_SetParameter^(0+128),w
  1824  04AE  1D03               	skipz
  1825  04AF  2CB2               	goto	u1965
  1826  04B0  3004               	movlw	4
  1827  04B1  024D               	subwf	SetParameter@i^(0+128),w
  1828  04B2                     u1965:	
  1829  04B2  1803               	btfsc	3,0
  1830  04B3  0008               	return
  1831  04B4  2C47               	goto	l1778
  1832  04B5                     __end_of_SetParameter:	
  1833                           
  1834                           	psect	text2
  1835  06B7                     __ptext2:	
  1836 ;; *************** function _CalcWidth *****************
  1837 ;; Defined at:
  1838 ;;		line 186 in file "main.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  angle           1    wreg     unsigned char 
  1841 ;;  Parameter       4   73[BANK0 ] struct .
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  angle           1   79[BANK0 ] unsigned char 
  1844 ;;  width           2   77[BANK0 ] unsigned int 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2   73[BANK0 ] unsigned int 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, pclath, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 1F/1
  1851 ;;		On exit  : 1F/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1854 ;;      Params:         0       4       0       0
  1855 ;;      Locals:         0       3       0       0
  1856 ;;      Temps:          0       0       0       0
  1857 ;;      Totals:         0       7       0       0
  1858 ;;Total ram usage:        7 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    5
  1861 ;; This function calls:
  1862 ;;		___awtoft
  1863 ;;		___ftadd
  1864 ;;		___ftdiv
  1865 ;;		___ftmul
  1866 ;;		___fttol
  1867 ;;		___lbtoft
  1868 ;; This function is called by:
  1869 ;;		_SetParameter
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _CalcWidth
  1875  06B7                     _CalcWidth:	
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _CalcWidth: [wreg+status,2+status,0+pclath+cstack]
  1879                           ;CalcWidth@angle stored from wreg
  1880  06B7  0020               	movlb	0	; select bank0
  1881  06B8  00EF               	movwf	CalcWidth@angle
  1882                           
  1883                           ;main.c: 188: uint16_t width = (uint16_t) ((Parameter.max - Parameter.min) / 180.0 * ang
      +                          le + Parameter.min);
  1884  06B9  0869               	movf	CalcWidth@Parameter,w
  1885  06BA  026B               	subwf	CalcWidth@Parameter+2,w
  1886  06BB  00A8               	movwf	___awtoft@c
  1887  06BC  086A               	movf	CalcWidth@Parameter+1,w
  1888  06BD  3B6C               	subwfb	CalcWidth@Parameter+3,w
  1889  06BE  00A9               	movwf	___awtoft@c+1
  1890  06BF  318F  2791  3186   	fcall	___awtoft
  1891  06C2  0828               	movf	?___awtoft,w
  1892  06C3  00B1               	movwf	___ftdiv@f1
  1893  06C4  0829               	movf	?___awtoft+1,w
  1894  06C5  00B2               	movwf	___ftdiv@f1+1
  1895  06C6  082A               	movf	?___awtoft+2,w
  1896  06C7  00B3               	movwf	___ftdiv@f1+2
  1897  06C8  3000               	movlw	0
  1898  06C9  00AE               	movwf	___ftdiv@f2
  1899  06CA  3034               	movlw	52
  1900  06CB  00AF               	movwf	___ftdiv@f2+1
  1901  06CC  3043               	movlw	67
  1902  06CD  00B0               	movwf	___ftdiv@f2+2
  1903  06CE  3185  254F  3186   	fcall	___ftdiv
  1904  06D1  082E               	movf	?___ftdiv,w
  1905  06D2  00C1               	movwf	___ftmul@f2
  1906  06D3  082F               	movf	?___ftdiv+1,w
  1907  06D4  00C2               	movwf	___ftmul@f2+1
  1908  06D5  0830               	movf	?___ftdiv+2,w
  1909  06D6  00C3               	movwf	___ftmul@f2+2
  1910  06D7  086F               	movf	CalcWidth@angle,w
  1911  06D8  3187  27E7  3186   	fcall	___lbtoft
  1912  06DB  0828               	movf	?___lbtoft,w
  1913  06DC  00BE               	movwf	___ftmul@f1
  1914  06DD  0829               	movf	?___lbtoft+1,w
  1915  06DE  00BF               	movwf	___ftmul@f1+1
  1916  06DF  082A               	movf	?___lbtoft+2,w
  1917  06E0  00C0               	movwf	___ftmul@f1+2
  1918  06E1  3184  24B5  3186   	fcall	___ftmul
  1919  06E4  083E               	movf	?___ftmul,w
  1920  06E5  00D1               	movwf	___ftadd@f2
  1921  06E6  083F               	movf	?___ftmul+1,w
  1922  06E7  00D2               	movwf	___ftadd@f2+1
  1923  06E8  0840               	movf	?___ftmul+2,w
  1924  06E9  00D3               	movwf	___ftadd@f2+2
  1925  06EA  086A               	movf	CalcWidth@Parameter+1,w
  1926  06EB  00A9               	movwf	___awtoft@c+1
  1927  06EC  0869               	movf	CalcWidth@Parameter,w
  1928  06ED  00A8               	movwf	___awtoft@c
  1929  06EE  318F  2791  3186   	fcall	___awtoft
  1930  06F1  0828               	movf	?___awtoft,w
  1931  06F2  00CE               	movwf	___ftadd@f1
  1932  06F3  0829               	movf	?___awtoft+1,w
  1933  06F4  00CF               	movwf	___ftadd@f1+1
  1934  06F5  082A               	movf	?___awtoft+2,w
  1935  06F6  00D0               	movwf	___ftadd@f1+2
  1936  06F7  3182  2237  3186   	fcall	___ftadd
  1937  06FA  084E               	movf	?___ftadd,w
  1938  06FB  00DB               	movwf	___fttol@f1
  1939  06FC  084F               	movf	?___ftadd+1,w
  1940  06FD  00DC               	movwf	___fttol@f1+1
  1941  06FE  0850               	movf	?___ftadd+2,w
  1942  06FF  00DD               	movwf	___fttol@f1+2
  1943  0700  3185  25DE         	fcall	___fttol
  1944  0702  085C               	movf	?___fttol+1,w
  1945  0703  00EE               	movwf	CalcWidth@width+1
  1946  0704  085B               	movf	?___fttol,w
  1947  0705  00ED               	movwf	CalcWidth@width
  1948                           
  1949                           ;main.c: 189: return width;
  1950  0706  086E               	movf	CalcWidth@width+1,w
  1951  0707  00EA               	movwf	?_CalcWidth+1
  1952  0708  086D               	movf	CalcWidth@width,w
  1953  0709  00E9               	movwf	?_CalcWidth
  1954  070A  0008               	return
  1955  070B                     __end_of_CalcWidth:	
  1956                           
  1957                           	psect	text3
  1958  07E7                     __ptext3:	
  1959 ;; *************** function ___lbtoft *****************
  1960 ;; Defined at:
  1961 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbtoft.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  c               1    wreg     unsigned char 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  c               1   15[BANK0 ] unsigned char 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  3    8[BANK0 ] float 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0, pclath, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 1F/0
  1972 ;;		On exit  : 1F/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1975 ;;      Params:         0       3       0       0
  1976 ;;      Locals:         0       1       0       0
  1977 ;;      Temps:          0       4       0       0
  1978 ;;      Totals:         0       8       0       0
  1979 ;;Total ram usage:        8 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    4
  1982 ;; This function calls:
  1983 ;;		___ftpack
  1984 ;; This function is called by:
  1985 ;;		_CalcWidth
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           
  1990                           ;psect for function ___lbtoft
  1991  07E7                     ___lbtoft:	
  1992                           
  1993                           ;incstack = 0
  1994                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1995                           ;___lbtoft@c stored from wreg
  1996  07E7  00AF               	movwf	___lbtoft@c
  1997  07E8  082F               	movf	___lbtoft@c,w
  1998  07E9  00AB               	movwf	??___lbtoft
  1999  07EA  01AC               	clrf	??___lbtoft+1
  2000  07EB  01AD               	clrf	??___lbtoft+2
  2001  07EC  082B               	movf	??___lbtoft,w
  2002  07ED  00A0               	movwf	___ftpack@arg
  2003  07EE  082C               	movf	??___lbtoft+1,w
  2004  07EF  00A1               	movwf	___ftpack@arg+1
  2005  07F0  082D               	movf	??___lbtoft+2,w
  2006  07F1  00A2               	movwf	___ftpack@arg+2
  2007  07F2  308E               	movlw	142
  2008  07F3  00AE               	movwf	??___lbtoft+3
  2009  07F4  082E               	movf	??___lbtoft+3,w
  2010  07F5  00A3               	movwf	___ftpack@exp
  2011  07F6  01A4               	clrf	___ftpack@sign
  2012  07F7  3186  2653         	fcall	___ftpack
  2013  07F9  0820               	movf	?___ftpack,w
  2014  07FA  00A8               	movwf	?___lbtoft
  2015  07FB  0821               	movf	?___ftpack+1,w
  2016  07FC  00A9               	movwf	?___lbtoft+1
  2017  07FD  0822               	movf	?___ftpack+2,w
  2018  07FE  00AA               	movwf	?___lbtoft+2
  2019  07FF  0008               	return
  2020  0800                     __end_of___lbtoft:	
  2021                           
  2022                           	psect	text4
  2023  05DE                     __ptext4:	
  2024 ;; *************** function ___fttol *****************
  2025 ;; Defined at:
  2026 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fttol.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  f1              3   59[BANK0 ] float 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  lval            4   68[BANK0 ] unsigned long 
  2031 ;;  exp1            1   72[BANK0 ] unsigned char 
  2032 ;;  sign1           1   67[BANK0 ] unsigned char 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  4   59[BANK0 ] long 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 1F/0
  2039 ;;		On exit  : 1F/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2042 ;;      Params:         0       4       0       0
  2043 ;;      Locals:         0       6       0       0
  2044 ;;      Temps:          0       4       0       0
  2045 ;;      Totals:         0      14       0       0
  2046 ;;Total ram usage:       14 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    3
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_CalcWidth
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function ___fttol
  2058  05DE                     ___fttol:	
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2062  05DE  085B               	movf	___fttol@f1,w
  2063  05DF  00DF               	movwf	??___fttol
  2064  05E0  085C               	movf	___fttol@f1+1,w
  2065  05E1  00E0               	movwf	??___fttol+1
  2066  05E2  085D               	movf	___fttol@f1+2,w
  2067  05E3  00E1               	movwf	??___fttol+2
  2068  05E4  1003               	clrc
  2069  05E5  0D60               	rlf	??___fttol+1,w
  2070  05E6  0D61               	rlf	??___fttol+2,w
  2071  05E7  00E2               	movwf	??___fttol+3
  2072  05E8  0862               	movf	??___fttol+3,w
  2073  05E9  00E8               	movwf	___fttol@exp1
  2074  05EA  0868               	movf	___fttol@exp1,w
  2075  05EB  1D03               	btfss	3,2
  2076  05EC  2DF6               	goto	l1592
  2077  05ED                     l1588:	
  2078  05ED  3000               	movlw	0
  2079  05EE  00DE               	movwf	?___fttol+3
  2080  05EF  3000               	movlw	0
  2081  05F0  00DD               	movwf	?___fttol+2
  2082  05F1  3000               	movlw	0
  2083  05F2  00DC               	movwf	?___fttol+1
  2084  05F3  3000               	movlw	0
  2085  05F4  00DB               	movwf	?___fttol
  2086  05F5  0008               	return
  2087  05F6                     l1592:	
  2088  05F6  085B               	movf	___fttol@f1,w
  2089  05F7  00DF               	movwf	??___fttol
  2090  05F8  085C               	movf	___fttol@f1+1,w
  2091  05F9  00E0               	movwf	??___fttol+1
  2092  05FA  085D               	movf	___fttol@f1+2,w
  2093  05FB  00E1               	movwf	??___fttol+2
  2094  05FC  3017               	movlw	23
  2095  05FD                     u1605:	
  2096  05FD  36E1               	lsrf	??___fttol+2,f
  2097  05FE  0CE0               	rrf	??___fttol+1,f
  2098  05FF  0CDF               	rrf	??___fttol,f
  2099  0600  0B89               	decfsz	9,f
  2100  0601  2DFD               	goto	u1605
  2101  0602  085F               	movf	??___fttol,w
  2102  0603  00E2               	movwf	??___fttol+3
  2103  0604  0862               	movf	??___fttol+3,w
  2104  0605  00E3               	movwf	___fttol@sign1
  2105  0606  17DC               	bsf	___fttol@f1+1,7
  2106  0607  30FF               	movlw	255
  2107  0608  05DB               	andwf	___fttol@f1,f
  2108  0609  30FF               	movlw	255
  2109  060A  05DC               	andwf	___fttol@f1+1,f
  2110  060B  3000               	movlw	0
  2111  060C  05DD               	andwf	___fttol@f1+2,f
  2112  060D  085B               	movf	___fttol@f1,w
  2113  060E  00E4               	movwf	___fttol@lval
  2114  060F  085C               	movf	___fttol@f1+1,w
  2115  0610  00E5               	movwf	___fttol@lval+1
  2116  0611  085D               	movf	___fttol@f1+2,w
  2117  0612  00E6               	movwf	___fttol@lval+2
  2118  0613  01E7               	clrf	___fttol@lval+3
  2119  0614  308E               	movlw	142
  2120  0615  02E8               	subwf	___fttol@exp1,f
  2121  0616  1FE8               	btfss	___fttol@exp1,7
  2122  0617  2E2B               	goto	l1612
  2123  0618  0868               	movf	___fttol@exp1,w
  2124  0619  3A80               	xorlw	128
  2125  061A  3E8F               	addlw	143
  2126  061B  1C03               	btfss	3,0
  2127  061C  2DED               	goto	l1588
  2128  061D                     l1610:	
  2129  061D  3001               	movlw	1
  2130  061E                     u1635:	
  2131  061E  36E7               	lsrf	___fttol@lval+3,f
  2132  061F  0CE6               	rrf	___fttol@lval+2,f
  2133  0620  0CE5               	rrf	___fttol@lval+1,f
  2134  0621  0CE4               	rrf	___fttol@lval,f
  2135  0622  0B89               	decfsz	9,f
  2136  0623  2E1E               	goto	u1635
  2137  0624  3001               	movlw	1
  2138  0625  00DF               	movwf	??___fttol
  2139  0626  085F               	movf	??___fttol,w
  2140  0627  07E8               	addwf	___fttol@exp1,f
  2141  0628  1903               	btfsc	3,2
  2142  0629  2E3C               	goto	l1620
  2143  062A  2E1D               	goto	l1610
  2144  062B                     l1612:	
  2145  062B  3018               	movlw	24
  2146  062C  0268               	subwf	___fttol@exp1,w
  2147  062D  1803               	btfsc	3,0
  2148  062E  2DED               	goto	l1588
  2149  062F                     l684:	
  2150  062F  0868               	movf	___fttol@exp1,w
  2151  0630  1903               	btfsc	3,2
  2152  0631  2E3C               	goto	l1620
  2153  0632  3001               	movlw	1
  2154  0633                     u1665:	
  2155  0633  35E4               	lslf	___fttol@lval,f
  2156  0634  0DE5               	rlf	___fttol@lval+1,f
  2157  0635  0DE6               	rlf	___fttol@lval+2,f
  2158  0636  0DE7               	rlf	___fttol@lval+3,f
  2159  0637  0B89               	decfsz	9,f
  2160  0638  2E33               	goto	u1665
  2161  0639  3001               	movlw	1
  2162  063A  02E8               	subwf	___fttol@exp1,f
  2163  063B  2E2F               	goto	l684
  2164  063C                     l1620:	
  2165  063C  0863               	movf	___fttol@sign1,w
  2166  063D  1903               	btfsc	3,2
  2167  063E  2E4A               	goto	l1624
  2168  063F  09E4               	comf	___fttol@lval,f
  2169  0640  09E5               	comf	___fttol@lval+1,f
  2170  0641  09E6               	comf	___fttol@lval+2,f
  2171  0642  09E7               	comf	___fttol@lval+3,f
  2172  0643  0AE4               	incf	___fttol@lval,f
  2173  0644  1903               	skipnz
  2174  0645  0AE5               	incf	___fttol@lval+1,f
  2175  0646  1903               	skipnz
  2176  0647  0AE6               	incf	___fttol@lval+2,f
  2177  0648  1903               	skipnz
  2178  0649  0AE7               	incf	___fttol@lval+3,f
  2179  064A                     l1624:	
  2180  064A  0867               	movf	___fttol@lval+3,w
  2181  064B  00DE               	movwf	?___fttol+3
  2182  064C  0866               	movf	___fttol@lval+2,w
  2183  064D  00DD               	movwf	?___fttol+2
  2184  064E  0865               	movf	___fttol@lval+1,w
  2185  064F  00DC               	movwf	?___fttol+1
  2186  0650  0864               	movf	___fttol@lval,w
  2187  0651  00DB               	movwf	?___fttol
  2188  0652  0008               	return
  2189  0653                     __end_of___fttol:	
  2190                           
  2191                           	psect	text5
  2192  04B5                     __ptext5:	
  2193 ;; *************** function ___ftmul *****************
  2194 ;; Defined at:
  2195 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftmul.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  f1              3   30[BANK0 ] float 
  2198 ;;  f2              3   33[BANK0 ] float 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  2201 ;;  sign            1   45[BANK0 ] unsigned char 
  2202 ;;  cntr            1   44[BANK0 ] unsigned char 
  2203 ;;  exp             1   40[BANK0 ] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  3   30[BANK0 ] float 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0, pclath, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 1F/0
  2210 ;;		On exit  : 1F/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2213 ;;      Params:         0       6       0       0
  2214 ;;      Locals:         0       6       0       0
  2215 ;;      Temps:          0       4       0       0
  2216 ;;      Totals:         0      16       0       0
  2217 ;;Total ram usage:       16 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    4
  2220 ;; This function calls:
  2221 ;;		___ftpack
  2222 ;; This function is called by:
  2223 ;;		_CalcWidth
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function ___ftmul
  2229  04B5                     ___ftmul:	
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2233  04B5  083E               	movf	___ftmul@f1,w
  2234  04B6  00C4               	movwf	??___ftmul
  2235  04B7  083F               	movf	___ftmul@f1+1,w
  2236  04B8  00C5               	movwf	??___ftmul+1
  2237  04B9  0840               	movf	___ftmul@f1+2,w
  2238  04BA  00C6               	movwf	??___ftmul+2
  2239  04BB  1003               	clrc
  2240  04BC  0D45               	rlf	??___ftmul+1,w
  2241  04BD  0D46               	rlf	??___ftmul+2,w
  2242  04BE  00C7               	movwf	??___ftmul+3
  2243  04BF  0847               	movf	??___ftmul+3,w
  2244  04C0  00C8               	movwf	___ftmul@exp
  2245  04C1  0848               	movf	___ftmul@exp,w
  2246  04C2  1D03               	btfss	3,2
  2247  04C3  2CCB               	goto	l1536
  2248  04C4  3000               	movlw	0
  2249  04C5  00BE               	movwf	?___ftmul
  2250  04C6  3000               	movlw	0
  2251  04C7  00BF               	movwf	?___ftmul+1
  2252  04C8  3000               	movlw	0
  2253  04C9  00C0               	movwf	?___ftmul+2
  2254  04CA  0008               	return
  2255  04CB                     l1536:	
  2256  04CB  0841               	movf	___ftmul@f2,w
  2257  04CC  00C4               	movwf	??___ftmul
  2258  04CD  0842               	movf	___ftmul@f2+1,w
  2259  04CE  00C5               	movwf	??___ftmul+1
  2260  04CF  0843               	movf	___ftmul@f2+2,w
  2261  04D0  00C6               	movwf	??___ftmul+2
  2262  04D1  1003               	clrc
  2263  04D2  0D45               	rlf	??___ftmul+1,w
  2264  04D3  0D46               	rlf	??___ftmul+2,w
  2265  04D4  00C7               	movwf	??___ftmul+3
  2266  04D5  0847               	movf	??___ftmul+3,w
  2267  04D6  00CD               	movwf	___ftmul@sign
  2268  04D7  084D               	movf	___ftmul@sign,w
  2269  04D8  1D03               	btfss	3,2
  2270  04D9  2CE1               	goto	l1542
  2271  04DA  3000               	movlw	0
  2272  04DB  00BE               	movwf	?___ftmul
  2273  04DC  3000               	movlw	0
  2274  04DD  00BF               	movwf	?___ftmul+1
  2275  04DE  3000               	movlw	0
  2276  04DF  00C0               	movwf	?___ftmul+2
  2277  04E0  0008               	return
  2278  04E1                     l1542:	
  2279  04E1  084D               	movf	___ftmul@sign,w
  2280  04E2  3E7B               	addlw	123
  2281  04E3  00C4               	movwf	??___ftmul
  2282  04E4  0844               	movf	??___ftmul,w
  2283  04E5  07C8               	addwf	___ftmul@exp,f
  2284  04E6  0840               	movf	___ftmul@f1+2,w
  2285  04E7  00C4               	movwf	??___ftmul
  2286  04E8  0844               	movf	??___ftmul,w
  2287  04E9  00CD               	movwf	___ftmul@sign
  2288  04EA  0843               	movf	___ftmul@f2+2,w
  2289  04EB  00C4               	movwf	??___ftmul
  2290  04EC  0844               	movf	??___ftmul,w
  2291  04ED  06CD               	xorwf	___ftmul@sign,f
  2292  04EE  3080               	movlw	128
  2293  04EF  00C4               	movwf	??___ftmul
  2294  04F0  0844               	movf	??___ftmul,w
  2295  04F1  05CD               	andwf	___ftmul@sign,f
  2296  04F2  17BF               	bsf	___ftmul@f1+1,7
  2297  04F3  17C2               	bsf	___ftmul@f2+1,7
  2298  04F4  30FF               	movlw	255
  2299  04F5  05C1               	andwf	___ftmul@f2,f
  2300  04F6  30FF               	movlw	255
  2301  04F7  05C2               	andwf	___ftmul@f2+1,f
  2302  04F8  3000               	movlw	0
  2303  04F9  05C3               	andwf	___ftmul@f2+2,f
  2304  04FA  3000               	movlw	0
  2305  04FB  00C9               	movwf	___ftmul@f3_as_product
  2306  04FC  3000               	movlw	0
  2307  04FD  00CA               	movwf	___ftmul@f3_as_product+1
  2308  04FE  3000               	movlw	0
  2309  04FF  00CB               	movwf	___ftmul@f3_as_product+2
  2310  0500  3007               	movlw	7
  2311  0501  00C4               	movwf	??___ftmul
  2312  0502  0844               	movf	??___ftmul,w
  2313  0503  00CC               	movwf	___ftmul@cntr
  2314  0504                     l1560:	
  2315  0504  1C3E               	btfss	___ftmul@f1,0
  2316  0505  2D0C               	goto	l1564
  2317  0506  0841               	movf	___ftmul@f2,w
  2318  0507  07C9               	addwf	___ftmul@f3_as_product,f
  2319  0508  0842               	movf	___ftmul@f2+1,w
  2320  0509  3DCA               	addwfc	___ftmul@f3_as_product+1,f
  2321  050A  0843               	movf	___ftmul@f2+2,w
  2322  050B  3DCB               	addwfc	___ftmul@f3_as_product+2,f
  2323  050C                     l1564:	
  2324  050C  3001               	movlw	1
  2325  050D                     u1525:	
  2326  050D  36C0               	lsrf	___ftmul@f1+2,f
  2327  050E  0CBF               	rrf	___ftmul@f1+1,f
  2328  050F  0CBE               	rrf	___ftmul@f1,f
  2329  0510  0B89               	decfsz	9,f
  2330  0511  2D0D               	goto	u1525
  2331  0512  3001               	movlw	1
  2332  0513                     u1535:	
  2333  0513  35C1               	lslf	___ftmul@f2,f
  2334  0514  0DC2               	rlf	___ftmul@f2+1,f
  2335  0515  0DC3               	rlf	___ftmul@f2+2,f
  2336  0516  0B89               	decfsz	9,f
  2337  0517  2D13               	goto	u1535
  2338  0518  3001               	movlw	1
  2339  0519  02CC               	subwf	___ftmul@cntr,f
  2340  051A  1D03               	btfss	3,2
  2341  051B  2D04               	goto	l1560
  2342  051C  3009               	movlw	9
  2343  051D  00C4               	movwf	??___ftmul
  2344  051E  0844               	movf	??___ftmul,w
  2345  051F  00CC               	movwf	___ftmul@cntr
  2346  0520                     l1572:	
  2347  0520  1C3E               	btfss	___ftmul@f1,0
  2348  0521  2D28               	goto	l1576
  2349  0522  0841               	movf	___ftmul@f2,w
  2350  0523  07C9               	addwf	___ftmul@f3_as_product,f
  2351  0524  0842               	movf	___ftmul@f2+1,w
  2352  0525  3DCA               	addwfc	___ftmul@f3_as_product+1,f
  2353  0526  0843               	movf	___ftmul@f2+2,w
  2354  0527  3DCB               	addwfc	___ftmul@f3_as_product+2,f
  2355  0528                     l1576:	
  2356  0528  3001               	movlw	1
  2357  0529                     u1565:	
  2358  0529  36C0               	lsrf	___ftmul@f1+2,f
  2359  052A  0CBF               	rrf	___ftmul@f1+1,f
  2360  052B  0CBE               	rrf	___ftmul@f1,f
  2361  052C  0B89               	decfsz	9,f
  2362  052D  2D29               	goto	u1565
  2363  052E  3001               	movlw	1
  2364  052F                     u1575:	
  2365  052F  36CB               	lsrf	___ftmul@f3_as_product+2,f
  2366  0530  0CCA               	rrf	___ftmul@f3_as_product+1,f
  2367  0531  0CC9               	rrf	___ftmul@f3_as_product,f
  2368  0532  0B89               	decfsz	9,f
  2369  0533  2D2F               	goto	u1575
  2370  0534  3001               	movlw	1
  2371  0535  02CC               	subwf	___ftmul@cntr,f
  2372  0536  1D03               	btfss	3,2
  2373  0537  2D20               	goto	l1572
  2374  0538  0849               	movf	___ftmul@f3_as_product,w
  2375  0539  00A0               	movwf	___ftpack@arg
  2376  053A  084A               	movf	___ftmul@f3_as_product+1,w
  2377  053B  00A1               	movwf	___ftpack@arg+1
  2378  053C  084B               	movf	___ftmul@f3_as_product+2,w
  2379  053D  00A2               	movwf	___ftpack@arg+2
  2380  053E  0848               	movf	___ftmul@exp,w
  2381  053F  00C4               	movwf	??___ftmul
  2382  0540  0844               	movf	??___ftmul,w
  2383  0541  00A3               	movwf	___ftpack@exp
  2384  0542  084D               	movf	___ftmul@sign,w
  2385  0543  00C5               	movwf	??___ftmul+1
  2386  0544  0845               	movf	??___ftmul+1,w
  2387  0545  00A4               	movwf	___ftpack@sign
  2388  0546  3186  2653         	fcall	___ftpack
  2389  0548  0820               	movf	?___ftpack,w
  2390  0549  00BE               	movwf	?___ftmul
  2391  054A  0821               	movf	?___ftpack+1,w
  2392  054B  00BF               	movwf	?___ftmul+1
  2393  054C  0822               	movf	?___ftpack+2,w
  2394  054D  00C0               	movwf	?___ftmul+2
  2395  054E  0008               	return
  2396  054F                     __end_of___ftmul:	
  2397                           
  2398                           	psect	text6
  2399  054F                     __ptext6:	
  2400 ;; *************** function ___ftdiv *****************
  2401 ;; Defined at:
  2402 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftdiv.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  f2              3   14[BANK0 ] float 
  2405 ;;  f1              3   17[BANK0 ] float 
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;  f3              3   25[BANK0 ] float 
  2408 ;;  sign            1   29[BANK0 ] unsigned char 
  2409 ;;  exp             1   28[BANK0 ] unsigned char 
  2410 ;;  cntr            1   24[BANK0 ] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  3   14[BANK0 ] float 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 1F/0
  2417 ;;		On exit  : 1F/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2420 ;;      Params:         0       6       0       0
  2421 ;;      Locals:         0       6       0       0
  2422 ;;      Temps:          0       4       0       0
  2423 ;;      Totals:         0      16       0       0
  2424 ;;Total ram usage:       16 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    4
  2427 ;; This function calls:
  2428 ;;		___ftpack
  2429 ;; This function is called by:
  2430 ;;		_CalcWidth
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function ___ftdiv
  2436  054F                     ___ftdiv:	
  2437                           
  2438                           ;incstack = 0
  2439                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2440  054F  0831               	movf	___ftdiv@f1,w
  2441  0550  00B4               	movwf	??___ftdiv
  2442  0551  0832               	movf	___ftdiv@f1+1,w
  2443  0552  00B5               	movwf	??___ftdiv+1
  2444  0553  0833               	movf	___ftdiv@f1+2,w
  2445  0554  00B6               	movwf	??___ftdiv+2
  2446  0555  1003               	clrc
  2447  0556  0D35               	rlf	??___ftdiv+1,w
  2448  0557  0D36               	rlf	??___ftdiv+2,w
  2449  0558  00B7               	movwf	??___ftdiv+3
  2450  0559  0837               	movf	??___ftdiv+3,w
  2451  055A  00BC               	movwf	___ftdiv@exp
  2452  055B  083C               	movf	___ftdiv@exp,w
  2453  055C  1D03               	btfss	3,2
  2454  055D  2D65               	goto	l1494
  2455  055E  3000               	movlw	0
  2456  055F  00AE               	movwf	?___ftdiv
  2457  0560  3000               	movlw	0
  2458  0561  00AF               	movwf	?___ftdiv+1
  2459  0562  3000               	movlw	0
  2460  0563  00B0               	movwf	?___ftdiv+2
  2461  0564  0008               	return
  2462  0565                     l1494:	
  2463  0565  082E               	movf	___ftdiv@f2,w
  2464  0566  00B4               	movwf	??___ftdiv
  2465  0567  082F               	movf	___ftdiv@f2+1,w
  2466  0568  00B5               	movwf	??___ftdiv+1
  2467  0569  0830               	movf	___ftdiv@f2+2,w
  2468  056A  00B6               	movwf	??___ftdiv+2
  2469  056B  1003               	clrc
  2470  056C  0D35               	rlf	??___ftdiv+1,w
  2471  056D  0D36               	rlf	??___ftdiv+2,w
  2472  056E  00B7               	movwf	??___ftdiv+3
  2473  056F  0837               	movf	??___ftdiv+3,w
  2474  0570  00BD               	movwf	___ftdiv@sign
  2475  0571  083D               	movf	___ftdiv@sign,w
  2476  0572  1D03               	btfss	3,2
  2477  0573  2D7B               	goto	l1500
  2478  0574  3000               	movlw	0
  2479  0575  00AE               	movwf	?___ftdiv
  2480  0576  3000               	movlw	0
  2481  0577  00AF               	movwf	?___ftdiv+1
  2482  0578  3000               	movlw	0
  2483  0579  00B0               	movwf	?___ftdiv+2
  2484  057A  0008               	return
  2485  057B                     l1500:	
  2486  057B  3000               	movlw	0
  2487  057C  00B9               	movwf	___ftdiv@f3
  2488  057D  3000               	movlw	0
  2489  057E  00BA               	movwf	___ftdiv@f3+1
  2490  057F  3000               	movlw	0
  2491  0580  00BB               	movwf	___ftdiv@f3+2
  2492  0581  3089               	movlw	137
  2493  0582  073D               	addwf	___ftdiv@sign,w
  2494  0583  00B4               	movwf	??___ftdiv
  2495  0584  0834               	movf	??___ftdiv,w
  2496  0585  02BC               	subwf	___ftdiv@exp,f
  2497  0586  0833               	movf	___ftdiv@f1+2,w
  2498  0587  00B4               	movwf	??___ftdiv
  2499  0588  0834               	movf	??___ftdiv,w
  2500  0589  00BD               	movwf	___ftdiv@sign
  2501  058A  0830               	movf	___ftdiv@f2+2,w
  2502  058B  00B4               	movwf	??___ftdiv
  2503  058C  0834               	movf	??___ftdiv,w
  2504  058D  06BD               	xorwf	___ftdiv@sign,f
  2505  058E  3080               	movlw	128
  2506  058F  00B4               	movwf	??___ftdiv
  2507  0590  0834               	movf	??___ftdiv,w
  2508  0591  05BD               	andwf	___ftdiv@sign,f
  2509  0592  17B2               	bsf	___ftdiv@f1+1,7
  2510  0593  30FF               	movlw	255
  2511  0594  05B1               	andwf	___ftdiv@f1,f
  2512  0595  30FF               	movlw	255
  2513  0596  05B2               	andwf	___ftdiv@f1+1,f
  2514  0597  3000               	movlw	0
  2515  0598  05B3               	andwf	___ftdiv@f1+2,f
  2516  0599  17AF               	bsf	___ftdiv@f2+1,7
  2517  059A  30FF               	movlw	255
  2518  059B  05AE               	andwf	___ftdiv@f2,f
  2519  059C  30FF               	movlw	255
  2520  059D  05AF               	andwf	___ftdiv@f2+1,f
  2521  059E  3000               	movlw	0
  2522  059F  05B0               	andwf	___ftdiv@f2+2,f
  2523  05A0  3018               	movlw	24
  2524  05A1  00B4               	movwf	??___ftdiv
  2525  05A2  0834               	movf	??___ftdiv,w
  2526  05A3  00B8               	movwf	___ftdiv@cntr
  2527  05A4                     l1516:	
  2528  05A4  3001               	movlw	1
  2529  05A5                     u1455:	
  2530  05A5  35B9               	lslf	___ftdiv@f3,f
  2531  05A6  0DBA               	rlf	___ftdiv@f3+1,f
  2532  05A7  0DBB               	rlf	___ftdiv@f3+2,f
  2533  05A8  0B89               	decfsz	9,f
  2534  05A9  2DA5               	goto	u1455
  2535  05AA  0830               	movf	___ftdiv@f2+2,w
  2536  05AB  0233               	subwf	___ftdiv@f1+2,w
  2537  05AC  1D03               	skipz
  2538  05AD  2DB4               	goto	u1465
  2539  05AE  082F               	movf	___ftdiv@f2+1,w
  2540  05AF  0232               	subwf	___ftdiv@f1+1,w
  2541  05B0  1D03               	skipz
  2542  05B1  2DB4               	goto	u1465
  2543  05B2  082E               	movf	___ftdiv@f2,w
  2544  05B3  0231               	subwf	___ftdiv@f1,w
  2545  05B4                     u1465:	
  2546  05B4  1C03               	skipc
  2547  05B5  2DBD               	goto	l1522
  2548  05B6  082E               	movf	___ftdiv@f2,w
  2549  05B7  02B1               	subwf	___ftdiv@f1,f
  2550  05B8  082F               	movf	___ftdiv@f2+1,w
  2551  05B9  3BB2               	subwfb	___ftdiv@f1+1,f
  2552  05BA  0830               	movf	___ftdiv@f2+2,w
  2553  05BB  3BB3               	subwfb	___ftdiv@f1+2,f
  2554  05BC  1439               	bsf	___ftdiv@f3,0
  2555  05BD                     l1522:	
  2556  05BD  3001               	movlw	1
  2557  05BE                     u1475:	
  2558  05BE  35B1               	lslf	___ftdiv@f1,f
  2559  05BF  0DB2               	rlf	___ftdiv@f1+1,f
  2560  05C0  0DB3               	rlf	___ftdiv@f1+2,f
  2561  05C1  0B89               	decfsz	9,f
  2562  05C2  2DBE               	goto	u1475
  2563  05C3  3001               	movlw	1
  2564  05C4  02B8               	subwf	___ftdiv@cntr,f
  2565  05C5  1D03               	btfss	3,2
  2566  05C6  2DA4               	goto	l1516
  2567  05C7  0839               	movf	___ftdiv@f3,w
  2568  05C8  00A0               	movwf	___ftpack@arg
  2569  05C9  083A               	movf	___ftdiv@f3+1,w
  2570  05CA  00A1               	movwf	___ftpack@arg+1
  2571  05CB  083B               	movf	___ftdiv@f3+2,w
  2572  05CC  00A2               	movwf	___ftpack@arg+2
  2573  05CD  083C               	movf	___ftdiv@exp,w
  2574  05CE  00B4               	movwf	??___ftdiv
  2575  05CF  0834               	movf	??___ftdiv,w
  2576  05D0  00A3               	movwf	___ftpack@exp
  2577  05D1  083D               	movf	___ftdiv@sign,w
  2578  05D2  00B5               	movwf	??___ftdiv+1
  2579  05D3  0835               	movf	??___ftdiv+1,w
  2580  05D4  00A4               	movwf	___ftpack@sign
  2581  05D5  3186  2653         	fcall	___ftpack
  2582  05D7  0820               	movf	?___ftpack,w
  2583  05D8  00AE               	movwf	?___ftdiv
  2584  05D9  0821               	movf	?___ftpack+1,w
  2585  05DA  00AF               	movwf	?___ftdiv+1
  2586  05DB  0822               	movf	?___ftpack+2,w
  2587  05DC  00B0               	movwf	?___ftdiv+2
  2588  05DD  0008               	return
  2589  05DE                     __end_of___ftdiv:	
  2590                           
  2591                           	psect	text7
  2592  0237                     __ptext7:	
  2593 ;; *************** function ___ftadd *****************
  2594 ;; Defined at:
  2595 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\ftadd.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  f1              3   46[BANK0 ] float 
  2598 ;;  f2              3   49[BANK0 ] float 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  exp1            1   58[BANK0 ] unsigned char 
  2601 ;;  exp2            1   57[BANK0 ] unsigned char 
  2602 ;;  sign            1   56[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  3   46[BANK0 ] float 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0, pclath, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 1F/0
  2609 ;;		On exit  : 1F/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2612 ;;      Params:         0       6       0       0
  2613 ;;      Locals:         0       3       0       0
  2614 ;;      Temps:          0       4       0       0
  2615 ;;      Totals:         0      13       0       0
  2616 ;;Total ram usage:       13 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    4
  2619 ;; This function calls:
  2620 ;;		___ftpack
  2621 ;; This function is called by:
  2622 ;;		_CalcWidth
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function ___ftadd
  2628  0237                     ___ftadd:	
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2632  0237  084E               	movf	___ftadd@f1,w
  2633  0238  00D4               	movwf	??___ftadd
  2634  0239  084F               	movf	___ftadd@f1+1,w
  2635  023A  00D5               	movwf	??___ftadd+1
  2636  023B  0850               	movf	___ftadd@f1+2,w
  2637  023C  00D6               	movwf	??___ftadd+2
  2638  023D  1003               	clrc
  2639  023E  0D55               	rlf	??___ftadd+1,w
  2640  023F  0D56               	rlf	??___ftadd+2,w
  2641  0240  00D7               	movwf	??___ftadd+3
  2642  0241  0857               	movf	??___ftadd+3,w
  2643  0242  00DA               	movwf	___ftadd@exp1
  2644  0243  0851               	movf	___ftadd@f2,w
  2645  0244  00D4               	movwf	??___ftadd
  2646  0245  0852               	movf	___ftadd@f2+1,w
  2647  0246  00D5               	movwf	??___ftadd+1
  2648  0247  0853               	movf	___ftadd@f2+2,w
  2649  0248  00D6               	movwf	??___ftadd+2
  2650  0249  1003               	clrc
  2651  024A  0D55               	rlf	??___ftadd+1,w
  2652  024B  0D56               	rlf	??___ftadd+2,w
  2653  024C  00D7               	movwf	??___ftadd+3
  2654  024D  0857               	movf	??___ftadd+3,w
  2655  024E  00D9               	movwf	___ftadd@exp2
  2656  024F  085A               	movf	___ftadd@exp1,w
  2657  0250  1903               	btfsc	3,2
  2658  0251  2A5E               	goto	l1424
  2659  0252  0859               	movf	___ftadd@exp2,w
  2660  0253  025A               	subwf	___ftadd@exp1,w
  2661  0254  1803               	skipnc
  2662  0255  2A65               	goto	l1428
  2663  0256  0859               	movf	___ftadd@exp2,w
  2664  0257  00D4               	movwf	??___ftadd
  2665  0258  085A               	movf	___ftadd@exp1,w
  2666  0259  02D4               	subwf	??___ftadd,f
  2667  025A  3019               	movlw	25
  2668  025B  0254               	subwf	??___ftadd,w
  2669  025C  1C03               	skipc
  2670  025D  2A65               	goto	l1428
  2671  025E                     l1424:	
  2672  025E  0851               	movf	___ftadd@f2,w
  2673  025F  00CE               	movwf	?___ftadd
  2674  0260  0852               	movf	___ftadd@f2+1,w
  2675  0261  00CF               	movwf	?___ftadd+1
  2676  0262  0853               	movf	___ftadd@f2+2,w
  2677  0263  00D0               	movwf	?___ftadd+2
  2678  0264  0008               	return
  2679  0265                     l1428:	
  2680  0265  0859               	movf	___ftadd@exp2,w
  2681  0266  1903               	btfsc	3,2
  2682  0267  0008               	return
  2683  0268  085A               	movf	___ftadd@exp1,w
  2684  0269  0259               	subwf	___ftadd@exp2,w
  2685  026A  1803               	skipnc
  2686  026B  2A74               	goto	l1434
  2687  026C  085A               	movf	___ftadd@exp1,w
  2688  026D  00D4               	movwf	??___ftadd
  2689  026E  0859               	movf	___ftadd@exp2,w
  2690  026F  02D4               	subwf	??___ftadd,f
  2691  0270  3019               	movlw	25
  2692  0271  0254               	subwf	??___ftadd,w
  2693  0272  1803               	btfsc	3,0
  2694  0273  0008               	return
  2695  0274                     l1434:	
  2696  0274  3006               	movlw	6
  2697  0275  00D4               	movwf	??___ftadd
  2698  0276  0854               	movf	??___ftadd,w
  2699  0277  00D8               	movwf	___ftadd@sign
  2700  0278  1BD0               	btfsc	___ftadd@f1+2,7
  2701  0279  17D8               	bsf	___ftadd@sign,7
  2702  027A  1BD3               	btfsc	___ftadd@f2+2,7
  2703  027B  1758               	bsf	___ftadd@sign,6
  2704  027C  17CF               	bsf	___ftadd@f1+1,7
  2705  027D  30FF               	movlw	255
  2706  027E  05CE               	andwf	___ftadd@f1,f
  2707  027F  30FF               	movlw	255
  2708  0280  05CF               	andwf	___ftadd@f1+1,f
  2709  0281  3000               	movlw	0
  2710  0282  05D0               	andwf	___ftadd@f1+2,f
  2711  0283  17D2               	bsf	___ftadd@f2+1,7
  2712  0284  30FF               	movlw	255
  2713  0285  05D1               	andwf	___ftadd@f2,f
  2714  0286  30FF               	movlw	255
  2715  0287  05D2               	andwf	___ftadd@f2+1,f
  2716  0288  3000               	movlw	0
  2717  0289  05D3               	andwf	___ftadd@f2+2,f
  2718  028A  0859               	movf	___ftadd@exp2,w
  2719  028B  025A               	subwf	___ftadd@exp1,w
  2720  028C  1803               	skipnc
  2721  028D  2AB0               	goto	l1456
  2722  028E                     l1446:	
  2723  028E  3001               	movlw	1
  2724  028F                     u1295:	
  2725  028F  35D1               	lslf	___ftadd@f2,f
  2726  0290  0DD2               	rlf	___ftadd@f2+1,f
  2727  0291  0DD3               	rlf	___ftadd@f2+2,f
  2728  0292  0B89               	decfsz	9,f
  2729  0293  2A8F               	goto	u1295
  2730  0294  3001               	movlw	1
  2731  0295  02D9               	subwf	___ftadd@exp2,f
  2732  0296  0859               	movf	___ftadd@exp2,w
  2733  0297  065A               	xorwf	___ftadd@exp1,w
  2734  0298  1903               	skipnz
  2735  0299  2AAB               	goto	l1454
  2736  029A  3001               	movlw	1
  2737  029B  02D8               	subwf	___ftadd@sign,f
  2738  029C  0858               	movf	___ftadd@sign,w
  2739  029D  3907               	andlw	7
  2740  029E  1903               	btfsc	3,2
  2741  029F  2AAB               	goto	l1454
  2742  02A0  2A8E               	goto	l1446
  2743  02A1                     l1452:	
  2744  02A1  3001               	movlw	1
  2745  02A2                     u1325:	
  2746  02A2  36D0               	lsrf	___ftadd@f1+2,f
  2747  02A3  0CCF               	rrf	___ftadd@f1+1,f
  2748  02A4  0CCE               	rrf	___ftadd@f1,f
  2749  02A5  0B89               	decfsz	9,f
  2750  02A6  2AA2               	goto	u1325
  2751  02A7  3001               	movlw	1
  2752  02A8  00D4               	movwf	??___ftadd
  2753  02A9  0854               	movf	??___ftadd,w
  2754  02AA  07DA               	addwf	___ftadd@exp1,f
  2755  02AB                     l1454:	
  2756  02AB  085A               	movf	___ftadd@exp1,w
  2757  02AC  0659               	xorwf	___ftadd@exp2,w
  2758  02AD  1903               	btfsc	3,2
  2759  02AE  2AD5               	goto	l624
  2760  02AF  2AA1               	goto	l1452
  2761  02B0                     l1456:	
  2762  02B0  085A               	movf	___ftadd@exp1,w
  2763  02B1  0259               	subwf	___ftadd@exp2,w
  2764  02B2  1803               	skipnc
  2765  02B3  2AD5               	goto	l624
  2766  02B4                     l1458:	
  2767  02B4  3001               	movlw	1
  2768  02B5                     u1355:	
  2769  02B5  35CE               	lslf	___ftadd@f1,f
  2770  02B6  0DCF               	rlf	___ftadd@f1+1,f
  2771  02B7  0DD0               	rlf	___ftadd@f1+2,f
  2772  02B8  0B89               	decfsz	9,f
  2773  02B9  2AB5               	goto	u1355
  2774  02BA  3001               	movlw	1
  2775  02BB  02DA               	subwf	___ftadd@exp1,f
  2776  02BC  0859               	movf	___ftadd@exp2,w
  2777  02BD  065A               	xorwf	___ftadd@exp1,w
  2778  02BE  1903               	skipnz
  2779  02BF  2AD1               	goto	l1466
  2780  02C0  3001               	movlw	1
  2781  02C1  02D8               	subwf	___ftadd@sign,f
  2782  02C2  0858               	movf	___ftadd@sign,w
  2783  02C3  3907               	andlw	7
  2784  02C4  1903               	btfsc	3,2
  2785  02C5  2AD1               	goto	l1466
  2786  02C6  2AB4               	goto	l1458
  2787  02C7                     l1464:	
  2788  02C7  3001               	movlw	1
  2789  02C8                     u1385:	
  2790  02C8  36D3               	lsrf	___ftadd@f2+2,f
  2791  02C9  0CD2               	rrf	___ftadd@f2+1,f
  2792  02CA  0CD1               	rrf	___ftadd@f2,f
  2793  02CB  0B89               	decfsz	9,f
  2794  02CC  2AC8               	goto	u1385
  2795  02CD  3001               	movlw	1
  2796  02CE  00D4               	movwf	??___ftadd
  2797  02CF  0854               	movf	??___ftadd,w
  2798  02D0  07D9               	addwf	___ftadd@exp2,f
  2799  02D1                     l1466:	
  2800  02D1  085A               	movf	___ftadd@exp1,w
  2801  02D2  0659               	xorwf	___ftadd@exp2,w
  2802  02D3  1D03               	skipz
  2803  02D4  2AC7               	goto	l1464
  2804  02D5                     l624:	
  2805  02D5  1FD8               	btfss	___ftadd@sign,7
  2806  02D6  2AE7               	goto	l1470
  2807  02D7  30FF               	movlw	255
  2808  02D8  06CE               	xorwf	___ftadd@f1,f
  2809  02D9  30FF               	movlw	255
  2810  02DA  06CF               	xorwf	___ftadd@f1+1,f
  2811  02DB  30FF               	movlw	255
  2812  02DC  06D0               	xorwf	___ftadd@f1+2,f
  2813  02DD  3001               	movlw	1
  2814  02DE  07CE               	addwf	___ftadd@f1,f
  2815  02DF  3000               	movlw	0
  2816  02E0  1803               	skipnc
  2817  02E1  3001               	movlw	1
  2818  02E2  07CF               	addwf	___ftadd@f1+1,f
  2819  02E3  3000               	movlw	0
  2820  02E4  1803               	skipnc
  2821  02E5  3001               	movlw	1
  2822  02E6  07D0               	addwf	___ftadd@f1+2,f
  2823  02E7                     l1470:	
  2824  02E7  1F58               	btfss	___ftadd@sign,6
  2825  02E8  2AF9               	goto	l1474
  2826  02E9  30FF               	movlw	255
  2827  02EA  06D1               	xorwf	___ftadd@f2,f
  2828  02EB  30FF               	movlw	255
  2829  02EC  06D2               	xorwf	___ftadd@f2+1,f
  2830  02ED  30FF               	movlw	255
  2831  02EE  06D3               	xorwf	___ftadd@f2+2,f
  2832  02EF  3001               	movlw	1
  2833  02F0  07D1               	addwf	___ftadd@f2,f
  2834  02F1  3000               	movlw	0
  2835  02F2  1803               	skipnc
  2836  02F3  3001               	movlw	1
  2837  02F4  07D2               	addwf	___ftadd@f2+1,f
  2838  02F5  3000               	movlw	0
  2839  02F6  1803               	skipnc
  2840  02F7  3001               	movlw	1
  2841  02F8  07D3               	addwf	___ftadd@f2+2,f
  2842  02F9                     l1474:	
  2843  02F9  01D8               	clrf	___ftadd@sign
  2844  02FA  084E               	movf	___ftadd@f1,w
  2845  02FB  07D1               	addwf	___ftadd@f2,f
  2846  02FC  084F               	movf	___ftadd@f1+1,w
  2847  02FD  3DD2               	addwfc	___ftadd@f2+1,f
  2848  02FE  0850               	movf	___ftadd@f1+2,w
  2849  02FF  3DD3               	addwfc	___ftadd@f2+2,f
  2850  0300  1FD3               	btfss	___ftadd@f2+2,7
  2851  0301  2B14               	goto	l1484
  2852  0302  30FF               	movlw	255
  2853  0303  06D1               	xorwf	___ftadd@f2,f
  2854  0304  30FF               	movlw	255
  2855  0305  06D2               	xorwf	___ftadd@f2+1,f
  2856  0306  30FF               	movlw	255
  2857  0307  06D3               	xorwf	___ftadd@f2+2,f
  2858  0308  3001               	movlw	1
  2859  0309  07D1               	addwf	___ftadd@f2,f
  2860  030A  3000               	movlw	0
  2861  030B  1803               	skipnc
  2862  030C  3001               	movlw	1
  2863  030D  07D2               	addwf	___ftadd@f2+1,f
  2864  030E  3000               	movlw	0
  2865  030F  1803               	skipnc
  2866  0310  3001               	movlw	1
  2867  0311  07D3               	addwf	___ftadd@f2+2,f
  2868  0312  01D8               	clrf	___ftadd@sign
  2869  0313  0AD8               	incf	___ftadd@sign,f
  2870  0314                     l1484:	
  2871  0314  0851               	movf	___ftadd@f2,w
  2872  0315  00A0               	movwf	___ftpack@arg
  2873  0316  0852               	movf	___ftadd@f2+1,w
  2874  0317  00A1               	movwf	___ftpack@arg+1
  2875  0318  0853               	movf	___ftadd@f2+2,w
  2876  0319  00A2               	movwf	___ftpack@arg+2
  2877  031A  085A               	movf	___ftadd@exp1,w
  2878  031B  00D4               	movwf	??___ftadd
  2879  031C  0854               	movf	??___ftadd,w
  2880  031D  00A3               	movwf	___ftpack@exp
  2881  031E  0858               	movf	___ftadd@sign,w
  2882  031F  00D5               	movwf	??___ftadd+1
  2883  0320  0855               	movf	??___ftadd+1,w
  2884  0321  00A4               	movwf	___ftpack@sign
  2885  0322  3186  2653         	fcall	___ftpack
  2886  0324  0820               	movf	?___ftpack,w
  2887  0325  00CE               	movwf	?___ftadd
  2888  0326  0821               	movf	?___ftpack+1,w
  2889  0327  00CF               	movwf	?___ftadd+1
  2890  0328  0822               	movf	?___ftpack+2,w
  2891  0329  00D0               	movwf	?___ftadd+2
  2892  032A  0008               	return
  2893  032B                     __end_of___ftadd:	
  2894                           
  2895                           	psect	text8
  2896  0F91                     __ptext8:	
  2897 ;; *************** function ___awtoft *****************
  2898 ;; Defined at:
  2899 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awtoft.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  c               2    8[BANK0 ] int 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  sign            1   13[BANK0 ] unsigned char 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;                  3    8[BANK0 ] float 
  2906 ;; Registers used:
  2907 ;;		wreg, status,2, status,0, pclath, cstack
  2908 ;; Tracked objects:
  2909 ;;		On entry : 1F/0
  2910 ;;		On exit  : 1F/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2913 ;;      Params:         0       3       0       0
  2914 ;;      Locals:         0       1       0       0
  2915 ;;      Temps:          0       2       0       0
  2916 ;;      Totals:         0       6       0       0
  2917 ;;Total ram usage:        6 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    4
  2920 ;; This function calls:
  2921 ;;		___ftpack
  2922 ;; This function is called by:
  2923 ;;		_CalcWidth
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function ___awtoft
  2929  0F91                     ___awtoft:	
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2933  0F91  01AD               	clrf	___awtoft@sign
  2934  0F92  1FA9               	btfss	___awtoft@c+1,7
  2935  0F93  2F9B               	goto	l1414
  2936  0F94  09A8               	comf	___awtoft@c,f
  2937  0F95  09A9               	comf	___awtoft@c+1,f
  2938  0F96  0AA8               	incf	___awtoft@c,f
  2939  0F97  1903               	skipnz
  2940  0F98  0AA9               	incf	___awtoft@c+1,f
  2941  0F99  01AD               	clrf	___awtoft@sign
  2942  0F9A  0AAD               	incf	___awtoft@sign,f
  2943  0F9B                     l1414:	
  2944  0F9B  0828               	movf	___awtoft@c,w
  2945  0F9C  00A0               	movwf	___ftpack@arg
  2946  0F9D  0829               	movf	___awtoft@c+1,w
  2947  0F9E  00A1               	movwf	___ftpack@arg+1
  2948  0F9F  01A2               	clrf	___ftpack@arg+2
  2949  0FA0  308E               	movlw	142
  2950  0FA1  00AB               	movwf	??___awtoft
  2951  0FA2  082B               	movf	??___awtoft,w
  2952  0FA3  00A3               	movwf	___ftpack@exp
  2953  0FA4  082D               	movf	___awtoft@sign,w
  2954  0FA5  00AC               	movwf	??___awtoft+1
  2955  0FA6  082C               	movf	??___awtoft+1,w
  2956  0FA7  00A4               	movwf	___ftpack@sign
  2957  0FA8  3186  2653         	fcall	___ftpack
  2958  0FAA  0820               	movf	?___ftpack,w
  2959  0FAB  00A8               	movwf	?___awtoft
  2960  0FAC  0821               	movf	?___ftpack+1,w
  2961  0FAD  00A9               	movwf	?___awtoft+1
  2962  0FAE  0822               	movf	?___ftpack+2,w
  2963  0FAF  00AA               	movwf	?___awtoft+2
  2964  0FB0  0008               	return
  2965  0FB1                     __end_of___awtoft:	
  2966                           
  2967                           	psect	text9
  2968  0653                     __ptext9:	
  2969 ;; *************** function ___ftpack *****************
  2970 ;; Defined at:
  2971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\float.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  arg             3    0[BANK0 ] unsigned um
  2974 ;;  exp             1    3[BANK0 ] unsigned char 
  2975 ;;  sign            1    4[BANK0 ] unsigned char 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  3    0[BANK0 ] float 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 1F/0
  2984 ;;		On exit  : 1F/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2987 ;;      Params:         0       5       0       0
  2988 ;;      Locals:         0       0       0       0
  2989 ;;      Temps:          0       3       0       0
  2990 ;;      Totals:         0       8       0       0
  2991 ;;Total ram usage:        8 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    3
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		___awtoft
  2998 ;;		___ftadd
  2999 ;;		___ftdiv
  3000 ;;		___ftmul
  3001 ;;		___lbtoft
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function ___ftpack
  3007  0653                     ___ftpack:	
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3011  0653  0823               	movf	___ftpack@exp,w
  3012  0654  1903               	btfsc	3,2
  3013  0655  2E5B               	goto	l1378
  3014  0656  0822               	movf	___ftpack@arg+2,w
  3015  0657  0421               	iorwf	___ftpack@arg+1,w
  3016  0658  0420               	iorwf	___ftpack@arg,w
  3017  0659  1D03               	skipz
  3018  065A  2E6C               	goto	l1384
  3019  065B                     l1378:	
  3020  065B  3000               	movlw	0
  3021  065C  00A0               	movwf	?___ftpack
  3022  065D  3000               	movlw	0
  3023  065E  00A1               	movwf	?___ftpack+1
  3024  065F  3000               	movlw	0
  3025  0660  00A2               	movwf	?___ftpack+2
  3026  0661  0008               	return
  3027  0662                     l1382:	
  3028  0662  3001               	movlw	1
  3029  0663  00A5               	movwf	??___ftpack
  3030  0664  0825               	movf	??___ftpack,w
  3031  0665  07A3               	addwf	___ftpack@exp,f
  3032  0666  3001               	movlw	1
  3033  0667                     u1095:	
  3034  0667  36A2               	lsrf	___ftpack@arg+2,f
  3035  0668  0CA1               	rrf	___ftpack@arg+1,f
  3036  0669  0CA0               	rrf	___ftpack@arg,f
  3037  066A  0B89               	decfsz	9,f
  3038  066B  2E67               	goto	u1095
  3039  066C                     l1384:	
  3040  066C  30FE               	movlw	254
  3041  066D  0522               	andwf	___ftpack@arg+2,w
  3042  066E  1903               	btfsc	3,2
  3043  066F  2E85               	goto	l593
  3044  0670  2E62               	goto	l1382
  3045  0671                     l1386:	
  3046  0671  3001               	movlw	1
  3047  0672  00A5               	movwf	??___ftpack
  3048  0673  0825               	movf	??___ftpack,w
  3049  0674  07A3               	addwf	___ftpack@exp,f
  3050  0675  3001               	movlw	1
  3051  0676  07A0               	addwf	___ftpack@arg,f
  3052  0677  3000               	movlw	0
  3053  0678  1803               	skipnc
  3054  0679  3001               	movlw	1
  3055  067A  07A1               	addwf	___ftpack@arg+1,f
  3056  067B  3000               	movlw	0
  3057  067C  1803               	skipnc
  3058  067D  3001               	movlw	1
  3059  067E  07A2               	addwf	___ftpack@arg+2,f
  3060  067F  3001               	movlw	1
  3061  0680                     u1115:	
  3062  0680  36A2               	lsrf	___ftpack@arg+2,f
  3063  0681  0CA1               	rrf	___ftpack@arg+1,f
  3064  0682  0CA0               	rrf	___ftpack@arg,f
  3065  0683  0B89               	decfsz	9,f
  3066  0684  2E80               	goto	u1115
  3067  0685                     l593:	
  3068  0685  30FF               	movlw	255
  3069  0686  0522               	andwf	___ftpack@arg+2,w
  3070  0687  1903               	btfsc	3,2
  3071  0688  2E96               	goto	l1394
  3072  0689  2E71               	goto	l1386
  3073  068A                     l1396:	
  3074  068A  3002               	movlw	2
  3075  068B  0223               	subwf	___ftpack@exp,w
  3076  068C  1C03               	btfss	3,0
  3077  068D  2E98               	goto	l600
  3078  068E  3001               	movlw	1
  3079  068F  02A3               	subwf	___ftpack@exp,f
  3080  0690  3001               	movlw	1
  3081  0691                     u1135:	
  3082  0691  35A0               	lslf	___ftpack@arg,f
  3083  0692  0DA1               	rlf	___ftpack@arg+1,f
  3084  0693  0DA2               	rlf	___ftpack@arg+2,f
  3085  0694  0B89               	decfsz	9,f
  3086  0695  2E91               	goto	u1135
  3087  0696                     l1394:	
  3088  0696  1FA1               	btfss	___ftpack@arg+1,7
  3089  0697  2E8A               	goto	l1396
  3090  0698                     l600:	
  3091  0698  1823               	btfsc	___ftpack@exp,0
  3092  0699  2EA0               	goto	l601
  3093  069A  30FF               	movlw	255
  3094  069B  05A0               	andwf	___ftpack@arg,f
  3095  069C  307F               	movlw	127
  3096  069D  05A1               	andwf	___ftpack@arg+1,f
  3097  069E  30FF               	movlw	255
  3098  069F  05A2               	andwf	___ftpack@arg+2,f
  3099  06A0                     l601:	
  3100  06A0  1003               	clrc
  3101  06A1  0CA3               	rrf	___ftpack@exp,f
  3102  06A2  0823               	movf	___ftpack@exp,w
  3103  06A3  00A5               	movwf	??___ftpack
  3104  06A4  01A6               	clrf	??___ftpack+1
  3105  06A5  01A7               	clrf	??___ftpack+2
  3106  06A6  3010               	movlw	16
  3107  06A7                     u1175:	
  3108  06A7  35A5               	lslf	??___ftpack,f
  3109  06A8  0DA6               	rlf	??___ftpack+1,f
  3110  06A9  0DA7               	rlf	??___ftpack+2,f
  3111  06AA  0B89               	decfsz	9,f
  3112  06AB  2EA7               	goto	u1175
  3113  06AC  0825               	movf	??___ftpack,w
  3114  06AD  04A0               	iorwf	___ftpack@arg,f
  3115  06AE  0826               	movf	??___ftpack+1,w
  3116  06AF  04A1               	iorwf	___ftpack@arg+1,f
  3117  06B0  0827               	movf	??___ftpack+2,w
  3118  06B1  04A2               	iorwf	___ftpack@arg+2,f
  3119  06B2  0824               	movf	___ftpack@sign,w
  3120  06B3  1903               	btfsc	3,2
  3121  06B4  0008               	return
  3122  06B5  17A2               	bsf	___ftpack@arg+2,7
  3123  06B6  0008               	return
  3124  06B7                     __end_of___ftpack:	
  3125                           
  3126                           	psect	text10
  3127  032B                     __ptext10:	
  3128 ;; *************** function _ReceiveTargetAngle *****************
  3129 ;; Defined at:
  3130 ;;		line 55 in file "main.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  Servo           1    wreg     PTR struct .
  3133 ;;		 -> main@Servo(20), 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  Servo           1   27[BANK0 ] PTR struct .
  3136 ;;		 -> main@Servo(20), 
  3137 ;;  angle_buf       8   15[BANK0 ] unsigned int [4]
  3138 ;;  rx              4   23[BANK0 ] unsigned char [4]
  3139 ;;  i               2   28[BANK0 ] int 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 1F/1
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3149 ;;      Params:         0       0       0       0
  3150 ;;      Locals:         0      15       0       0
  3151 ;;      Temps:          0      11       0       0
  3152 ;;      Totals:         0      26       0       0
  3153 ;;Total ram usage:       26 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    4
  3156 ;; This function calls:
  3157 ;;		___bmul
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _ReceiveTargetAngle
  3165  032B                     _ReceiveTargetAngle:	
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _ReceiveTargetAngle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3169                           ;ReceiveTargetAngle@Servo stored from wreg
  3170  032B  0020               	movlb	0	; select bank0
  3171  032C  00BB               	movwf	ReceiveTargetAngle@Servo
  3172                           
  3173                           ;main.c: 57: static uint16_t pre_angle[4];;main.c: 58: bool rx[4] = {0, 0, 0, 0};
  3174  032D  3000               	movlw	0
  3175  032E  00BA               	movwf	ReceiveTargetAngle@rx+3
  3176  032F  3000               	movlw	0
  3177  0330  00B9               	movwf	ReceiveTargetAngle@rx+2
  3178  0331  3000               	movlw	0
  3179  0332  00B8               	movwf	ReceiveTargetAngle@rx+1
  3180  0333  3000               	movlw	0
  3181  0334  00B7               	movwf	ReceiveTargetAngle@rx
  3182  0335                     l1736:	
  3183                           ;main.c: 59: uint16_t angle_buf[4];;main.c: 61: while (!(rx[0] & rx[1] & rx[2] & rx[3]))
  3184                           
  3185  0335  0020               	movlb	0	; select bank0
  3186  0336  0838               	movf	ReceiveTargetAngle@rx+1,w
  3187  0337  0539               	andwf	ReceiveTargetAngle@rx+2,w
  3188  0338  053A               	andwf	ReceiveTargetAngle@rx+3,w
  3189  0339  0537               	andwf	ReceiveTargetAngle@rx,w
  3190  033A  1D03               	btfss	3,2
  3191  033B  2BA6               	goto	l1738
  3192                           
  3193                           ;main.c: 62: {;main.c: 63: if (((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (PORTCbits
      +                          .RC0)) > 0)
  3194  033C  080E               	movf	14,w	;volatile
  3195  033D  3901               	andlw	1
  3196  033E  00A4               	movwf	??_ReceiveTargetAngle
  3197  033F  01A5               	clrf	??_ReceiveTargetAngle+1
  3198  0340  0C0E               	rrf	14,w	;volatile
  3199  0341  3901               	andlw	1
  3200  0342  00A6               	movwf	??_ReceiveTargetAngle+2
  3201  0343  01A7               	clrf	??_ReceiveTargetAngle+3
  3202  0344  35A6               	lslf	??_ReceiveTargetAngle+2,f
  3203  0345  0DA7               	rlf	??_ReceiveTargetAngle+3,f
  3204  0346  0C0E               	rrf	14,w	;volatile
  3205  0347  0C89               	rrf	9,f
  3206  0348  3901               	andlw	1
  3207  0349  00A8               	movwf	??_ReceiveTargetAngle+4
  3208  034A  01A9               	clrf	??_ReceiveTargetAngle+5
  3209  034B  35A8               	lslf	??_ReceiveTargetAngle+4,f
  3210  034C  0DA9               	rlf	??_ReceiveTargetAngle+5,f
  3211  034D  35A8               	lslf	??_ReceiveTargetAngle+4,f
  3212  034E  0DA9               	rlf	??_ReceiveTargetAngle+5,f
  3213  034F  0826               	movf	??_ReceiveTargetAngle+2,w
  3214  0350  0428               	iorwf	??_ReceiveTargetAngle+4,w
  3215  0351  00AA               	movwf	??_ReceiveTargetAngle+6
  3216  0352  0827               	movf	??_ReceiveTargetAngle+3,w
  3217  0353  0429               	iorwf	??_ReceiveTargetAngle+5,w
  3218  0354  00AB               	movwf	??_ReceiveTargetAngle+7
  3219  0355  0824               	movf	??_ReceiveTargetAngle,w
  3220  0356  042A               	iorwf	??_ReceiveTargetAngle+6,w
  3221  0357  00AC               	movwf	??_ReceiveTargetAngle+8
  3222  0358  0825               	movf	??_ReceiveTargetAngle+1,w
  3223  0359  042B               	iorwf	??_ReceiveTargetAngle+7,w
  3224  035A  00AD               	movwf	??_ReceiveTargetAngle+9
  3225  035B  082D               	movf	??_ReceiveTargetAngle+9,w
  3226  035C  3A80               	xorlw	128
  3227  035D  00AE               	movwf	??_ReceiveTargetAngle+10
  3228  035E  3080               	movlw	128
  3229  035F  022E               	subwf	??_ReceiveTargetAngle+10,w
  3230  0360  1D03               	skipz
  3231  0361  2B64               	goto	u1825
  3232  0362  3001               	movlw	1
  3233  0363  022C               	subwf	??_ReceiveTargetAngle+8,w
  3234  0364                     u1825:	
  3235  0364  1C03               	skipc
  3236  0365  2B35               	goto	l1736
  3237                           
  3238                           ;main.c: 64: {;main.c: 65: angle_buf[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (POR
      +                          TCbits.RC0)) - 1] = PORTA;
  3239  0366  0020               	movlb	0	; select bank0
  3240  0367  080C               	movf	12,w	;volatile
  3241  0368  00A4               	movwf	??_ReceiveTargetAngle
  3242  0369  01A5               	clrf	??_ReceiveTargetAngle+1
  3243  036A  080E               	movf	14,w	;volatile
  3244  036B  3901               	andlw	1
  3245  036C  00A6               	movwf	??_ReceiveTargetAngle+2
  3246  036D  0C0E               	rrf	14,w	;volatile
  3247  036E  3901               	andlw	1
  3248  036F  00A7               	movwf	??_ReceiveTargetAngle+3
  3249  0370  3001               	movlw	1
  3250  0371                     u1835:	
  3251  0371  35A7               	lslf	??_ReceiveTargetAngle+3,f
  3252  0372  0B89               	decfsz	9,f
  3253  0373  2B71               	goto	u1835
  3254  0374  0C0E               	rrf	14,w	;volatile
  3255  0375  0C89               	rrf	9,f
  3256  0376  3901               	andlw	1
  3257  0377  00A8               	movwf	??_ReceiveTargetAngle+4
  3258  0378  3001               	movlw	1
  3259  0379                     u1845:	
  3260  0379  35A8               	lslf	??_ReceiveTargetAngle+4,f
  3261  037A  3EFF               	addlw	-1
  3262  037B  1D03               	skipz
  3263  037C  2B79               	goto	u1845
  3264  037D  3528               	lslf	??_ReceiveTargetAngle+4,w
  3265  037E  0427               	iorwf	??_ReceiveTargetAngle+3,w
  3266  037F  0426               	iorwf	??_ReceiveTargetAngle+2,w
  3267  0380  0709               	addwf	9,w
  3268  0381  3EFE               	addlw	254
  3269  0382  3E2F               	addlw	(low (ReceiveTargetAngle@angle_buf| 0))& (0+255)
  3270  0383  0086               	movwf	6
  3271  0384  0187               	clrf	7
  3272  0385  0824               	movf	??_ReceiveTargetAngle,w
  3273  0386  3FC0               	movwi [0]fsr1
  3274  0387  0825               	movf	??_ReceiveTargetAngle+1,w
  3275  0388  3FC1               	movwi [1]fsr1
  3276                           
  3277                           ;main.c: 66: rx[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (PORTCbits.RC0)) - 1] = 1
      +                          ;
  3278  0389  080E               	movf	14,w	;volatile
  3279  038A  3901               	andlw	1
  3280  038B  00A4               	movwf	??_ReceiveTargetAngle
  3281  038C  0C0E               	rrf	14,w	;volatile
  3282  038D  3901               	andlw	1
  3283  038E  00A5               	movwf	??_ReceiveTargetAngle+1
  3284  038F  3001               	movlw	1
  3285  0390                     u1855:	
  3286  0390  35A5               	lslf	??_ReceiveTargetAngle+1,f
  3287  0391  0B89               	decfsz	9,f
  3288  0392  2B90               	goto	u1855
  3289  0393  0C0E               	rrf	14,w	;volatile
  3290  0394  0C89               	rrf	9,f
  3291  0395  3901               	andlw	1
  3292  0396  00A6               	movwf	??_ReceiveTargetAngle+2
  3293  0397  3001               	movlw	1
  3294  0398                     u1865:	
  3295  0398  35A6               	lslf	??_ReceiveTargetAngle+2,f
  3296  0399  3EFF               	addlw	-1
  3297  039A  1D03               	skipz
  3298  039B  2B98               	goto	u1865
  3299  039C  3526               	lslf	??_ReceiveTargetAngle+2,w
  3300  039D  0425               	iorwf	??_ReceiveTargetAngle+1,w
  3301  039E  0424               	iorwf	??_ReceiveTargetAngle,w
  3302  039F  3EFF               	addlw	255
  3303  03A0  3E37               	addlw	(low (ReceiveTargetAngle@rx| 0))& (0+255)
  3304  03A1  0086               	movwf	6
  3305  03A2  0187               	clrf	7
  3306  03A3  0181               	clrf	1
  3307  03A4  0A81               	incf	1,f
  3308  03A5  2B35               	goto	l1736
  3309  03A6                     l1738:	
  3310                           
  3311                           ;main.c: 67: };main.c: 68: };main.c: 70: int i;;main.c: 71: for (i = 0; i < 4; i++)
  3312  03A6  01BC               	clrf	ReceiveTargetAngle@i
  3313  03A7  01BD               	clrf	ReceiveTargetAngle@i+1
  3314  03A8                     l1744:	
  3315                           
  3316                           ;main.c: 72: {;main.c: 73: if (angle_buf[i] == pre_angle[i])
  3317  03A8  0020               	movlb	0	; select bank0
  3318  03A9  353C               	lslf	ReceiveTargetAngle@i,w
  3319  03AA  3EAA               	addlw	(low (ReceiveTargetAngle@pre_angle| 0))& (0+255)
  3320  03AB  0086               	movwf	6
  3321  03AC  0187               	clrf	7
  3322  03AD  3F40               	moviw [0]fsr1
  3323  03AE  00A4               	movwf	??_ReceiveTargetAngle
  3324  03AF  3F41               	moviw [1]fsr1
  3325  03B0  00A5               	movwf	??_ReceiveTargetAngle+1
  3326  03B1  353C               	lslf	ReceiveTargetAngle@i,w
  3327  03B2  3E2F               	addlw	(low (ReceiveTargetAngle@angle_buf| 0))& (0+255)
  3328  03B3  0086               	movwf	6
  3329  03B4  0187               	clrf	7
  3330  03B5  3F40               	moviw [0]fsr1
  3331  03B6  00A6               	movwf	??_ReceiveTargetAngle+2
  3332  03B7  3F41               	moviw [1]fsr1
  3333  03B8  00A7               	movwf	??_ReceiveTargetAngle+3
  3334  03B9  0825               	movf	??_ReceiveTargetAngle+1,w
  3335  03BA  0627               	xorwf	??_ReceiveTargetAngle+3,w
  3336  03BB  1D03               	skipz
  3337  03BC  2BBF               	goto	u1885
  3338  03BD  0824               	movf	??_ReceiveTargetAngle,w
  3339  03BE  0626               	xorwf	??_ReceiveTargetAngle+2,w
  3340  03BF                     u1885:	
  3341  03BF  1D03               	skipz
  3342  03C0  2BD6               	goto	l1748
  3343                           
  3344                           ;main.c: 74: {;main.c: 75: Servo[i].angle = angle_buf[i];
  3345  03C1  353C               	lslf	ReceiveTargetAngle@i,w
  3346  03C2  3E2F               	addlw	(low (ReceiveTargetAngle@angle_buf| 0))& (0+255)
  3347  03C3  0086               	movwf	6
  3348  03C4  0187               	clrf	7
  3349  03C5  3005               	movlw	5
  3350  03C6  00A4               	movwf	??_ReceiveTargetAngle
  3351  03C7  0824               	movf	??_ReceiveTargetAngle,w
  3352  03C8  00A0               	movwf	___bmul@multiplicand
  3353  03C9  083C               	movf	ReceiveTargetAngle@i,w
  3354  03CA  318F  2763  3183   	fcall	___bmul
  3355  03CD  073B               	addwf	ReceiveTargetAngle@Servo,w
  3356  03CE  00A5               	movwf	??_ReceiveTargetAngle+1
  3357  03CF  0825               	movf	??_ReceiveTargetAngle+1,w
  3358  03D0  0084               	movwf	4
  3359  03D1  0185               	clrf	5
  3360  03D2  3F40               	moviw [0]fsr1
  3361  03D3  3F80               	movwi [0]fsr0
  3362  03D4  3F41               	moviw [1]fsr1
  3363  03D5  3F81               	movwi [1]fsr0
  3364  03D6                     l1748:	
  3365                           
  3366                           ;main.c: 76: };main.c: 77: pre_angle[i] = angle_buf[i];
  3367  03D6  353C               	lslf	ReceiveTargetAngle@i,w
  3368  03D7  3E2F               	addlw	(low (ReceiveTargetAngle@angle_buf| 0))& (0+255)
  3369  03D8  0086               	movwf	6
  3370  03D9  0187               	clrf	7
  3371  03DA  353C               	lslf	ReceiveTargetAngle@i,w
  3372  03DB  3EAA               	addlw	(low (ReceiveTargetAngle@pre_angle| 0))& (0+255)
  3373  03DC  0084               	movwf	4
  3374  03DD  0185               	clrf	5
  3375  03DE  3F40               	moviw [0]fsr1
  3376  03DF  3F80               	movwi [0]fsr0
  3377  03E0  3F41               	moviw [1]fsr1
  3378  03E1  3F81               	movwi [1]fsr0
  3379  03E2  3001               	movlw	1
  3380  03E3  07BC               	addwf	ReceiveTargetAngle@i,f
  3381  03E4  3000               	movlw	0
  3382  03E5  3DBD               	addwfc	ReceiveTargetAngle@i+1,f
  3383  03E6  083D               	movf	ReceiveTargetAngle@i+1,w
  3384  03E7  3A80               	xorlw	128
  3385  03E8  00A4               	movwf	??_ReceiveTargetAngle
  3386  03E9  3080               	movlw	128
  3387  03EA  0224               	subwf	??_ReceiveTargetAngle,w
  3388  03EB  1D03               	skipz
  3389  03EC  2BEF               	goto	u1895
  3390  03ED  3004               	movlw	4
  3391  03EE  023C               	subwf	ReceiveTargetAngle@i,w
  3392  03EF                     u1895:	
  3393  03EF  1803               	btfsc	3,0
  3394  03F0  0008               	return
  3395  03F1  2BA8               	goto	l1744
  3396  03F2                     __end_of_ReceiveTargetAngle:	
  3397                           
  3398                           	psect	text11
  3399  070B                     __ptext11:	
  3400 ;; *************** function _Output *****************
  3401 ;; Defined at:
  3402 ;;		line 13 in file "ShareFunc.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  ch              1    wreg     unsigned char 
  3405 ;;  value           1    0[BANK0 ] unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  ch              1    2[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3412 ;; Tracked objects:
  3413 ;;		On entry : B1F/0
  3414 ;;		On exit  : B1D/0
  3415 ;;		Unchanged: B00/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3417 ;;      Params:         0       1       0       0
  3418 ;;      Locals:         0       1       0       0
  3419 ;;      Temps:          0       1       0       0
  3420 ;;      Totals:         0       3       0       0
  3421 ;;Total ram usage:        3 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _Output
  3433  070B                     _Output:	
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in _Output: [wreg-fsr0h+status,2+status,0+pclath]
  3437                           ;Output@ch stored from wreg
  3438  070B  00A2               	movwf	Output@ch
  3439                           
  3440                           ;ShareFunc.c: 15: if (ch & _CHs[0]) LATCbits.LATC3 = value;
  3441  070C  3000               	movlw	low (__CHs| (0+32768))
  3442  070D  0084               	movwf	4
  3443  070E  3088               	movlw	high (__CHs| (0+32768))
  3444  070F  0085               	movwf	5
  3445  0710  0800               	movf	0,w	;code access
  3446  0711  00A1               	movwf	??_Output
  3447  0712  0822               	movf	Output@ch,w
  3448  0713  0521               	andwf	??_Output,w
  3449  0714  1903               	btfsc	3,2
  3450  0715  2F1C               	goto	l1718
  3451  0716  0C20               	rrf	Output@value,w
  3452  0717  0022               	movlb	2	; select bank2
  3453  0718  1C03               	skipc
  3454  0719  118E               	bcf	14,3	;volatile
  3455  071A  1803               	skipnc
  3456  071B  158E               	bsf	14,3	;volatile
  3457  071C                     l1718:	
  3458                           
  3459                           ;ShareFunc.c: 16: if (ch & _CHs[1]) LATCbits.LATC6 = value;
  3460  071C  3001               	movlw	low ((__CHs+1)| (0+32768))
  3461  071D  0084               	movwf	4
  3462  071E  3088               	movlw	high ((__CHs+1)| (0+32768))
  3463  071F  0085               	movwf	5
  3464  0720  0800               	movf	0,w	;code access
  3465  0721  0020               	movlb	0	; select bank0
  3466  0722  0522               	andwf	Output@ch,w
  3467  0723  1903               	btfsc	3,2
  3468  0724  2F2B               	goto	l1722
  3469  0725  0C20               	rrf	Output@value,w
  3470  0726  0022               	movlb	2	; select bank2
  3471  0727  1C03               	skipc
  3472  0728  130E               	bcf	14,6	;volatile
  3473  0729  1803               	skipnc
  3474  072A  170E               	bsf	14,6	;volatile
  3475  072B                     l1722:	
  3476                           
  3477                           ;ShareFunc.c: 17: if (ch & _CHs[2]) LATCbits.LATC5 = value;
  3478  072B  3002               	movlw	low ((__CHs+2)| (0+32768))
  3479  072C  0084               	movwf	4
  3480  072D  3088               	movlw	high ((__CHs+2)| (0+32768))
  3481  072E  0085               	movwf	5
  3482  072F  0800               	movf	0,w	;code access
  3483  0730  0020               	movlb	0	; select bank0
  3484  0731  0522               	andwf	Output@ch,w
  3485  0732  1903               	btfsc	3,2
  3486  0733  2F3A               	goto	l1726
  3487  0734  0C20               	rrf	Output@value,w
  3488  0735  0022               	movlb	2	; select bank2
  3489  0736  1C03               	skipc
  3490  0737  128E               	bcf	14,5	;volatile
  3491  0738  1803               	skipnc
  3492  0739  168E               	bsf	14,5	;volatile
  3493  073A                     l1726:	
  3494                           
  3495                           ;ShareFunc.c: 18: if (ch & _CHs[3]) LATCbits.LATC4 = value;
  3496  073A  3003               	movlw	low ((__CHs+3)| (0+32768))
  3497  073B  0084               	movwf	4
  3498  073C  3088               	movlw	high ((__CHs+3)| (0+32768))
  3499  073D  0085               	movwf	5
  3500  073E  0800               	movf	0,w	;code access
  3501  073F  0020               	movlb	0	; select bank0
  3502  0740  0522               	andwf	Output@ch,w
  3503  0741  1903               	btfsc	3,2
  3504  0742  0008               	return
  3505  0743  0C20               	rrf	Output@value,w
  3506  0744  0022               	movlb	2	; select bank2
  3507  0745  1C03               	skipc
  3508  0746  120E               	bcf	14,4	;volatile
  3509  0747  1803               	skipnc
  3510  0748  160E               	bsf	14,4	;volatile
  3511  0749  0008               	return
  3512  074A                     __end_of_Output:	
  3513                           
  3514                           	psect	text12
  3515  0F2C                     __ptext12:	
  3516 ;; *************** function _Init *****************
  3517 ;; Defined at:
  3518 ;;		line 4 in file "Init.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : B1F/1
  3529 ;;		On exit  : B1F/0
  3530 ;;		Unchanged: B00/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3532 ;;      Params:         0       0       0       0
  3533 ;;      Locals:         0       0       0       0
  3534 ;;      Temps:          0       0       0       0
  3535 ;;      Totals:         0       0       0       0
  3536 ;;Total ram usage:        0 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    4
  3539 ;; This function calls:
  3540 ;;		_InitOsc
  3541 ;;		_InitPin
  3542 ;;		_InitTmr
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _Init
  3550  0F2C                     _Init:	
  3551                           
  3552                           ;Init.c: 6: InitOsc();
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _Init: [wreg+status,2+status,0+pclath+cstack]
  3556  0F2C  318F  2725  318F   	fcall	_InitOsc
  3557                           
  3558                           ;Init.c: 7: InitPin();
  3559  0F2F  318F  2752  318F   	fcall	_InitPin
  3560                           
  3561                           ;Init.c: 8: InitTmr();
  3562  0F32  318F  2737         	fcall	_InitTmr
  3563                           
  3564                           ;Init.c: 12: INTCONbits.GIE = 1;
  3565  0F34  178B               	bsf	11,7	;volatile
  3566                           
  3567                           ;Init.c: 13: INTCONbits.PEIE = 1;
  3568  0F35  170B               	bsf	11,6	;volatile
  3569  0F36  0008               	return
  3570  0F37                     __end_of_Init:	
  3571                           
  3572                           	psect	text13
  3573  0F37                     __ptext13:	
  3574 ;; *************** function _InitTmr *****************
  3575 ;; Defined at:
  3576 ;;		line 46 in file "Init.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : B1F/1
  3587 ;;		On exit  : B1F/0
  3588 ;;		Unchanged: B00/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3590 ;;      Params:         0       0       0       0
  3591 ;;      Locals:         0       0       0       0
  3592 ;;      Temps:          0       0       0       0
  3593 ;;      Totals:         0       0       0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    3
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_Init
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _InitTmr
  3606  0F37                     _InitTmr:	
  3607                           
  3608                           ;Init.c: 48: T1CONbits.TMR1CS = 0;
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in _InitTmr: [wreg+status,2+status,0]
  3612  0F37  303F               	movlw	-193
  3613  0F38  0020               	movlb	0	; select bank0
  3614  0F39  0598               	andwf	24,f	;volatile
  3615                           
  3616                           ;Init.c: 49: T1CONbits.T1CKPS = 0b00;
  3617  0F3A  30CF               	movlw	-49
  3618  0F3B  0598               	andwf	24,f	;volatile
  3619                           
  3620                           ;Init.c: 50: PIE1bits.TMR1IE = 1;
  3621  0F3C  0021               	movlb	1	; select bank1
  3622  0F3D  1411               	bsf	17,0	;volatile
  3623                           
  3624                           ;Init.c: 51: TMR1 = 0;
  3625  0F3E  0020               	movlb	0	; select bank0
  3626  0F3F  0196               	clrf	22	;volatile
  3627  0F40  0197               	clrf	23	;volatile
  3628                           
  3629                           ;Init.c: 52: TMR1ON = 1;
  3630  0F41  1418               	bsf	24,0	;volatile
  3631  0F42  0008               	return
  3632  0F43                     __end_of_InitTmr:	
  3633                           
  3634                           	psect	text14
  3635  0F52                     __ptext14:	
  3636 ;; *************** function _InitPin *****************
  3637 ;; Defined at:
  3638 ;;		line 22 in file "Init.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;		None
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2
  3647 ;; Tracked objects:
  3648 ;;		On entry : B1F/1
  3649 ;;		On exit  : B1F/1
  3650 ;;		Unchanged: B00/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3652 ;;      Params:         0       0       0       0
  3653 ;;      Locals:         0       0       0       0
  3654 ;;      Temps:          0       0       0       0
  3655 ;;      Totals:         0       0       0       0
  3656 ;;Total ram usage:        0 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    3
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_Init
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _InitPin
  3668  0F52                     _InitPin:	
  3669                           
  3670                           ;Init.c: 25: ANSELA = 0x00;
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _InitPin: [wreg+status,2]
  3674  0F52  0023               	movlb	3	; select bank3
  3675  0F53  018C               	clrf	12	;volatile
  3676                           
  3677                           ;Init.c: 26: ANSELB = 0x00;
  3678  0F54  018D               	clrf	13	;volatile
  3679                           
  3680                           ;Init.c: 28: TRISA = 0xFF;
  3681  0F55  30FF               	movlw	255
  3682  0F56  0021               	movlb	1	; select bank1
  3683  0F57  008C               	movwf	12	;volatile
  3684                           
  3685                           ;Init.c: 29: TRISB = 0xFF;
  3686  0F58  30FF               	movlw	255
  3687  0F59  008D               	movwf	13	;volatile
  3688                           
  3689                           ;Init.c: 32: TRISCbits.TRISC0 = 1;
  3690  0F5A  140E               	bsf	14,0	;volatile
  3691                           
  3692                           ;Init.c: 33: TRISCbits.TRISC1 = 1;
  3693  0F5B  148E               	bsf	14,1	;volatile
  3694                           
  3695                           ;Init.c: 34: TRISCbits.TRISC2 = 1;
  3696  0F5C  150E               	bsf	14,2	;volatile
  3697                           
  3698                           ;Init.c: 37: TRISCbits.TRISC3 = 0;
  3699  0F5D  118E               	bcf	14,3	;volatile
  3700                           
  3701                           ;Init.c: 38: TRISCbits.TRISC4 = 0;
  3702  0F5E  120E               	bcf	14,4	;volatile
  3703                           
  3704                           ;Init.c: 39: TRISCbits.TRISC5 = 0;
  3705  0F5F  128E               	bcf	14,5	;volatile
  3706                           
  3707                           ;Init.c: 40: TRISCbits.TRISC6 = 0;
  3708  0F60  130E               	bcf	14,6	;volatile
  3709                           
  3710                           ;Init.c: 43: TRISCbits.TRISC7 = 0;
  3711  0F61  138E               	bcf	14,7	;volatile
  3712  0F62  0008               	return
  3713  0F63                     __end_of_InitPin:	
  3714                           
  3715                           	psect	text15
  3716  0F25                     __ptext15:	
  3717 ;; *************** function _InitOsc *****************
  3718 ;; Defined at:
  3719 ;;		line 16 in file "Init.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0
  3728 ;; Tracked objects:
  3729 ;;		On entry : B1F/1
  3730 ;;		On exit  : B1F/1
  3731 ;;		Unchanged: B00/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3733 ;;      Params:         0       0       0       0
  3734 ;;      Locals:         0       0       0       0
  3735 ;;      Temps:          0       0       0       0
  3736 ;;      Totals:         0       0       0       0
  3737 ;;Total ram usage:        0 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    3
  3740 ;; This function calls:
  3741 ;;		Nothing
  3742 ;; This function is called by:
  3743 ;;		_Init
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function _InitOsc
  3749  0F25                     _InitOsc:	
  3750                           
  3751                           ;Init.c: 18: OSCCONbits.IRCF = 0b1110;
  3752                           
  3753                           ;incstack = 0
  3754                           ; Regs used in _InitOsc: [wreg+status,2+status,0]
  3755  0F25  0819               	movf	25,w	;volatile
  3756  0F26  3987               	andlw	-121
  3757  0F27  3870               	iorlw	112
  3758  0F28  0099               	movwf	25	;volatile
  3759                           
  3760                           ;Init.c: 19: OSCCONbits.SCS = 0b11;
  3761  0F29  3003               	movlw	3
  3762  0F2A  0499               	iorwf	25,f	;volatile
  3763  0F2B  0008               	return
  3764  0F2C                     __end_of_InitOsc:	
  3765                           
  3766                           	psect	text16
  3767  005C                     __ptext16:	
  3768 ;; *************** function _CalcNextCnt *****************
  3769 ;; Defined at:
  3770 ;;		line 117 in file "main.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  Servo           1    wreg     PTR struct .
  3773 ;;		 -> main@Servo(20), 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  Servo           1   18[BANK0 ] PTR struct .
  3776 ;;		 -> main@Servo(20), 
  3777 ;;  Tmp            20   19[BANK0 ] struct .[4]
  3778 ;;  i               2   41[BANK0 ] int 
  3779 ;;  j               2   39[BANK0 ] int 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/1
  3786 ;;		On exit  : 1F/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3789 ;;      Params:         0       0       0       0
  3790 ;;      Locals:         0      25       0       0
  3791 ;;      Temps:          0       6       0       0
  3792 ;;      Totals:         0      31       0       0
  3793 ;;Total ram usage:       31 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    4
  3796 ;; This function calls:
  3797 ;;		_CalcTMRCnt
  3798 ;;		_Swap
  3799 ;;		___bmul
  3800 ;; This function is called by:
  3801 ;;		_main
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _CalcNextCnt
  3807  005C                     _CalcNextCnt:	
  3808                           
  3809                           ;incstack = 0
  3810                           ; Regs used in _CalcNextCnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3811                           ;CalcNextCnt@Servo stored from wreg
  3812  005C  0020               	movlb	0	; select bank0
  3813  005D  00B2               	movwf	CalcNextCnt@Servo
  3814                           
  3815                           ;main.c: 119: int i, j;;main.c: 122: SERVO Tmp[4];;main.c: 123: for (i = 0; i < 4; i++)
  3816  005E  01C9               	clrf	CalcNextCnt@i
  3817  005F  01CA               	clrf	CalcNextCnt@i+1
  3818  0060                     l1790:	
  3819                           
  3820                           ;main.c: 124: {;main.c: 125: Tmp[i] = Servo[i];
  3821  0060  3005               	movlw	5
  3822  0061  0020               	movlb	0	; select bank0
  3823  0062  00AC               	movwf	??_CalcNextCnt
  3824  0063  082C               	movf	??_CalcNextCnt,w
  3825  0064  00A0               	movwf	___bmul@multiplicand
  3826  0065  0849               	movf	CalcNextCnt@i,w
  3827  0066  318F  2763  3180   	fcall	___bmul
  3828  0069  0732               	addwf	CalcNextCnt@Servo,w
  3829  006A  00AD               	movwf	??_CalcNextCnt+1
  3830  006B  082D               	movf	??_CalcNextCnt+1,w
  3831  006C  0086               	movwf	6
  3832  006D  0187               	clrf	7
  3833  006E  3005               	movlw	5
  3834  006F  00AE               	movwf	??_CalcNextCnt+2
  3835  0070  082E               	movf	??_CalcNextCnt+2,w
  3836  0071  00A0               	movwf	___bmul@multiplicand
  3837  0072  0849               	movf	CalcNextCnt@i,w
  3838  0073  318F  2763  3180   	fcall	___bmul
  3839  0076  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3840  0077  0084               	movwf	4
  3841  0078  0185               	clrf	5
  3842  0079  3005               	movlw	5
  3843  007A  00AF               	movwf	??_CalcNextCnt+3
  3844  007B                     u1970:	
  3845  007B  0016               	moviw fsr1++
  3846  007C  001A               	movwi fsr0++
  3847  007D  0BAF               	decfsz	??_CalcNextCnt+3,f
  3848  007E  287B               	goto	u1970
  3849  007F  3001               	movlw	1
  3850  0080  07C9               	addwf	CalcNextCnt@i,f
  3851  0081  3000               	movlw	0
  3852  0082  3DCA               	addwfc	CalcNextCnt@i+1,f
  3853  0083  084A               	movf	CalcNextCnt@i+1,w
  3854  0084  3A80               	xorlw	128
  3855  0085  00AC               	movwf	??_CalcNextCnt
  3856  0086  3080               	movlw	128
  3857  0087  022C               	subwf	??_CalcNextCnt,w
  3858  0088  1D03               	skipz
  3859  0089  288C               	goto	u1985
  3860  008A  3004               	movlw	4
  3861  008B  0249               	subwf	CalcNextCnt@i,w
  3862  008C                     u1985:	
  3863  008C  1C03               	skipc
  3864  008D  2860               	goto	l1790
  3865                           
  3866                           ;main.c: 126: };main.c: 129: for (i = 0; i < 4; i++)
  3867  008E  0020               	movlb	0	; select bank0
  3868  008F  01C9               	clrf	CalcNextCnt@i
  3869  0090  01CA               	clrf	CalcNextCnt@i+1
  3870  0091                     l1802:	
  3871                           
  3872                           ;main.c: 130: {;main.c: 131: for (j = i + 1; j < 4; j++)
  3873  0091  0020               	movlb	0	; select bank0
  3874  0092  0849               	movf	CalcNextCnt@i,w
  3875  0093  3E01               	addlw	1
  3876  0094  00C7               	movwf	CalcNextCnt@j
  3877  0095  3000               	movlw	0
  3878  0096  3D4A               	addwfc	CalcNextCnt@i+1,w
  3879  0097  00C8               	movwf	CalcNextCnt@j+1
  3880  0098                     l1804:	
  3881  0098  0848               	movf	CalcNextCnt@j+1,w
  3882  0099  3A80               	xorlw	128
  3883  009A  00AC               	movwf	??_CalcNextCnt
  3884  009B  3080               	movlw	128
  3885  009C  022C               	subwf	??_CalcNextCnt,w
  3886  009D  1D03               	skipz
  3887  009E  28A1               	goto	u1995
  3888  009F  3004               	movlw	4
  3889  00A0  0247               	subwf	CalcNextCnt@j,w
  3890  00A1                     u1995:	
  3891  00A1  1803               	btfsc	3,0
  3892  00A2  2915               	goto	l1820
  3893                           
  3894                           ;main.c: 132: {;main.c: 133: if (Tmp[i].width == Tmp[j].width && Tmp[j].width != 65535)
  3895  00A3  3005               	movlw	5
  3896  00A4  0020               	movlb	0	; select bank0
  3897  00A5  00AC               	movwf	??_CalcNextCnt
  3898  00A6  082C               	movf	??_CalcNextCnt,w
  3899  00A7  00A0               	movwf	___bmul@multiplicand
  3900  00A8  0847               	movf	CalcNextCnt@j,w
  3901  00A9  318F  2763  3180   	fcall	___bmul
  3902  00AC  3E02               	addlw	2
  3903  00AD  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3904  00AE  0086               	movwf	6
  3905  00AF  0187               	clrf	7
  3906  00B0  3F40               	moviw [0]fsr1
  3907  00B1  00AD               	movwf	??_CalcNextCnt+1
  3908  00B2  3F41               	moviw [1]fsr1
  3909  00B3  00AE               	movwf	??_CalcNextCnt+2
  3910  00B4  3005               	movlw	5
  3911  00B5  00AF               	movwf	??_CalcNextCnt+3
  3912  00B6  082F               	movf	??_CalcNextCnt+3,w
  3913  00B7  00A0               	movwf	___bmul@multiplicand
  3914  00B8  0849               	movf	CalcNextCnt@i,w
  3915  00B9  318F  2763  3180   	fcall	___bmul
  3916  00BC  3E02               	addlw	2
  3917  00BD  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3918  00BE  0086               	movwf	6
  3919  00BF  0187               	clrf	7
  3920  00C0  3F40               	moviw [0]fsr1
  3921  00C1  00B0               	movwf	??_CalcNextCnt+4
  3922  00C2  3F41               	moviw [1]fsr1
  3923  00C3  00B1               	movwf	??_CalcNextCnt+5
  3924  00C4  082E               	movf	??_CalcNextCnt+2,w
  3925  00C5  0631               	xorwf	??_CalcNextCnt+5,w
  3926  00C6  1D03               	skipz
  3927  00C7  28CA               	goto	u2005
  3928  00C8  082D               	movf	??_CalcNextCnt+1,w
  3929  00C9  0630               	xorwf	??_CalcNextCnt+4,w
  3930  00CA                     u2005:	
  3931  00CA  1D03               	skipz
  3932  00CB  2910               	goto	l1816
  3933  00CC  3005               	movlw	5
  3934  00CD  00AC               	movwf	??_CalcNextCnt
  3935  00CE  082C               	movf	??_CalcNextCnt,w
  3936  00CF  00A0               	movwf	___bmul@multiplicand
  3937  00D0  0847               	movf	CalcNextCnt@j,w
  3938  00D1  318F  2763  3180   	fcall	___bmul
  3939  00D4  3E02               	addlw	2
  3940  00D5  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3941  00D6  0086               	movwf	6
  3942  00D7  0187               	clrf	7
  3943  00D8  0016               	moviw fsr1++
  3944  00D9  3AFF               	xorlw	255
  3945  00DA  00AD               	movwf	??_CalcNextCnt+1
  3946  00DB  0016               	moviw fsr1++
  3947  00DC  3AFF               	xorlw	255
  3948  00DD  04AD               	iorwf	??_CalcNextCnt+1,f
  3949  00DE  1903               	btfsc	3,2
  3950  00DF  2910               	goto	l1816
  3951                           
  3952                           ;main.c: 134: {;main.c: 135: Tmp[j].width = 65535;
  3953  00E0  3005               	movlw	5
  3954  00E1  00AC               	movwf	??_CalcNextCnt
  3955  00E2  082C               	movf	??_CalcNextCnt,w
  3956  00E3  00A0               	movwf	___bmul@multiplicand
  3957  00E4  0847               	movf	CalcNextCnt@j,w
  3958  00E5  318F  2763  3180   	fcall	___bmul
  3959  00E8  3E02               	addlw	2
  3960  00E9  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3961  00EA  0086               	movwf	6
  3962  00EB  0187               	clrf	7
  3963  00EC  30FF               	movlw	255
  3964  00ED  3FC0               	movwi [0]fsr1
  3965  00EE  30FF               	movlw	255
  3966  00EF  3FC1               	movwi [1]fsr1
  3967                           
  3968                           ;main.c: 136: Tmp[i].ch |= Tmp[j].ch;
  3969  00F0  3005               	movlw	5
  3970  00F1  00AC               	movwf	??_CalcNextCnt
  3971  00F2  082C               	movf	??_CalcNextCnt,w
  3972  00F3  00A0               	movwf	___bmul@multiplicand
  3973  00F4  0847               	movf	CalcNextCnt@j,w
  3974  00F5  318F  2763  3180   	fcall	___bmul
  3975  00F8  3E04               	addlw	4
  3976  00F9  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3977  00FA  0086               	movwf	6
  3978  00FB  0187               	clrf	7
  3979  00FC  0801               	movf	1,w
  3980  00FD  00AD               	movwf	??_CalcNextCnt+1
  3981  00FE  3005               	movlw	5
  3982  00FF  00AE               	movwf	??_CalcNextCnt+2
  3983  0100  082E               	movf	??_CalcNextCnt+2,w
  3984  0101  00A0               	movwf	___bmul@multiplicand
  3985  0102  0849               	movf	CalcNextCnt@i,w
  3986  0103  318F  2763  3180   	fcall	___bmul
  3987  0106  3E04               	addlw	4
  3988  0107  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  3989  0108  0086               	movwf	6
  3990  0109  0187               	clrf	7
  3991  010A  082D               	movf	??_CalcNextCnt+1,w
  3992  010B  0481               	iorwf	1,f
  3993                           
  3994                           ;main.c: 137: _IntNum--;
  3995  010C  30FF               	movlw	255
  3996  010D  07F8               	addwf	__IntNum,f
  3997  010E  30FF               	movlw	255
  3998  010F  3DF9               	addwfc	__IntNum+1,f
  3999  0110                     l1816:	
  4000  0110  3001               	movlw	1
  4001  0111  07C7               	addwf	CalcNextCnt@j,f
  4002  0112  3000               	movlw	0
  4003  0113  3DC8               	addwfc	CalcNextCnt@j+1,f
  4004  0114  2898               	goto	l1804
  4005  0115                     l1820:	
  4006  0115  3001               	movlw	1
  4007  0116  0020               	movlb	0	; select bank0
  4008  0117  07C9               	addwf	CalcNextCnt@i,f
  4009  0118  3000               	movlw	0
  4010  0119  3DCA               	addwfc	CalcNextCnt@i+1,f
  4011  011A  084A               	movf	CalcNextCnt@i+1,w
  4012  011B  3A80               	xorlw	128
  4013  011C  00AC               	movwf	??_CalcNextCnt
  4014  011D  3080               	movlw	128
  4015  011E  022C               	subwf	??_CalcNextCnt,w
  4016  011F  1D03               	skipz
  4017  0120  2923               	goto	u2025
  4018  0121  3004               	movlw	4
  4019  0122  0249               	subwf	CalcNextCnt@i,w
  4020  0123                     u2025:	
  4021  0123  1C03               	skipc
  4022  0124  2891               	goto	l1802
  4023                           
  4024                           ;main.c: 138: };main.c: 139: };main.c: 140: };main.c: 143: for (i = 0; i < 4; i++)
  4025  0125  0020               	movlb	0	; select bank0
  4026  0126  01C9               	clrf	CalcNextCnt@i
  4027  0127  01CA               	clrf	CalcNextCnt@i+1
  4028  0128                     l1828:	
  4029                           
  4030                           ;main.c: 144: {;main.c: 145: for (j = i; j < 4; j++)
  4031  0128  0020               	movlb	0	; select bank0
  4032  0129  084A               	movf	CalcNextCnt@i+1,w
  4033  012A  00C8               	movwf	CalcNextCnt@j+1
  4034  012B  0849               	movf	CalcNextCnt@i,w
  4035  012C  00C7               	movwf	CalcNextCnt@j
  4036  012D  0848               	movf	CalcNextCnt@j+1,w
  4037  012E  3A80               	xorlw	128
  4038  012F  00AC               	movwf	??_CalcNextCnt
  4039  0130  3080               	movlw	128
  4040  0131  022C               	subwf	??_CalcNextCnt,w
  4041  0132  1D03               	skipz
  4042  0133  2936               	goto	u2035
  4043  0134  3004               	movlw	4
  4044  0135  0247               	subwf	CalcNextCnt@j,w
  4045  0136                     u2035:	
  4046  0136  1803               	btfsc	3,0
  4047  0137  2988               	goto	l1840
  4048  0138                     l1832:	
  4049                           
  4050                           ;main.c: 146: {;main.c: 147: if (Tmp[i].width > Tmp[j].width)
  4051  0138  3005               	movlw	5
  4052  0139  0020               	movlb	0	; select bank0
  4053  013A  00AC               	movwf	??_CalcNextCnt
  4054  013B  082C               	movf	??_CalcNextCnt,w
  4055  013C  00A0               	movwf	___bmul@multiplicand
  4056  013D  0849               	movf	CalcNextCnt@i,w
  4057  013E  318F  2763  3180   	fcall	___bmul
  4058  0141  3E02               	addlw	2
  4059  0142  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4060  0143  0086               	movwf	6
  4061  0144  0187               	clrf	7
  4062  0145  3F40               	moviw [0]fsr1
  4063  0146  00AD               	movwf	??_CalcNextCnt+1
  4064  0147  3F41               	moviw [1]fsr1
  4065  0148  00AE               	movwf	??_CalcNextCnt+2
  4066  0149  3005               	movlw	5
  4067  014A  00AF               	movwf	??_CalcNextCnt+3
  4068  014B  082F               	movf	??_CalcNextCnt+3,w
  4069  014C  00A0               	movwf	___bmul@multiplicand
  4070  014D  0847               	movf	CalcNextCnt@j,w
  4071  014E  318F  2763  3180   	fcall	___bmul
  4072  0151  3E02               	addlw	2
  4073  0152  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4074  0153  0086               	movwf	6
  4075  0154  0187               	clrf	7
  4076  0155  3F40               	moviw [0]fsr1
  4077  0156  00B0               	movwf	??_CalcNextCnt+4
  4078  0157  3F41               	moviw [1]fsr1
  4079  0158  00B1               	movwf	??_CalcNextCnt+5
  4080  0159  082E               	movf	??_CalcNextCnt+2,w
  4081  015A  0231               	subwf	??_CalcNextCnt+5,w
  4082  015B  1D03               	skipz
  4083  015C  295F               	goto	u2045
  4084  015D  082D               	movf	??_CalcNextCnt+1,w
  4085  015E  0230               	subwf	??_CalcNextCnt+4,w
  4086  015F                     u2045:	
  4087  015F  1803               	skipnc
  4088  0160  2979               	goto	l1836
  4089                           
  4090                           ;main.c: 148: {;main.c: 149: Swap(&Tmp[i], &Tmp[j]);
  4091  0161  3005               	movlw	5
  4092  0162  00AC               	movwf	??_CalcNextCnt
  4093  0163  082C               	movf	??_CalcNextCnt,w
  4094  0164  00A0               	movwf	___bmul@multiplicand
  4095  0165  0847               	movf	CalcNextCnt@j,w
  4096  0166  318F  2763  3180   	fcall	___bmul
  4097  0169  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4098  016A  00AD               	movwf	??_CalcNextCnt+1
  4099  016B  082D               	movf	??_CalcNextCnt+1,w
  4100  016C  00A4               	movwf	Swap@b
  4101  016D  3005               	movlw	5
  4102  016E  00AE               	movwf	??_CalcNextCnt+2
  4103  016F  082E               	movf	??_CalcNextCnt+2,w
  4104  0170  00A0               	movwf	___bmul@multiplicand
  4105  0171  0849               	movf	CalcNextCnt@i,w
  4106  0172  318F  2763  3180   	fcall	___bmul
  4107  0175  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4108  0176  318F  27D8  3180   	fcall	_Swap
  4109  0179                     l1836:	
  4110  0179  3001               	movlw	1
  4111  017A  07C7               	addwf	CalcNextCnt@j,f
  4112  017B  3000               	movlw	0
  4113  017C  3DC8               	addwfc	CalcNextCnt@j+1,f
  4114  017D  0848               	movf	CalcNextCnt@j+1,w
  4115  017E  3A80               	xorlw	128
  4116  017F  00AC               	movwf	??_CalcNextCnt
  4117  0180  3080               	movlw	128
  4118  0181  022C               	subwf	??_CalcNextCnt,w
  4119  0182  1D03               	skipz
  4120  0183  2986               	goto	u2055
  4121  0184  3004               	movlw	4
  4122  0185  0247               	subwf	CalcNextCnt@j,w
  4123  0186                     u2055:	
  4124  0186  1C03               	skipc
  4125  0187  2938               	goto	l1832
  4126  0188                     l1840:	
  4127  0188  3001               	movlw	1
  4128  0189  0020               	movlb	0	; select bank0
  4129  018A  07C9               	addwf	CalcNextCnt@i,f
  4130  018B  3000               	movlw	0
  4131  018C  3DCA               	addwfc	CalcNextCnt@i+1,f
  4132  018D  084A               	movf	CalcNextCnt@i+1,w
  4133  018E  3A80               	xorlw	128
  4134  018F  00AC               	movwf	??_CalcNextCnt
  4135  0190  3080               	movlw	128
  4136  0191  022C               	subwf	??_CalcNextCnt,w
  4137  0192  1D03               	skipz
  4138  0193  2996               	goto	u2065
  4139  0194  3004               	movlw	4
  4140  0195  0249               	subwf	CalcNextCnt@i,w
  4141  0196                     u2065:	
  4142  0196  1C03               	skipc
  4143  0197  2928               	goto	l1828
  4144                           
  4145                           ;main.c: 150: };main.c: 151: };main.c: 152: };main.c: 155: for (i = 0; i < 4; i++)
  4146  0198  0020               	movlb	0	; select bank0
  4147  0199  01C9               	clrf	CalcNextCnt@i
  4148  019A  01CA               	clrf	CalcNextCnt@i+1
  4149  019B                     l1848:	
  4150                           
  4151                           ;main.c: 156: {;main.c: 157: _CHq[i] = Tmp[i].ch;
  4152  019B  3005               	movlw	5
  4153  019C  0020               	movlb	0	; select bank0
  4154  019D  00AC               	movwf	??_CalcNextCnt
  4155  019E  082C               	movf	??_CalcNextCnt,w
  4156  019F  00A0               	movwf	___bmul@multiplicand
  4157  01A0  0849               	movf	CalcNextCnt@i,w
  4158  01A1  318F  2763  3180   	fcall	___bmul
  4159  01A4  3E04               	addlw	4
  4160  01A5  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4161  01A6  0086               	movwf	6
  4162  01A7  0187               	clrf	7
  4163  01A8  0801               	movf	1,w
  4164  01A9  00AD               	movwf	??_CalcNextCnt+1
  4165  01AA  0849               	movf	CalcNextCnt@i,w
  4166  01AB  3EBB               	addlw	(low (__CHq| 0))& (0+255)
  4167  01AC  0086               	movwf	6
  4168  01AD  0187               	clrf	7
  4169  01AE  082D               	movf	??_CalcNextCnt+1,w
  4170  01AF  0081               	movwf	1
  4171  01B0  3001               	movlw	1
  4172  01B1  07C9               	addwf	CalcNextCnt@i,f
  4173  01B2  3000               	movlw	0
  4174  01B3  3DCA               	addwfc	CalcNextCnt@i+1,f
  4175  01B4  084A               	movf	CalcNextCnt@i+1,w
  4176  01B5  3A80               	xorlw	128
  4177  01B6  00AC               	movwf	??_CalcNextCnt
  4178  01B7  3080               	movlw	128
  4179  01B8  022C               	subwf	??_CalcNextCnt,w
  4180  01B9  1D03               	skipz
  4181  01BA  29BD               	goto	u2075
  4182  01BB  3004               	movlw	4
  4183  01BC  0249               	subwf	CalcNextCnt@i,w
  4184  01BD                     u2075:	
  4185  01BD  1C03               	skipc
  4186  01BE  299B               	goto	l1848
  4187                           
  4188                           ;main.c: 158: };main.c: 161: _TMRCnt[0] = CalcTMRCnt(Tmp[0].width);
  4189  01BF  0020               	movlb	0	; select bank0
  4190  01C0  0836               	movf	CalcNextCnt@Tmp+3,w
  4191  01C1  00A5               	movwf	CalcTMRCnt@pulse_width+1
  4192  01C2  0835               	movf	CalcNextCnt@Tmp+2,w
  4193  01C3  00A4               	movwf	CalcTMRCnt@pulse_width
  4194  01C4  318F  2743  3180   	fcall	_CalcTMRCnt
  4195  01C7  0825               	movf	?_CalcTMRCnt+1,w
  4196  01C8  0021               	movlb	1	; select bank1
  4197  01C9  00A1               	movwf	(__TMRCnt+1)^(0+128)
  4198  01CA  0020               	movlb	0	; select bank0
  4199  01CB  0824               	movf	?_CalcTMRCnt,w
  4200  01CC  0021               	movlb	1	; select bank1
  4201  01CD  00A0               	movwf	__TMRCnt^(0+128)
  4202                           
  4203                           ;main.c: 162: for (i = 1; i < _IntNum - 1; i++)
  4204  01CE  3001               	movlw	1
  4205  01CF  0020               	movlb	0	; select bank0
  4206  01D0  00C9               	movwf	CalcNextCnt@i
  4207  01D1  3000               	movlw	0
  4208  01D2  00CA               	movwf	CalcNextCnt@i+1
  4209  01D3                     l1862:	
  4210  01D3  0878               	movf	__IntNum,w
  4211  01D4  3EFF               	addlw	255
  4212  01D5  00AC               	movwf	??_CalcNextCnt
  4213  01D6  30FF               	movlw	255
  4214  01D7  3D79               	addwfc	__IntNum+1,w
  4215  01D8  00AD               	movwf	??_CalcNextCnt+1
  4216  01D9  084A               	movf	CalcNextCnt@i+1,w
  4217  01DA  3A80               	xorlw	128
  4218  01DB  00AE               	movwf	??_CalcNextCnt+2
  4219  01DC  082D               	movf	??_CalcNextCnt+1,w
  4220  01DD  3A80               	xorlw	128
  4221  01DE  022E               	subwf	??_CalcNextCnt+2,w
  4222  01DF  1D03               	skipz
  4223  01E0  29E3               	goto	u2085
  4224  01E1  082C               	movf	??_CalcNextCnt,w
  4225  01E2  0249               	subwf	CalcNextCnt@i,w
  4226  01E3                     u2085:	
  4227  01E3  1803               	btfsc	3,0
  4228  01E4  2A15               	goto	l1864
  4229                           
  4230                           ;main.c: 163: {;main.c: 164: _TMRCnt[i] = CalcTMRCnt(Tmp[i].width - Tmp[i - 1].width);
  4231  01E5  3005               	movlw	5
  4232  01E6  0020               	movlb	0	; select bank0
  4233  01E7  00AC               	movwf	??_CalcNextCnt
  4234  01E8  082C               	movf	??_CalcNextCnt,w
  4235  01E9  00A0               	movwf	___bmul@multiplicand
  4236  01EA  0849               	movf	CalcNextCnt@i,w
  4237  01EB  318F  2763  3180   	fcall	___bmul
  4238  01EE  3EFD               	addlw	253
  4239  01EF  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4240  01F0  0086               	movwf	6
  4241  01F1  0187               	clrf	7
  4242  01F2  3005               	movlw	5
  4243  01F3  00AD               	movwf	??_CalcNextCnt+1
  4244  01F4  082D               	movf	??_CalcNextCnt+1,w
  4245  01F5  00A0               	movwf	___bmul@multiplicand
  4246  01F6  0849               	movf	CalcNextCnt@i,w
  4247  01F7  318F  2763  3180   	fcall	___bmul
  4248  01FA  3E02               	addlw	2
  4249  01FB  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4250  01FC  0084               	movwf	4
  4251  01FD  0185               	clrf	5
  4252  01FE  3F40               	moviw [0]fsr1
  4253  01FF  0200               	subwf	0,w
  4254  0200  00A4               	movwf	CalcTMRCnt@pulse_width
  4255  0201  3101               	addfsr 0,1
  4256  0202  3F41               	moviw [1]fsr1
  4257  0203  3B00               	subwfb	0,w
  4258  0204  00A5               	movwf	CalcTMRCnt@pulse_width+1
  4259  0205  318F  2743  3180   	fcall	_CalcTMRCnt
  4260  0208  3549               	lslf	CalcNextCnt@i,w
  4261  0209  3EA0               	addlw	(low (__TMRCnt| 0))& (0+255)
  4262  020A  0086               	movwf	6
  4263  020B  0187               	clrf	7
  4264  020C  0824               	movf	?_CalcTMRCnt,w
  4265  020D  3FC0               	movwi [0]fsr1
  4266  020E  0825               	movf	?_CalcTMRCnt+1,w
  4267  020F  3FC1               	movwi [1]fsr1
  4268  0210  3001               	movlw	1
  4269  0211  07C9               	addwf	CalcNextCnt@i,f
  4270  0212  3000               	movlw	0
  4271  0213  3DCA               	addwfc	CalcNextCnt@i+1,f
  4272  0214  29D3               	goto	l1862
  4273  0215                     l1864:	
  4274                           
  4275                           ;main.c: 165: };main.c: 166: _TMRCnt[_IntNum - 1] = CalcTMRCnt(20000 - Tmp[_IntNum - 2].
      +                          width);
  4276  0215  3005               	movlw	5
  4277  0216  0020               	movlb	0	; select bank0
  4278  0217  00AC               	movwf	??_CalcNextCnt
  4279  0218  082C               	movf	??_CalcNextCnt,w
  4280  0219  00A0               	movwf	___bmul@multiplicand
  4281  021A  0878               	movf	__IntNum,w
  4282  021B  318F  2763  3180   	fcall	___bmul
  4283  021E  3EF8               	addlw	248
  4284  021F  3E33               	addlw	(low (CalcNextCnt@Tmp| 0))& (0+255)
  4285  0220  0086               	movwf	6
  4286  0221  0187               	clrf	7
  4287  0222  3020               	movlw	32
  4288  0223  00AD               	movwf	??_CalcNextCnt+1
  4289  0224  304E               	movlw	78
  4290  0225  00AE               	movwf	??_CalcNextCnt+2
  4291  0226  3F40               	moviw [0]fsr1
  4292  0227  022D               	subwf	??_CalcNextCnt+1,w
  4293  0228  00A4               	movwf	CalcTMRCnt@pulse_width
  4294  0229  3F41               	moviw [1]fsr1
  4295  022A  3B2E               	subwfb	??_CalcNextCnt+2,w
  4296  022B  00A5               	movwf	CalcTMRCnt@pulse_width+1
  4297  022C  318F  2743         	fcall	_CalcTMRCnt
  4298  022E  3578               	lslf	__IntNum,w
  4299  022F  3E9E               	addlw	(low ((__TMRCnt| 0+254)))& (0+255)
  4300  0230  0086               	movwf	6
  4301  0231  0187               	clrf	7
  4302  0232  0824               	movf	?_CalcTMRCnt,w
  4303  0233  3FC0               	movwi [0]fsr1
  4304  0234  0825               	movf	?_CalcTMRCnt+1,w
  4305  0235  3FC1               	movwi [1]fsr1
  4306  0236  0008               	return
  4307  0237                     __end_of_CalcNextCnt:	
  4308                           
  4309                           	psect	text17
  4310  0F63                     __ptext17:	
  4311 ;; *************** function ___bmul *****************
  4312 ;; Defined at:
  4313 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  multiplier      1    wreg     unsigned char 
  4316 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4319 ;;  product         1    2[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      unsigned char 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0
  4324 ;; Tracked objects:
  4325 ;;		On entry : 1E/1
  4326 ;;		On exit  : 1F/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4329 ;;      Params:         0       1       0       0
  4330 ;;      Locals:         0       2       0       0
  4331 ;;      Temps:          0       1       0       0
  4332 ;;      Totals:         0       4       0       0
  4333 ;;Total ram usage:        4 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    3
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_ReceiveTargetAngle
  4340 ;;		_SetParameter
  4341 ;;		_CalcNextCnt
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function ___bmul
  4347  0F63                     ___bmul:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4351                           ;___bmul@multiplier stored from wreg
  4352  0F63  0020               	movlb	0	; select bank0
  4353  0F64  00A3               	movwf	___bmul@multiplier
  4354  0F65  01A2               	clrf	___bmul@product
  4355  0F66                     l1680:	
  4356  0F66  1C23               	btfss	___bmul@multiplier,0
  4357  0F67  2F6C               	goto	l1684
  4358  0F68  0820               	movf	___bmul@multiplicand,w
  4359  0F69  00A1               	movwf	??___bmul
  4360  0F6A  0821               	movf	??___bmul,w
  4361  0F6B  07A2               	addwf	___bmul@product,f
  4362  0F6C                     l1684:	
  4363  0F6C  1003               	clrc
  4364  0F6D  0DA0               	rlf	___bmul@multiplicand,f
  4365  0F6E  1003               	clrc
  4366  0F6F  0CA3               	rrf	___bmul@multiplier,f
  4367  0F70  0823               	movf	___bmul@multiplier,w
  4368  0F71  1D03               	btfss	3,2
  4369  0F72  2F66               	goto	l1680
  4370  0F73  0822               	movf	___bmul@product,w
  4371  0F74  0008               	return
  4372  0F75                     __end_of___bmul:	
  4373                           
  4374                           	psect	text18
  4375  0FD8                     __ptext18:	
  4376 ;; *************** function _Swap *****************
  4377 ;; Defined at:
  4378 ;;		line 174 in file "main.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  a               1    wreg     PTR struct .
  4381 ;;		 -> CalcNextCnt@Tmp(20), 
  4382 ;;  b               1    4[BANK0 ] PTR struct .
  4383 ;;		 -> CalcNextCnt@Tmp(20), 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  a               1   11[BANK0 ] PTR struct .
  4386 ;;		 -> CalcNextCnt@Tmp(20), 
  4387 ;;  tmp             5    6[BANK0 ] struct .
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  1    wreg      void 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4392 ;; Tracked objects:
  4393 ;;		On entry : 1F/0
  4394 ;;		On exit  : 1F/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4397 ;;      Params:         0       1       0       0
  4398 ;;      Locals:         0       6       0       0
  4399 ;;      Temps:          0       1       0       0
  4400 ;;      Totals:         0       8       0       0
  4401 ;;Total ram usage:        8 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    3
  4404 ;; This function calls:
  4405 ;;		Nothing
  4406 ;; This function is called by:
  4407 ;;		_CalcNextCnt
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _Swap
  4413  0FD8                     _Swap:	
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in _Swap: [wreg-fsr1h+status,2+status,0]
  4417                           ;Swap@a stored from wreg
  4418  0FD8  00AB               	movwf	Swap@a
  4419                           
  4420                           ;main.c: 176: SERVO tmp = *a;
  4421  0FD9  082B               	movf	Swap@a,w
  4422  0FDA  0086               	movwf	6
  4423  0FDB  0187               	clrf	7
  4424  0FDC  3026               	movlw	low Swap@tmp
  4425  0FDD  0084               	movwf	4
  4426  0FDE  3000               	movlw	high Swap@tmp
  4427  0FDF  0085               	movwf	5
  4428  0FE0  3005               	movlw	5
  4429  0FE1  00A5               	movwf	??_Swap
  4430  0FE2                     u1690:	
  4431  0FE2  0016               	moviw fsr1++
  4432  0FE3  001A               	movwi fsr0++
  4433  0FE4  0BA5               	decfsz	??_Swap,f
  4434  0FE5  2FE2               	goto	u1690
  4435                           
  4436                           ;main.c: 177: *a = *b;
  4437  0FE6  0824               	movf	Swap@b,w
  4438  0FE7  0086               	movwf	6
  4439  0FE8  0187               	clrf	7
  4440  0FE9  082B               	movf	Swap@a,w
  4441  0FEA  0084               	movwf	4
  4442  0FEB  0185               	clrf	5
  4443  0FEC  3005               	movlw	5
  4444  0FED  00A5               	movwf	??_Swap
  4445  0FEE                     u1700:	
  4446  0FEE  0016               	moviw fsr1++
  4447  0FEF  001A               	movwi fsr0++
  4448  0FF0  0BA5               	decfsz	??_Swap,f
  4449  0FF1  2FEE               	goto	u1700
  4450                           
  4451                           ;main.c: 178: *b = tmp;
  4452  0FF2  3026               	movlw	low Swap@tmp
  4453  0FF3  0086               	movwf	6
  4454  0FF4  3000               	movlw	high Swap@tmp
  4455  0FF5  0087               	movwf	7
  4456  0FF6  0824               	movf	Swap@b,w
  4457  0FF7  0084               	movwf	4
  4458  0FF8  0185               	clrf	5
  4459  0FF9  3005               	movlw	5
  4460  0FFA  00A5               	movwf	??_Swap
  4461  0FFB                     u1710:	
  4462  0FFB  0016               	moviw fsr1++
  4463  0FFC  001A               	movwi fsr0++
  4464  0FFD  0BA5               	decfsz	??_Swap,f
  4465  0FFE  2FFB               	goto	u1710
  4466  0FFF  0008               	return
  4467  1000                     __end_of_Swap:	
  4468                           
  4469                           	psect	text19
  4470  0F43                     __ptext19:	
  4471 ;; *************** function _CalcTMRCnt *****************
  4472 ;; Defined at:
  4473 ;;		line 197 in file "main.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  pulse_width     2    4[BANK0 ] unsigned int 
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  cnt             2    8[BANK0 ] unsigned int 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  2    4[BANK0 ] unsigned int 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2, status,0
  4482 ;; Tracked objects:
  4483 ;;		On entry : 1F/0
  4484 ;;		On exit  : 1F/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4487 ;;      Params:         0       2       0       0
  4488 ;;      Locals:         0       2       0       0
  4489 ;;      Temps:          0       2       0       0
  4490 ;;      Totals:         0       6       0       0
  4491 ;;Total ram usage:        6 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    3
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_CalcNextCnt
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           
  4502                           ;psect for function _CalcTMRCnt
  4503  0F43                     _CalcTMRCnt:	
  4504                           
  4505                           ;main.c: 199: uint16_t cnt = (uint16_t) (65535 - 2 * pulse_width);
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _CalcTMRCnt: [wreg+status,2+status,0]
  4509  0F43  0825               	movf	CalcTMRCnt@pulse_width+1,w
  4510  0F44  00A7               	movwf	??_CalcTMRCnt+1
  4511  0F45  0824               	movf	CalcTMRCnt@pulse_width,w
  4512  0F46  00A6               	movwf	??_CalcTMRCnt
  4513  0F47  35A6               	lslf	??_CalcTMRCnt,f
  4514  0F48  0DA7               	rlf	??_CalcTMRCnt+1,f
  4515  0F49  0926               	comf	??_CalcTMRCnt,w
  4516  0F4A  00A8               	movwf	CalcTMRCnt@cnt
  4517  0F4B  0927               	comf	??_CalcTMRCnt+1,w
  4518  0F4C  00A9               	movwf	CalcTMRCnt@cnt+1
  4519                           
  4520                           ;main.c: 200: return cnt;
  4521  0F4D  0829               	movf	CalcTMRCnt@cnt+1,w
  4522  0F4E  00A5               	movwf	?_CalcTMRCnt+1
  4523  0F4F  0828               	movf	CalcTMRCnt@cnt,w
  4524  0F50  00A4               	movwf	?_CalcTMRCnt
  4525  0F51  0008               	return
  4526  0F52                     __end_of_CalcTMRCnt:	
  4527                           
  4528                           	psect	intentry
  4529  0004                     __pintentry:	
  4530 ;; *************** function _INTERRUPT_HANDLER *****************
  4531 ;; Defined at:
  4532 ;;		line 208 in file "main.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;		None
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4546 ;;      Params:         0       0       0       0
  4547 ;;      Locals:         0       0       0       0
  4548 ;;      Temps:          2       0       0       0
  4549 ;;      Totals:         2       0       0       0
  4550 ;;Total ram usage:        2 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    2
  4553 ;; This function calls:
  4554 ;;		_Interrupt_TMR1
  4555 ;;		_Interrupt_TX
  4556 ;; This function is called by:
  4557 ;;		Interrupt level 1
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561  0004                     _INTERRUPT_HANDLER:	
  4562                           
  4563                           ;incstack = 0
  4564  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4565                           
  4566                           ; Regs used in _INTERRUPT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4567  0005  3180               	pagesel	$
  4568                           
  4569                           ;main.c: 210: if (INTCONbits.PEIE & PIE1bits.TMR1IE & PIR1bits.TMR1IF)
  4570  0006  0020               	movlb	0	; select bank0
  4571  0007  0811               	movf	17,w	;volatile
  4572  0008  3901               	andlw	1
  4573  0009  00F4               	movwf	??_INTERRUPT_HANDLER
  4574  000A  0021               	movlb	1	; select bank1
  4575  000B  0811               	movf	17,w	;volatile
  4576  000C  3901               	andlw	1
  4577  000D  00F5               	movwf	??_INTERRUPT_HANDLER+1
  4578  000E  0E0B               	swapf	11,w	;volatile
  4579  000F  0C89               	rrf	9,f
  4580  0010  0C89               	rrf	9,f
  4581  0011  3901               	andlw	1
  4582  0012  0575               	andwf	??_INTERRUPT_HANDLER+1,w
  4583  0013  0574               	andwf	??_INTERRUPT_HANDLER,w
  4584  0014  1903               	btfsc	3,2
  4585  0015  281C               	goto	i1l1916
  4586                           
  4587                           ;main.c: 211: {;main.c: 212: TMR1IF = 0;
  4588  0016  0020               	movlb	0	; select bank0
  4589  0017  1011               	bcf	17,0	;volatile
  4590                           
  4591                           ;main.c: 213: Interrupt_TMR1();
  4592  0018  3187  2786  3180   	fcall	_Interrupt_TMR1
  4593                           
  4594                           ;main.c: 214: }
  4595  001B  2830               	goto	i1l123
  4596  001C                     i1l1916:	
  4597                           
  4598                           ;main.c: 215: else if (INTCONbits.PEIE & PIE1bits.TXIE & PIR1bits.TXIF)
  4599  001C  0020               	movlb	0	; select bank0
  4600  001D  0E11               	swapf	17,w	;volatile
  4601  001E  3901               	andlw	1
  4602  001F  00F4               	movwf	??_INTERRUPT_HANDLER
  4603  0020  0021               	movlb	1	; select bank1
  4604  0021  0E11               	swapf	17,w	;volatile
  4605  0022  3901               	andlw	1
  4606  0023  00F5               	movwf	??_INTERRUPT_HANDLER+1
  4607  0024  0E0B               	swapf	11,w	;volatile
  4608  0025  0C89               	rrf	9,f
  4609  0026  0C89               	rrf	9,f
  4610  0027  3901               	andlw	1
  4611  0028  0575               	andwf	??_INTERRUPT_HANDLER+1,w
  4612  0029  0574               	andwf	??_INTERRUPT_HANDLER,w
  4613  002A  1903               	btfsc	3,2
  4614  002B  2830               	goto	i1l123
  4615                           
  4616                           ;main.c: 216: {;main.c: 217: TXIF = 0;
  4617  002C  0020               	movlb	0	; select bank0
  4618  002D  1211               	bcf	17,4	;volatile
  4619                           
  4620                           ;main.c: 218: Interrupt_TX();
  4621  002E  318F  2775         	fcall	_Interrupt_TX
  4622  0030                     i1l123:	
  4623  0030  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4624  0031  0009               	retfie
  4625  0032                     __end_of_INTERRUPT_HANDLER:	
  4626                           
  4627                           	psect	text21
  4628  0F75                     __ptext21:	
  4629 ;; *************** function _Interrupt_TX *****************
  4630 ;; Defined at:
  4631 ;;		line 33 in file "Interrupt.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4640 ;; Tracked objects:
  4641 ;;		On entry : 1F/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4645 ;;      Params:         0       0       0       0
  4646 ;;      Locals:         0       0       0       0
  4647 ;;      Temps:          1       0       0       0
  4648 ;;      Totals:         1       0       0       0
  4649 ;;Total ram usage:        1 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_INTERRUPT_HANDLER
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _Interrupt_TX
  4660  0F75                     _Interrupt_TX:	
  4661                           
  4662                           ;Interrupt.c: 35: static int cnt = 0;;Interrupt.c: 37: TXREG = _DebugTxData[cnt];
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _Interrupt_TX: [wreg+fsr1l+fsr1h+status,2+status,0]
  4666  0F75  0021               	movlb	1	; select bank1
  4667  0F76  083F               	movf	Interrupt_TX@cnt^(0+128),w
  4668  0F77  3EB2               	addlw	(low (__DebugTxData| 0))& (0+255)
  4669  0F78  0086               	movwf	6
  4670  0F79  0187               	clrf	7
  4671  0F7A  0801               	movf	1,w
  4672  0F7B  0023               	movlb	3	; select bank3
  4673  0F7C  009A               	movwf	26	;volatile
  4674                           
  4675                           ;Interrupt.c: 39: cnt++;
  4676  0F7D  3001               	movlw	1
  4677  0F7E  0021               	movlb	1	; select bank1
  4678  0F7F  07BF               	addwf	Interrupt_TX@cnt^(0+128),f
  4679  0F80  3000               	movlw	0
  4680  0F81  3DC0               	addwfc	(Interrupt_TX@cnt+1)^(0+128),f
  4681                           
  4682                           ;Interrupt.c: 40: if (cnt >= 5)
  4683  0F82  0840               	movf	(Interrupt_TX@cnt+1)^(0+128),w
  4684  0F83  3A80               	xorlw	128
  4685  0F84  00F0               	movwf	??_Interrupt_TX
  4686  0F85  3080               	movlw	128
  4687  0F86  0270               	subwf	??_Interrupt_TX,w
  4688  0F87  1D03               	skipz
  4689  0F88  2F8B               	goto	u211_25
  4690  0F89  3005               	movlw	5
  4691  0F8A  023F               	subwf	Interrupt_TX@cnt^(0+128),w
  4692  0F8B                     u211_25:	
  4693  0F8B  1C03               	skipc
  4694  0F8C  0008               	return
  4695                           
  4696                           ;Interrupt.c: 41: {;Interrupt.c: 42: cnt = 0;
  4697  0F8D  0021               	movlb	1	; select bank1
  4698  0F8E  01BF               	clrf	Interrupt_TX@cnt^(0+128)
  4699  0F8F  01C0               	clrf	(Interrupt_TX@cnt+1)^(0+128)
  4700  0F90  0008               	return
  4701  0F91                     __end_of_Interrupt_TX:	
  4702                           
  4703                           	psect	text22
  4704  0786                     __ptext22:	
  4705 ;; *************** function _Interrupt_TMR1 *****************
  4706 ;; Defined at:
  4707 ;;		line 9 in file "Interrupt.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 1F/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4721 ;;      Params:         0       0       0       0
  4722 ;;      Locals:         0       0       0       0
  4723 ;;      Temps:          1       0       0       0
  4724 ;;      Totals:         1       0       0       0
  4725 ;;Total ram usage:        1 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    1
  4728 ;; This function calls:
  4729 ;;		i1_Output
  4730 ;; This function is called by:
  4731 ;;		_INTERRUPT_HANDLER
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _Interrupt_TMR1
  4737  0786                     _Interrupt_TMR1:	
  4738                           
  4739                           ;Interrupt.c: 11: static int IntCnt = 0;;Interrupt.c: 13: TMR1 = _TMRCnt[IntCnt];
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _Interrupt_TMR1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4743  0786  3576               	lslf	Interrupt_TMR1@IntCnt,w
  4744  0787  3EA0               	addlw	(low (__TMRCnt| 0))& (0+255)
  4745  0788  0086               	movwf	6
  4746  0789  0187               	clrf	7
  4747  078A  3F40               	moviw [0]fsr1
  4748  078B  0096               	movwf	22	;volatile
  4749  078C  3F41               	moviw [1]fsr1
  4750  078D  0097               	movwf	23	;volatile
  4751                           
  4752                           ;Interrupt.c: 15: if (IntCnt == 0)
  4753  078E  0876               	movf	Interrupt_TMR1@IntCnt,w
  4754  078F  0477               	iorwf	Interrupt_TMR1@IntCnt+1,w
  4755  0790  1D03               	btfss	3,2
  4756  0791  2F99               	goto	i1l1874
  4757                           
  4758                           ;Interrupt.c: 16: {;Interrupt.c: 17: _isBusy = 1;
  4759  0792  0021               	movlb	1	; select bank1
  4760  0793  01C1               	clrf	__isBusy^(0+128)
  4761  0794  0AC1               	incf	__isBusy^(0+128),f
  4762                           
  4763                           ;Interrupt.c: 18: Output(0b1111, 1);
  4764  0795  01F0               	clrf	i1Output@value
  4765  0796  0AF0               	incf	i1Output@value,f
  4766  0797  300F               	movlw	15
  4767  0798  2F9F               	goto	L1
  4768  0799                     i1l1874:	
  4769                           ;Interrupt.c: 19: }
  4770                           
  4771                           
  4772                           ;Interrupt.c: 20: else;Interrupt.c: 21: {;Interrupt.c: 22: Output(_CHq[IntCnt - 1], 0);
  4773  0799  01F0               	clrf	i1Output@value
  4774  079A  0876               	movf	Interrupt_TMR1@IntCnt,w
  4775  079B  3EBA               	addlw	(low ((__CHq| 0+255)))& (0+255)
  4776  079C  0086               	movwf	6
  4777  079D  0187               	clrf	7
  4778  079E  0801               	movf	1,w
  4779  079F                     L1:	
  4780  079F  3187  274A  3187   	fcall	i1_Output
  4781                           
  4782                           ;Interrupt.c: 23: };Interrupt.c: 25: IntCnt++;
  4783  07A2  3001               	movlw	1
  4784  07A3  07F6               	addwf	Interrupt_TMR1@IntCnt,f
  4785  07A4  3000               	movlw	0
  4786  07A5  3DF7               	addwfc	Interrupt_TMR1@IntCnt+1,f
  4787                           
  4788                           ;Interrupt.c: 26: if (IntCnt >= _IntNum)
  4789  07A6  0877               	movf	Interrupt_TMR1@IntCnt+1,w
  4790  07A7  3A80               	xorlw	128
  4791  07A8  00F3               	movwf	??_Interrupt_TMR1
  4792  07A9  0879               	movf	__IntNum+1,w
  4793  07AA  3A80               	xorlw	128
  4794  07AB  0273               	subwf	??_Interrupt_TMR1,w
  4795  07AC  1D03               	skipz
  4796  07AD  2FB0               	goto	u210_25
  4797  07AE  0878               	movf	__IntNum,w
  4798  07AF  0276               	subwf	Interrupt_TMR1@IntCnt,w
  4799  07B0                     u210_25:	
  4800  07B0  1C03               	skipc
  4801  07B1  0008               	return
  4802                           
  4803                           ;Interrupt.c: 27: {;Interrupt.c: 28: _isBusy = 0;
  4804  07B2  0021               	movlb	1	; select bank1
  4805  07B3  01C1               	clrf	__isBusy^(0+128)
  4806                           
  4807                           ;Interrupt.c: 29: IntCnt = 0;
  4808  07B4  01F6               	clrf	Interrupt_TMR1@IntCnt
  4809  07B5  01F7               	clrf	Interrupt_TMR1@IntCnt+1
  4810  07B6  0008               	return
  4811  07B7                     __end_of_Interrupt_TMR1:	
  4812                           
  4813                           	psect	text23
  4814  074A                     __ptext23:	
  4815 ;; *************** function i1_Output *****************
  4816 ;; Defined at:
  4817 ;;		line 13 in file "ShareFunc.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  ch              1    wreg     unsigned char 
  4820 ;;  value           1    0[COMMON] unsigned char 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  ch              1    2[COMMON] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4827 ;; Tracked objects:
  4828 ;;		On entry : 1E/1
  4829 ;;		On exit  : 1C/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4832 ;;      Params:         1       0       0       0
  4833 ;;      Locals:         1       0       0       0
  4834 ;;      Temps:          1       0       0       0
  4835 ;;      Totals:         3       0       0       0
  4836 ;;Total ram usage:        3 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; This function calls:
  4839 ;;		Nothing
  4840 ;; This function is called by:
  4841 ;;		_Interrupt_TMR1
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           
  4846                           ;psect for function i1_Output
  4847  074A                     i1_Output:	
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in i1_Output: [wreg-fsr0h+status,2+status,0+pclath]
  4851                           ;i1Output@ch stored from wreg
  4852  074A  00F2               	movwf	i1Output@ch
  4853                           
  4854                           ;ShareFunc.c: 15: if (ch & _CHs[0]) LATCbits.LATC3 = value;
  4855  074B  3000               	movlw	low (__CHs| (0+32768))
  4856  074C  0084               	movwf	4
  4857  074D  3088               	movlw	high (__CHs| (0+32768))
  4858  074E  0085               	movwf	5
  4859  074F  0800               	movf	0,w	;code access
  4860  0750  00F1               	movwf	??i1_Output
  4861  0751  0872               	movf	i1Output@ch,w
  4862  0752  0571               	andwf	??i1_Output,w
  4863  0753  1903               	btfsc	3,2
  4864  0754  2F5B               	goto	i1l1696
  4865  0755  0C70               	rrf	i1Output@value,w
  4866  0756  0022               	movlb	2	; select bank2
  4867  0757  1C03               	skipc
  4868  0758  118E               	bcf	14,3	;volatile
  4869  0759  1803               	skipnc
  4870  075A  158E               	bsf	14,3	;volatile
  4871  075B                     i1l1696:	
  4872                           
  4873                           ;ShareFunc.c: 16: if (ch & _CHs[1]) LATCbits.LATC6 = value;
  4874  075B  3001               	movlw	low ((__CHs+1)| (0+32768))
  4875  075C  0084               	movwf	4
  4876  075D  3088               	movlw	high ((__CHs+1)| (0+32768))
  4877  075E  0085               	movwf	5
  4878  075F  0800               	movf	0,w	;code access
  4879  0760  0572               	andwf	i1Output@ch,w
  4880  0761  1903               	btfsc	3,2
  4881  0762  2F69               	goto	i1l1700
  4882  0763  0C70               	rrf	i1Output@value,w
  4883  0764  0022               	movlb	2	; select bank2
  4884  0765  1C03               	skipc
  4885  0766  130E               	bcf	14,6	;volatile
  4886  0767  1803               	skipnc
  4887  0768  170E               	bsf	14,6	;volatile
  4888  0769                     i1l1700:	
  4889                           
  4890                           ;ShareFunc.c: 17: if (ch & _CHs[2]) LATCbits.LATC5 = value;
  4891  0769  3002               	movlw	low ((__CHs+2)| (0+32768))
  4892  076A  0084               	movwf	4
  4893  076B  3088               	movlw	high ((__CHs+2)| (0+32768))
  4894  076C  0085               	movwf	5
  4895  076D  0800               	movf	0,w	;code access
  4896  076E  0572               	andwf	i1Output@ch,w
  4897  076F  1903               	btfsc	3,2
  4898  0770  2F77               	goto	i1l1704
  4899  0771  0C70               	rrf	i1Output@value,w
  4900  0772  0022               	movlb	2	; select bank2
  4901  0773  1C03               	skipc
  4902  0774  128E               	bcf	14,5	;volatile
  4903  0775  1803               	skipnc
  4904  0776  168E               	bsf	14,5	;volatile
  4905  0777                     i1l1704:	
  4906                           
  4907                           ;ShareFunc.c: 18: if (ch & _CHs[3]) LATCbits.LATC4 = value;
  4908  0777  3003               	movlw	low ((__CHs+3)| (0+32768))
  4909  0778  0084               	movwf	4
  4910  0779  3088               	movlw	high ((__CHs+3)| (0+32768))
  4911  077A  0085               	movwf	5
  4912  077B  0800               	movf	0,w	;code access
  4913  077C  0572               	andwf	i1Output@ch,w
  4914  077D  1903               	btfsc	3,2
  4915  077E  0008               	return
  4916  077F  0C70               	rrf	i1Output@value,w
  4917  0780  0022               	movlb	2	; select bank2
  4918  0781  1C03               	skipc
  4919  0782  120E               	bcf	14,4	;volatile
  4920  0783  1803               	skipnc
  4921  0784  160E               	bsf	14,4	;volatile
  4922  0785  0008               	return
  4923  0786                     __end_ofi1_Output:	
  4924  007E                     btemp	set	126	;btemp
  4925  007E                     int$flags	set	126
  4926  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    4
    Data        49
    BSS         54
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     80      80
    BANK1            80     34      69
    BANK2            80      0      64

Pointer List with Targets:

    Swap@b	PTR struct . size(1) Largest target is 20
		 -> CalcNextCnt@Tmp(BANK0[20]), 

    Swap@a	PTR struct . size(1) Largest target is 20
		 -> CalcNextCnt@Tmp(BANK0[20]), 

    CalcNextCnt@Servo	PTR struct . size(1) Largest target is 20
		 -> main@Servo(BANK1[20]), 

    SetParameter@Servo	PTR struct . size(1) Largest target is 20
		 -> main@Servo(BANK1[20]), 

    ReceiveTargetAngle@Servo	PTR struct . size(1) Largest target is 20
		 -> main@Servo(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_HANDLER in COMMON

    _INTERRUPT_HANDLER->_Interrupt_TMR1
    _Interrupt_TMR1->i1_Output

Critical Paths under _main in BANK0

    _SetParameter->_CalcWidth
    _CalcWidth->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _ReceiveTargetAngle->___bmul
    _CalcNextCnt->_Swap
    _Swap->___bmul
    _CalcTMRCnt->___bmul

Critical Paths under _INTERRUPT_HANDLER in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SetParameter

Critical Paths under _INTERRUPT_HANDLER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_HANDLER in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   19624
                                             13 BANK1     21    21      0
                        _CalcNextCnt
                               _Init
                             _Output
                 _ReceiveTargetAngle
                       _SetParameter
 ---------------------------------------------------------------------------------
 (1) _SetParameter                                        13    13      0   15781
                                              0 BANK1     13    13      0
                          _CalcWidth
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _CalcWidth                                            7     3      4   14744
                                             73 BANK0      7     3      4
                           ___awtoft
                             ___bmul (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2437
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     316
                                             59 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2871
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2825
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3485
                                             46 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2634
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2415
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReceiveTargetAngle                                  26    26      0    1111
                                              4 BANK0     26    26      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _Output                                               3     2      1     316
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
                            _InitOsc
                            _InitPin
                            _InitTmr
 ---------------------------------------------------------------------------------
 (2) _InitTmr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPin                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CalcNextCnt                                         31    31      0    2259
                                             12 BANK0     31    31      0
                         _CalcTMRCnt
                               _Swap
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     672
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Swap                                                 8     7      1     205
                                              4 BANK0      8     7      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _CalcTMRCnt                                           6     4      2     237
                                              4 BANK0      6     4      2
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_HANDLER                                    2     2      0     228
                                              4 COMMON     2     2      0
                     _Interrupt_TMR1
                       _Interrupt_TX
 ---------------------------------------------------------------------------------
 (6) _Interrupt_TX                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Interrupt_TMR1                                       1     1      0     228
                                              3 COMMON     1     1      0
                           i1_Output
 ---------------------------------------------------------------------------------
 (7) i1_Output                                             3     2      1     228
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CalcNextCnt
     _CalcTMRCnt
       ___bmul (ARG)
     _Swap
       ___bmul (ARG)
     ___bmul
   _Init
     _InitOsc
     _InitPin
     _InitTmr
   _Output
   _ReceiveTargetAngle
     ___bmul
   _SetParameter
     _CalcWidth
       ___awtoft
         ___ftpack
       ___bmul (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___bmul

 _INTERRUPT_HANDLER (ROOT)
   _Interrupt_TMR1
     i1_Output
   _Interrupt_TX

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      DF       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     22      45       8       86.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      DF      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Sep 29 15:15:48 2019

                 _CalcTMRCnt 0F43               ___bmul@product 0022                  __CFG_CP$OFF 0000  
                 i1Output@ch 0072                 ___ftadd@exp1 005A                 ___ftadd@exp2 0059  
               ___ftadd@sign 0058                          l600 0698                          l601 06A0  
                        l624 02D5                          l593 0685                          l684 062F  
               __CFG_CPD$OFF 0000                 __CFG_BORV$HI 0000                          wreg 0009  
                _CalcNextCnt 005C                 __CFG_LVP$OFF 0000                 ___ftdiv@cntr 0038  
                main@isFirst 00E3                 ___ftdiv@sign 003D                         l1500 057B  
                       l1414 0F9B                         l1424 025E                         l1434 0274  
                       l1522 05BD                         l1610 061D                         l1452 02A1  
                       l1428 0265                         l1516 05A4                         l1620 063C  
                       l1612 062B                         l1382 0662                         l1470 02E7  
                       l1454 02AB                         l1446 028E                         l1542 04E1  
                       l1384 066C                         l1464 02C7                         l1456 02B0  
                       l1560 0504                         l1536 04CB                         l1624 064A  
                       l1802 0091                         l1722 072B                         l1394 0696  
                       l1386 0671                         l1378 065B                         l1474 02F9  
                       l1466 02D1                         l1458 02B4                         l1820 0115  
                       l1804 0098                         l1396 068A                         l1484 0314  
                       l1572 0520                         l1564 050C                         l1726 073A  
                       l1718 071C                         l1494 0565                         l1680 0F66  
                       l1840 0188                         l1832 0138                         l1816 0110  
                       l1744 03A8                         l1736 0335                         l1576 0528  
                       l1592 05F6                         l1738 03A6                         l1684 0F6C  
                       l1836 0179                         l1828 0128                         l1748 03D6  
                       l1588 05ED                         l1772 0444                         l1940 0FD1  
                       l1862 01D3                         l1790 0060                         l1766 0401  
                       l1864 0215                         l1848 019B                         l1928 0FBC  
                       l1778 0447                         u1115 0680                         u2005 00CA  
                       u1135 0691                         u2025 0123                         u2035 0136  
                       u2045 015F                         u1325 02A2                         u2055 0186  
                       u1175 06A7                         u1095 0667                         u2065 0196  
                       u2075 01BD                         u1355 02B5                         u1700 0FEE  
                       u2085 01E3                         u1525 050D                         u1605 05FD  
                       u1710 0FFB                         u1295 028F                         u1455 05A5  
                       u1535 0513                         u1385 02C8                         u1465 05B4  
                       u1475 05BE                         u1635 061E                         u1565 0529  
                       u1575 052F                         u1825 0364                         u1665 0633  
                       u1690 0FE2                         u1835 0371                         u1915 0405  
                       u1845 0379                         u1925 040E                         u1855 0390  
                       u1935 0424                         u1865 0398                         u1945 0442  
                       u1970 007B                         u1955 045C                         u1885 03BF  
                       u1965 04B2                         u1895 03EF                         u1985 008C  
                       u1995 00A1                         _TMR1 0016                         _TXIF 008C  
                       __CHq 00BB                         __CHs 0800                         _Init 0F2C  
               __CFG_WRT$OFF 0000                         _Swap 0FD8                         _main 0FB1  
               ___ftpack@arg 0020                 ___ftpack@exp 0023          SetParameter@isFirst 00E4  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E               CalcNextCnt@Tmp 0033                         start 0032  
              __CFG_IESO$OFF 0000            ___bmul@multiplier 0023                 ___ftmul@cntr 004C  
               ___ftmul@sign 004D              __end_of_InitPin 0F63              __end_of_InitOsc 0F2C  
            __end_of_InitTmr 0F43                 ___fttol@exp1 0068                 ___fttol@lval 0064  
                      ?_Init 0070                        ?_Swap 0024                        ?_main 0070  
            __end_of___ftadd 032B                __CFG_WDTE$OFF 0000              __end_of___ftdiv 05DE  
            __end_of___ftmul 054F              __end_of___fttol 0653                        i1l123 0030  
                      _PORTA 000C                        _PORTB 000D                        _TRISA 008C  
                      _TRISB 008D                SetParameter@i 00CD                        _TXREG 019A  
             __CFG_FCMEN$OFF 0000                        Swap@a 002B                        Swap@b 0024  
              ___awtoft@sign 002D                ___ftpack@sign 0024                i1Output@value 0070  
      SetParameter@Parameter 0150             __end_ofi1_Output 0786               __CFG_BOREN$OFF 0000  
                      status 0003                        wtemp0 007E         Interrupt_TMR1@IntCnt 0076  
         __size_of_CalcWidth 0054               __CFG_MCLRE$OFF 0000                 __end_of__CHs 0804  
            __initialization 0034                 __end_of_Init 0F37                 __end_of_Swap 1000  
               __end_of_main 0FD8                  ?_CalcTMRCnt 0024                       ??_Init 0020  
                     ??_Swap 0025                       ??_main 0070                ___fttol@sign1 0063  
             __CFG_PLLEN$OFF 0000               CalcWidth@angle 006F             __end_of___awtoft 0FB1  
                     _ANSELA 018C                       _ANSELB 018D             __end_of___ftpack 06B7  
           __end_of___lbtoft 0800               CalcWidth@width 006D                       i1l1700 0769  
                     i1l1704 0777                       i1l1916 001C                       u210_25 07B0  
                     i1l1696 075B                       i1l1874 0799                       u211_25 0F8B  
                     _TMR1IF 0088                       _TMR1ON 00C0                ?_Interrupt_TX 0070  
                  ??_InitPin 0020                    ??_InitOsc 0020                    ??_InitTmr 0020  
             __CFG_PWRTE$OFF 0000                       ___bmul 0F63                       _Output 070B  
                  ??___ftadd 0054                    ??___ftdiv 0034                    ??___ftmul 0044  
                  ??___fttol 005F        ___ftmul@f3_as_product 0049             CalcNextCnt@Servo 0032  
          __end_of_CalcWidth 070B                ?_SetParameter 0070          __size_of_CalcTMRCnt 000F  
 __end_of_ReceiveTargetAngle 03F2               ??_Interrupt_TX 0070      __end_of__initialization 0058  
                 ___ftadd@f1 004E                   ___ftadd@f2 0051                   ___ftdiv@f1 0031  
                 ___ftdiv@f2 002E                   ___ftdiv@f3 0039                   ___awtoft@c 0028  
                 ___lbtoft@c 002F          ___bmul@multiplicand 0020                 CalcNextCnt@i 0049  
               CalcNextCnt@j 0047                   ___ftmul@f1 003E                   ___ftmul@f2 0041  
                 ___fttol@f1 005B               __pcstackCOMMON 0070                 __pidataBANK1 0003  
               __pidataBANK2 07B7                    ?i1_Output 0070                 ?_CalcNextCnt 0070  
             ??_SetParameter 00C2                   __pbssBANK1 00A0                   __pbssBANK2 0150  
            __CFG_VCAPEN$OFF 0000                   __pmaintext 0FB1                      ?___bmul 0020  
                    ?_Output 0020                   __pintentry 0004                    ?___awtoft 0028  
                  ?___ftpack 0020                    ?___lbtoft 0028                   ??i1_Output 0071  
              CalcTMRCnt@cnt 0028                  __Parameters 0120                      __TMRCnt 00A0  
                    _InitPin 0F52                      _InitOsc 0F25                      _InitTmr 0F37  
                    __IntNum 0078                 ??_CalcTMRCnt 0026                      Swap@tmp 0026  
            __size_of___bmul 0012              __size_of_Output 003F                      ___ftadd 0237  
                    ___ftdiv 054F                      ___ftmul 04B5                      ___fttol 05DE  
                    __isBusy 00C1              __CFG_STVREN$OFF 0000                   ??___awtoft 002B  
                 ??___ftpack 0025                   ??___lbtoft 002B                      __ptext1 03F2  
                    __ptext2 06B7                      __ptext3 07E7                      __ptext4 05DE  
                    __ptext5 04B5                      __ptext6 054F                      __ptext7 0237  
                    __ptext8 0F91                      __ptext9 0653         __end_of_Interrupt_TX 0F91  
          _INTERRUPT_HANDLER 0004                    _T1CONbits 0018      __size_of_Interrupt_TMR1 0031  
         ?_INTERRUPT_HANDLER 0070          ReceiveTargetAngle@i 003C                      clrloop0 0F1A  
       end_of_initialization 0058          ??_INTERRUPT_HANDLER 0074           __end_of_CalcTMRCnt 0F52  
                    init_ram 0F1F                      initloop 0F20         __end_of_SetParameter 04B5  
  __end_of_INTERRUPT_HANDLER 0032                    _PORTCbits 000E             __CFG_FOSC$INTOSC 0000  
                  _TRISCbits 008E         __size_of_CalcNextCnt 01DB            SetParameter@Servo 00CC  
                  _CalcWidth 06B7                  ___ftdiv@exp 003C                 __DebugTxData 00B2  
                ___ftmul@exp 0048           _ReceiveTargetAngle 032B               __end_of___bmul 0F75  
             __end_of_Output 074A          ?_ReceiveTargetAngle 0070            __size_ofi1_Output 003C  
        start_initialization 0034              Interrupt_TX@cnt 00BF                  Output@value 0020  
                 ?_CalcWidth 0069         ??_ReceiveTargetAngle 0024                     ??___bmul 0021  
                   ??_Output 0021        __size_of_Interrupt_TX 001C                  __pdataBANK1 00E4  
                __pdataBANK2 0120   __size_of_INTERRUPT_HANDLER 002E               _Interrupt_TMR1 0786  
          __size_of___awtoft 0020            __size_of___ftpack 0064            __size_of___lbtoft 0019  
                __pbssCOMMON 0076                    ___latbits 0001                __pcstackBANK0 0020  
              __pcstackBANK1 00C2                 _Interrupt_TX 0F75        __size_of_SetParameter 00C3  
                   ?_InitPin 0070                     ?_InitOsc 0070                     ?_InitTmr 0070  
                   ?___ftadd 004E                     ?___ftdiv 002E                     ?___ftmul 003E  
                   ?___fttol 005B       __end_of_Interrupt_TMR1 07B7           CalcWidth@Parameter 0069  
               _SetParameter 03F2                  ??_CalcWidth 006D                     _LATCbits 010E  
                  clear_ram0 0F19                     _PIE1bits 0091                     _PIR1bits 0011  
            ?_Interrupt_TMR1 0070                     i1_Output 074A             SetParameter@Mode 00CB  
                  main@Servo 00CF             __size_of_InitPin 0011             __size_of_InitOsc 0007  
           __size_of_InitTmr 000C             __size_of___ftadd 00F4             __size_of___ftdiv 008F  
           __size_of___ftmul 009A             __size_of___fttol 0075                     ___awtoft 0F91  
                   ___ftpack 0653                     ___lbtoft 07E7                     Output@ch 0022  
              ??_CalcNextCnt 002C  ReceiveTargetAngle@angle_buf 002F                     __ptext10 032B  
                   __ptext11 070B                     __ptext12 0F2C                     __ptext21 0F75  
                   __ptext13 0F37                     __ptext22 0786                     __ptext14 0F52  
                   __ptext23 074A                     __ptext15 0F25                     __ptext16 005C  
                   __ptext17 0F63                     __ptext18 0FD8                     __ptext19 0F43  
              __size_of_Init 000B                __size_of_Swap 0028                __size_of_main 0027  
      CalcTMRCnt@pulse_width 0024         ReceiveTargetAngle@rx 0037                     int$flags 007E  
ReceiveTargetAngle@pre_angle 00AA                   _INTCONbits 000B      ReceiveTargetAngle@F2792 00B7  
                   intlevel1 0000          __end_of_CalcNextCnt 0237  __size_of_ReceiveTargetAngle 00C7  
          __CFG_CLKOUTEN$OFF 0000      ReceiveTargetAngle@Servo 003B                   _OSCCONbits 0099  
              __pstringtext1 0800             ??_Interrupt_TMR1 0073  
