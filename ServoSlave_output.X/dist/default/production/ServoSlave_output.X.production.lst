

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Aug 18 10:44:25 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1933
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.00
    30                           ; Generated 27/05/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F1933 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  0110                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0191                     	;# 
   130  0191                     	;# 
   131  0192                     	;# 
   132  0193                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0199                     	;# 
   139  019A                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020D                     	;# 
   150  0210                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0215                     	;# 
   156  0215                     	;# 
   157  0216                     	;# 
   158  0217                     	;# 
   159  0291                     	;# 
   160  0291                     	;# 
   161  0292                     	;# 
   162  0293                     	;# 
   163  0294                     	;# 
   164  0295                     	;# 
   165  0295                     	;# 
   166  0296                     	;# 
   167  0298                     	;# 
   168  0298                     	;# 
   169  0299                     	;# 
   170  029A                     	;# 
   171  029B                     	;# 
   172  029C                     	;# 
   173  029C                     	;# 
   174  029D                     	;# 
   175  029E                     	;# 
   176  029F                     	;# 
   177  0311                     	;# 
   178  0311                     	;# 
   179  0312                     	;# 
   180  0313                     	;# 
   181  0314                     	;# 
   182  0315                     	;# 
   183  0315                     	;# 
   184  0316                     	;# 
   185  0318                     	;# 
   186  0318                     	;# 
   187  0319                     	;# 
   188  031A                     	;# 
   189  031C                     	;# 
   190  031C                     	;# 
   191  031D                     	;# 
   192  031E                     	;# 
   193  0394                     	;# 
   194  0395                     	;# 
   195  0396                     	;# 
   196  0415                     	;# 
   197  0416                     	;# 
   198  0417                     	;# 
   199  041C                     	;# 
   200  041D                     	;# 
   201  041E                     	;# 
   202  0791                     	;# 
   203  0792                     	;# 
   204  0793                     	;# 
   205  0794                     	;# 
   206  0795                     	;# 
   207  0798                     	;# 
   208  0799                     	;# 
   209  07A0                     	;# 
   210  07A1                     	;# 
   211  07A3                     	;# 
   212  07A4                     	;# 
   213  07A6                     	;# 
   214  07A7                     	;# 
   215  07A9                     	;# 
   216  07AA                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0110                     	;# 
   280  0111                     	;# 
   281  0112                     	;# 
   282  0113                     	;# 
   283  0114                     	;# 
   284  0115                     	;# 
   285  0116                     	;# 
   286  0117                     	;# 
   287  0118                     	;# 
   288  0119                     	;# 
   289  011A                     	;# 
   290  011B                     	;# 
   291  011D                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  0191                     	;# 
   295  0191                     	;# 
   296  0192                     	;# 
   297  0193                     	;# 
   298  0193                     	;# 
   299  0193                     	;# 
   300  0194                     	;# 
   301  0195                     	;# 
   302  0196                     	;# 
   303  0199                     	;# 
   304  019A                     	;# 
   305  019B                     	;# 
   306  019B                     	;# 
   307  019B                     	;# 
   308  019B                     	;# 
   309  019C                     	;# 
   310  019C                     	;# 
   311  019D                     	;# 
   312  019E                     	;# 
   313  019F                     	;# 
   314  020D                     	;# 
   315  0210                     	;# 
   316  0211                     	;# 
   317  0212                     	;# 
   318  0213                     	;# 
   319  0214                     	;# 
   320  0215                     	;# 
   321  0215                     	;# 
   322  0216                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0298                     	;# 
   333  0298                     	;# 
   334  0299                     	;# 
   335  029A                     	;# 
   336  029B                     	;# 
   337  029C                     	;# 
   338  029C                     	;# 
   339  029D                     	;# 
   340  029E                     	;# 
   341  029F                     	;# 
   342  0311                     	;# 
   343  0311                     	;# 
   344  0312                     	;# 
   345  0313                     	;# 
   346  0314                     	;# 
   347  0315                     	;# 
   348  0315                     	;# 
   349  0316                     	;# 
   350  0318                     	;# 
   351  0318                     	;# 
   352  0319                     	;# 
   353  031A                     	;# 
   354  031C                     	;# 
   355  031C                     	;# 
   356  031D                     	;# 
   357  031E                     	;# 
   358  0394                     	;# 
   359  0395                     	;# 
   360  0396                     	;# 
   361  0415                     	;# 
   362  0416                     	;# 
   363  0417                     	;# 
   364  041C                     	;# 
   365  041D                     	;# 
   366  041E                     	;# 
   367  0791                     	;# 
   368  0792                     	;# 
   369  0793                     	;# 
   370  0794                     	;# 
   371  0795                     	;# 
   372  0798                     	;# 
   373  0799                     	;# 
   374  07A0                     	;# 
   375  07A1                     	;# 
   376  07A3                     	;# 
   377  07A4                     	;# 
   378  07A6                     	;# 
   379  07A7                     	;# 
   380  07A9                     	;# 
   381  07AA                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393                           
   394                           	psect	idataBANK0
   395  036F                     __pidataBANK0:	
   396                           
   397                           ;initializer for _Timer1_time
   398  036F  34E8               	retlw	232
   399  0370  3403               	retlw	3
   400                           
   401                           	psect	stringtext1
   402  0800                     __pstringtext1:	
   403  0800                     Servo_Initialize@F2760:	
   404  0800  3400               	retlw	0
   405  0801  3400               	retlw	0
   406  0802  3400               	retlw	0
   407  0803  3400               	retlw	0
   408  0804  3400               	retlw	0
   409  0805  3400               	retlw	0
   410  0806  3401               	retlw	1
   411  0807  3400               	retlw	0
   412  0808  3401               	retlw	1
   413  0809  3400               	retlw	0
   414  080A  3402               	retlw	2
   415  080B  3400               	retlw	0
   416  080C  3400               	retlw	0
   417  080D  3400               	retlw	0
   418  080E  3401               	retlw	1
   419  080F  3400               	retlw	0
   420  0810  3402               	retlw	2
   421  0811  3400               	retlw	0
   422  0812  3401               	retlw	1
   423  0813  3400               	retlw	0
   424  0814  3402               	retlw	2
   425  0815  3400               	retlw	0
   426  0816  3402               	retlw	2
   427  0817  3400               	retlw	0
   428  0818                     __end_ofServo_Initialize@F2760:	
   429  0016                     _TMR1	set	22
   430  000D                     _PORTB	set	13
   431  000B                     _INTCONbits	set	11
   432  0018                     _T1CON	set	24
   433  000C                     _PORTA	set	12
   434  000E                     _PORTCbits	set	14
   435  0011                     _PIR1bits	set	17
   436  0018                     _T1CONbits	set	24
   437  0091                     _PIE1bits	set	145
   438  008E                     _TRISCbits	set	142
   439  008D                     _TRISB	set	141
   440  008C                     _TRISA	set	140
   441  0099                     _OSCCON	set	153
   442  010E                     _LATCbits	set	270
   443  018D                     _ANSELB	set	397
   444  018C                     _ANSELA	set	396
   445                           
   446                           ; #config settings
   447  0000                     
   448                           	psect	cinit
   449  07E6                     start_initialization:	
   450  07E6                     __initialization:	
   451                           
   452                           ; Initialize objects allocated to BANK0
   453  07E6  3183  236F  3187   	fcall	__pidataBANK0	;fetch initializer
   454  07E9  00ED               	movwf	__pdataBANK0& (0+127)
   455  07EA  3183  2370  3187   	fcall	__pidataBANK0+1	;fetch initializer
   456  07ED  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   457                           
   458                           ; Clear objects allocated to BANK0
   459  07EE  304B               	movlw	low __pbssBANK0
   460  07EF  0084               	movwf	4
   461  07F0  3000               	movlw	high __pbssBANK0
   462  07F1  0085               	movwf	5
   463  07F2  3022               	movlw	34
   464  07F3  3183  2375  3187   	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to BANK1
   467  07F6  30A0               	movlw	low __pbssBANK1
   468  07F7  0084               	movwf	4
   469  07F8  3000               	movlw	high __pbssBANK1
   470  07F9  0085               	movwf	5
   471  07FA  3014               	movlw	20
   472  07FB  3183  2375         	fcall	clear_ram0
   473  07FD                     end_of_initialization:	
   474                           ;End of C runtime variable initialization code
   475                           
   476  07FD                     __end_of__initialization:	
   477  07FD  0020               	movlb	0
   478  07FE  3184  2C06         	ljmp	_main	;jump to C main() function
   479                           
   480                           	psect	bssBANK0
   481  004B                     __pbssBANK0:	
   482  004B                     _param:	
   483  004B                     	ds	15
   484  005A                     _servo_duty:	
   485  005A                     	ds	10
   486  0064                     _servo_raw_data:	
   487  0064                     	ds	5
   488  0069                     _data_renew:	
   489  0069                     	ds	4
   490                           
   491                           	psect	dataBANK0
   492  006D                     __pdataBANK0:	
   493  006D                     _Timer1_time:	
   494  006D                     	ds	2
   495                           
   496                           	psect	bssBANK1
   497  00A0                     __pbssBANK1:	
   498  00A0                     _port:	
   499  00A0                     	ds	20
   500                           
   501                           	psect	clrtext
   502  0375                     clear_ram0:	
   503                           ;	Called with FSR0 containing the base address, and
   504                           ;	WREG with the size to clear
   505                           
   506  0375  0064               	clrwdt	;clear the watchdog before getting into this loop
   507  0376                     clrloop0:	
   508  0376  0180               	clrf	0	;clear RAM location pointed to by FSR
   509  0377  3101               	addfsr 0,1
   510  0378  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   511  0379  2B76               	goto	clrloop0	;have we reached the end yet?
   512  037A  3400               	retlw	0	;all done for this memory range, return
   513                           
   514                           	psect	cstackCOMMON
   515  0070                     __pcstackCOMMON:	
   516  0070                     ?_Initialize:	
   517  0070                     ?_Renew_Raw_Data:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ??_Renew_Raw_Data:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_Calc_Duty:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_Servo_Output_OFF:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ??_Servo_Output_OFF:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_Oscillator_Initialize:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ??_Oscillator_Initialize:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_Pin_Initialize:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ??_Pin_Initialize:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_Timer_Initialize:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ??_Timer_Initialize:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_Servo_Initialize:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?___bmul:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?___ftpack:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ___bmul@multiplicand:	
   560                           ; 3 bytes @ 0x0
   561                           
   562  0070                     ___ftpack@arg:	
   563                           ; 1 bytes @ 0x0
   564                           
   565                           
   566                           ; 3 bytes @ 0x0
   567  0070                     	ds	1
   568  0071                     ??___bmul:	
   569                           
   570                           ; 1 bytes @ 0x1
   571  0071                     	ds	1
   572  0072                     ___bmul@product:	
   573                           
   574                           ; 1 bytes @ 0x2
   575  0072                     	ds	1
   576  0073                     ___bmul@multiplier:	
   577  0073                     ___ftpack@exp:	
   578                           ; 1 bytes @ 0x3
   579                           
   580                           
   581                           ; 1 bytes @ 0x3
   582  0073                     	ds	1
   583  0074                     ??_Servo_Initialize:	
   584  0074                     ___ftpack@sign:	
   585                           ; 1 bytes @ 0x4
   586                           
   587                           
   588                           ; 1 bytes @ 0x4
   589  0074                     	ds	1
   590  0075                     ??___ftpack:	
   591                           
   592                           ; 1 bytes @ 0x5
   593  0075                     	ds	1
   594  0076                     ??_Initialize:	
   595                           
   596                           ; 1 bytes @ 0x6
   597  0076                     	ds	2
   598  0078                     ?___lbtoft:	
   599                           
   600                           ; 3 bytes @ 0x8
   601  0078                     	ds	3
   602  007B                     ___lbtoft@c:	
   603                           
   604                           ; 1 bytes @ 0xB
   605  007B                     	ds	1
   606  007C                     ??_Calc_Duty:	
   607                           
   608                           ; 1 bytes @ 0xC
   609  007C                     	ds	1
   610  007D                     ??_main:	
   611                           
   612                           	psect	cstackBANK0
   613  0020                     __pcstackBANK0:	
   614                           ; 1 bytes @ 0xD
   615                           
   616  0020                     ??___lbtoft:	
   617  0020                     Servo_Initialize@num:	
   618                           ; 1 bytes @ 0x0
   619                           
   620                           
   621                           ; 24 bytes @ 0x0
   622  0020                     	ds	4
   623  0024                     ?___ftmul:	
   624  0024                     ___ftmul@f1:	
   625                           ; 3 bytes @ 0x4
   626                           
   627                           
   628                           ; 3 bytes @ 0x4
   629  0024                     	ds	3
   630  0027                     ___ftmul@f2:	
   631                           
   632                           ; 3 bytes @ 0x7
   633  0027                     	ds	3
   634  002A                     ??___ftmul:	
   635                           
   636                           ; 1 bytes @ 0xA
   637  002A                     	ds	4
   638  002E                     ___ftmul@exp:	
   639                           
   640                           ; 1 bytes @ 0xE
   641  002E                     	ds	1
   642  002F                     ___ftmul@f3_as_product:	
   643                           
   644                           ; 3 bytes @ 0xF
   645  002F                     	ds	3
   646  0032                     ___ftmul@cntr:	
   647                           
   648                           ; 1 bytes @ 0x12
   649  0032                     	ds	1
   650  0033                     ___ftmul@sign:	
   651                           
   652                           ; 1 bytes @ 0x13
   653  0033                     	ds	1
   654  0034                     ?___fttol:	
   655  0034                     ___fttol@f1:	
   656                           ; 4 bytes @ 0x14
   657                           
   658                           
   659                           ; 3 bytes @ 0x14
   660  0034                     	ds	4
   661  0038                     ??___fttol:	
   662                           
   663                           ; 1 bytes @ 0x18
   664  0038                     	ds	4
   665  003C                     ___fttol@sign1:	
   666                           
   667                           ; 1 bytes @ 0x1C
   668  003C                     	ds	1
   669  003D                     ___fttol@lval:	
   670                           
   671                           ; 4 bytes @ 0x1D
   672  003D                     	ds	4
   673  0041                     ___fttol@exp1:	
   674                           
   675                           ; 1 bytes @ 0x21
   676  0041                     	ds	1
   677  0042                     _Calc_Duty$818:	
   678                           
   679                           ; 3 bytes @ 0x22
   680  0042                     	ds	3
   681  0045                     Calc_Duty@i:	
   682                           
   683                           ; 2 bytes @ 0x25
   684  0045                     	ds	2
   685  0047                     ?_main:	
   686  0047                     main@argc:	
   687                           ; 2 bytes @ 0x27
   688                           
   689                           
   690                           ; 2 bytes @ 0x27
   691  0047                     	ds	2
   692  0049                     main@argv:	
   693                           
   694                           ; 2 bytes @ 0x29
   695  0049                     	ds	2
   696                           
   697                           	psect	maintext
   698  0406                     __pmaintext:	
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 90 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  argc            2   39[BANK0 ] int 
   707 ;;  argv            2   41[BANK0 ] PTR PTR unsigned char 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  2   39[BANK0 ] int 
   712 ;; Registers used:
   713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : B1F/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   719 ;;      Params:         0       4       0       0
   720 ;;      Locals:         0       0       0       0
   721 ;;      Temps:          0       0       0       0
   722 ;;      Totals:         0       4       0       0
   723 ;;Total ram usage:        4 bytes
   724 ;; Hardware stack levels required when called:    3
   725 ;; This function calls:
   726 ;;		_Calc_Duty
   727 ;;		_Initialize
   728 ;;		_Renew_Raw_Data
   729 ;;		_Servo_Output_OFF
   730 ;; This function is called by:
   731 ;;		Startup code after reset
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _main
   737  0406                     _main:	
   738                           
   739                           ;main.c: 91: Initialize();
   740                           
   741                           ;incstack = 0
   742                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   743  0406  3183  2382  3184   	fcall	_Initialize
   744  0409                     l1141:	
   745                           ;main.c: 94: while (1) {
   746                           
   747                           
   748                           ;main.c: 95: Renew_Raw_Data();
   749  0409  3183  23CA  3184   	fcall	_Renew_Raw_Data
   750                           
   751                           ;main.c: 96: if (;main.c: 97: data_renew[0] ==;main.c: 98: data_renew[1] ==;main.c: 99: 
      +                          data_renew[2] ==;main.c: 100: data_renew[3];main.c: 101: )break;
   752  040C  0020               	movlb	0	; select bank0
   753  040D  086A               	movf	_data_renew+1,w
   754  040E  0669               	xorwf	_data_renew,w
   755  040F  1D03               	btfss	3,2
   756  0410  2C13               	goto	u1120
   757  0411  3001               	movlw	1
   758  0412  2C14               	goto	u1130
   759  0413                     u1120:	
   760  0413  3000               	movlw	0
   761  0414                     u1130:	
   762  0414  066B               	xorwf	_data_renew+2,w
   763  0415  1D03               	btfss	3,2
   764  0416  2C19               	goto	u1140
   765  0417  3001               	movlw	1
   766  0418  2C1A               	goto	u1150
   767  0419                     u1140:	
   768  0419  3000               	movlw	0
   769  041A                     u1150:	
   770  041A  066C               	xorwf	_data_renew+3,w
   771  041B  1D03               	skipz
   772  041C  2C09               	goto	l1141
   773                           
   774                           ;main.c: 102: };main.c: 103: Calc_Duty();
   775  041D  3184  24A6  3184   	fcall	_Calc_Duty
   776  0420                     L1:	
   777                           
   778                           ;main.c: 106: LATCbits.LATC3 = 1;
   779  0420  0022               	movlb	2	; select bank2
   780  0421  158E               	bsf	14,3	;volatile
   781                           
   782                           ;main.c: 107: LATCbits.LATC6 = 1;
   783  0422  170E               	bsf	14,6	;volatile
   784                           
   785                           ;main.c: 108: LATCbits.LATC5 = 1;
   786  0423  168E               	bsf	14,5	;volatile
   787                           
   788                           ;main.c: 109: LATCbits.LATC4 = 1;
   789  0424  160E               	bsf	14,4	;volatile
   790                           
   791                           ;main.c: 114: TMR1 = 25536;
   792                           
   793                           ;main.c: 112: while (1) {
   794  0425  3063               	movlw	99
   795  0426  0020               	movlb	0	; select bank0
   796  0427  0097               	movwf	23	;volatile
   797  0428  30C0               	movlw	192
   798  0429  0096               	movwf	22	;volatile
   799                           
   800                           ;main.c: 115: T1CONbits.TMR1ON = 1;
   801  042A  1418               	bsf	24,0	;volatile
   802  042B                     l1167:	
   803                           ;main.c: 117: while (!PIR1bits.TMR1IF) {
   804                           
   805  042B  0020               	movlb	0	; select bank0
   806  042C  1811               	btfsc	17,0	;volatile
   807  042D  2C40               	goto	l73
   808                           
   809                           ;main.c: 118: Servo_Output_OFF();
   810  042E  3185  250A  3184   	fcall	_Servo_Output_OFF
   811                           
   812                           ;main.c: 119: if (TMR1 >= 45536) {
   813  0431  30B1               	movlw	177
   814  0432  0020               	movlb	0	; select bank0
   815  0433  0217               	subwf	23,w	;volatile
   816  0434  30E0               	movlw	224
   817  0435  1903               	skipnz
   818  0436  0216               	subwf	22,w	;volatile
   819  0437  1C03               	skipc
   820  0438  2C2B               	goto	l1167
   821                           
   822                           ;main.c: 120: Renew_Raw_Data();
   823  0439  3183  23CA  3184   	fcall	_Renew_Raw_Data
   824                           
   825                           ;main.c: 121: Calc_Duty();
   826  043C  3184  24A6  3184   	fcall	_Calc_Duty
   827  043F  2C2B               	goto	l1167
   828  0440                     l73:	
   829                           
   830                           ;main.c: 122: };main.c: 123: };main.c: 124: PIR1bits.TMR1IF = 0;
   831  0440  1011               	bcf	17,0	;volatile
   832  0441  2C20               	goto	L1
   833  0442                     __end_of_main:	
   834                           ;main.c: 130: };main.c: 131: return (0);;	Return value of _main is never used
   835                           
   836                           ;main.c: 129: LATCbits.LATC4 = 1;
   837                           
   838                           ;main.c: 128: LATCbits.LATC5 = 1;
   839                           
   840                           ;main.c: 127: LATCbits.LATC6 = 1;
   841                           
   842                           ;main.c: 126: LATCbits.LATC3 = 1;
   843                           
   844                           
   845                           	psect	text1
   846  050A                     __ptext1:	
   847 ;; *************** function _Servo_Output_OFF *****************
   848 ;; Defined at:
   849 ;;		line 156 in file "main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   863 ;;      Params:         0       0       0       0
   864 ;;      Locals:         0       0       0       0
   865 ;;      Temps:          4       0       0       0
   866 ;;      Totals:         4       0       0       0
   867 ;;Total ram usage:        4 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _Servo_Output_OFF
   878  050A                     _Servo_Output_OFF:	
   879                           
   880                           ;main.c: 168: if (TMR1 >= (25536 + port[0].min + servo_duty[1])) LATCbits.LATC3 = 0;
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _Servo_Output_OFF: [wreg-fsr1h+status,2+status,0]
   884  050A  3002               	movlw	2
   885  050B  3E5A               	addlw	(low (_servo_duty| 0))& (0+255)
   886  050C  0086               	movwf	6
   887  050D  0187               	clrf	7
   888  050E  3003               	movlw	3
   889  050F  3EA0               	addlw	(low (_port| 0))& (0+255)
   890  0510  0084               	movwf	4
   891  0511  0185               	clrf	5
   892  0512  3F40               	moviw [0]fsr1
   893  0513  0700               	addwf	0,w
   894  0514  00F0               	movwf	??_Servo_Output_OFF
   895  0515  3101               	addfsr 0,1
   896  0516  3F41               	moviw [1]fsr1
   897  0517  3D00               	addwfc	0,w
   898  0518  00F1               	movwf	??_Servo_Output_OFF+1
   899  0519  0870               	movf	??_Servo_Output_OFF,w
   900  051A  3EC0               	addlw	192
   901  051B  00F2               	movwf	??_Servo_Output_OFF+2
   902  051C  3063               	movlw	99
   903  051D  3D71               	addwfc	??_Servo_Output_OFF+1,w
   904  051E  00F3               	movwf	??_Servo_Output_OFF+3
   905  051F  0873               	movf	??_Servo_Output_OFF+3,w
   906  0520  0020               	movlb	0	; select bank0
   907  0521  0217               	subwf	23,w	;volatile
   908  0522  1D03               	skipz
   909  0523  2D26               	goto	u1085
   910  0524  0872               	movf	??_Servo_Output_OFF+2,w
   911  0525  0216               	subwf	22,w	;volatile
   912  0526                     u1085:	
   913  0526  1C03               	skipc
   914  0527  2D2A               	goto	l1127
   915  0528  0022               	movlb	2	; select bank2
   916  0529  118E               	bcf	14,3	;volatile
   917  052A                     l1127:	
   918                           
   919                           ;main.c: 169: if (TMR1 >= (25536 + port[1].min + servo_duty[2])) LATCbits.LATC6 = 0;
   920  052A  3004               	movlw	4
   921  052B  3E5A               	addlw	(low (_servo_duty| 0))& (0+255)
   922  052C  0086               	movwf	6
   923  052D  0187               	clrf	7
   924  052E  3008               	movlw	8
   925  052F  3EA0               	addlw	(low (_port| 0))& (0+255)
   926  0530  0084               	movwf	4
   927  0531  0185               	clrf	5
   928  0532  3F40               	moviw [0]fsr1
   929  0533  0700               	addwf	0,w
   930  0534  00F0               	movwf	??_Servo_Output_OFF
   931  0535  3101               	addfsr 0,1
   932  0536  3F41               	moviw [1]fsr1
   933  0537  3D00               	addwfc	0,w
   934  0538  00F1               	movwf	??_Servo_Output_OFF+1
   935  0539  0870               	movf	??_Servo_Output_OFF,w
   936  053A  3EC0               	addlw	192
   937  053B  00F2               	movwf	??_Servo_Output_OFF+2
   938  053C  3063               	movlw	99
   939  053D  3D71               	addwfc	??_Servo_Output_OFF+1,w
   940  053E  00F3               	movwf	??_Servo_Output_OFF+3
   941  053F  0873               	movf	??_Servo_Output_OFF+3,w
   942  0540  0020               	movlb	0	; select bank0
   943  0541  0217               	subwf	23,w	;volatile
   944  0542  1D03               	skipz
   945  0543  2D46               	goto	u1095
   946  0544  0872               	movf	??_Servo_Output_OFF+2,w
   947  0545  0216               	subwf	22,w	;volatile
   948  0546                     u1095:	
   949  0546  1C03               	skipc
   950  0547  2D4A               	goto	l1131
   951  0548  0022               	movlb	2	; select bank2
   952  0549  130E               	bcf	14,6	;volatile
   953  054A                     l1131:	
   954                           
   955                           ;main.c: 170: if (TMR1 >= (25536 + port[2].min + servo_duty[3])) LATCbits.LATC5 = 0;
   956  054A  3006               	movlw	6
   957  054B  3E5A               	addlw	(low (_servo_duty| 0))& (0+255)
   958  054C  0086               	movwf	6
   959  054D  0187               	clrf	7
   960  054E  300D               	movlw	13
   961  054F  3EA0               	addlw	(low (_port| 0))& (0+255)
   962  0550  0084               	movwf	4
   963  0551  0185               	clrf	5
   964  0552  3F40               	moviw [0]fsr1
   965  0553  0700               	addwf	0,w
   966  0554  00F0               	movwf	??_Servo_Output_OFF
   967  0555  3101               	addfsr 0,1
   968  0556  3F41               	moviw [1]fsr1
   969  0557  3D00               	addwfc	0,w
   970  0558  00F1               	movwf	??_Servo_Output_OFF+1
   971  0559  0870               	movf	??_Servo_Output_OFF,w
   972  055A  3EC0               	addlw	192
   973  055B  00F2               	movwf	??_Servo_Output_OFF+2
   974  055C  3063               	movlw	99
   975  055D  3D71               	addwfc	??_Servo_Output_OFF+1,w
   976  055E  00F3               	movwf	??_Servo_Output_OFF+3
   977  055F  0873               	movf	??_Servo_Output_OFF+3,w
   978  0560  0020               	movlb	0	; select bank0
   979  0561  0217               	subwf	23,w	;volatile
   980  0562  1D03               	skipz
   981  0563  2D66               	goto	u1105
   982  0564  0872               	movf	??_Servo_Output_OFF+2,w
   983  0565  0216               	subwf	22,w	;volatile
   984  0566                     u1105:	
   985  0566  1C03               	skipc
   986  0567  2D6A               	goto	l1135
   987  0568  0022               	movlb	2	; select bank2
   988  0569  128E               	bcf	14,5	;volatile
   989  056A                     l1135:	
   990                           
   991                           ;main.c: 171: if (TMR1 >= (25536 + port[3].min + servo_duty[4])) LATCbits.LATC4 = 0;
   992  056A  3008               	movlw	8
   993  056B  3E5A               	addlw	(low (_servo_duty| 0))& (0+255)
   994  056C  0086               	movwf	6
   995  056D  0187               	clrf	7
   996  056E  3012               	movlw	18
   997  056F  3EA0               	addlw	(low (_port| 0))& (0+255)
   998  0570  0084               	movwf	4
   999  0571  0185               	clrf	5
  1000  0572  3F40               	moviw [0]fsr1
  1001  0573  0700               	addwf	0,w
  1002  0574  00F0               	movwf	??_Servo_Output_OFF
  1003  0575  3101               	addfsr 0,1
  1004  0576  3F41               	moviw [1]fsr1
  1005  0577  3D00               	addwfc	0,w
  1006  0578  00F1               	movwf	??_Servo_Output_OFF+1
  1007  0579  0870               	movf	??_Servo_Output_OFF,w
  1008  057A  3EC0               	addlw	192
  1009  057B  00F2               	movwf	??_Servo_Output_OFF+2
  1010  057C  3063               	movlw	99
  1011  057D  3D71               	addwfc	??_Servo_Output_OFF+1,w
  1012  057E  00F3               	movwf	??_Servo_Output_OFF+3
  1013  057F  0873               	movf	??_Servo_Output_OFF+3,w
  1014  0580  0020               	movlb	0	; select bank0
  1015  0581  0217               	subwf	23,w	;volatile
  1016  0582  1D03               	skipz
  1017  0583  2D86               	goto	u1115
  1018  0584  0872               	movf	??_Servo_Output_OFF+2,w
  1019  0585  0216               	subwf	22,w	;volatile
  1020  0586                     u1115:	
  1021  0586  1C03               	skipc
  1022  0587  0008               	return
  1023  0588  0022               	movlb	2	; select bank2
  1024  0589  120E               	bcf	14,4	;volatile
  1025  058A  0008               	return
  1026  058B                     __end_of_Servo_Output_OFF:	
  1027                           ;main.c: 173: else;
  1028                           
  1029                           
  1030                           	psect	text2
  1031  03CA                     __ptext2:	
  1032 ;; *************** function _Renew_Raw_Data *****************
  1033 ;; Defined at:
  1034 ;;		line 134 in file "main.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1048 ;;      Params:         0       0       0       0
  1049 ;;      Locals:         0       0       0       0
  1050 ;;      Temps:          4       0       0       0
  1051 ;;      Totals:         4       0       0       0
  1052 ;;Total ram usage:        4 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _Renew_Raw_Data
  1063  03CA                     _Renew_Raw_Data:	
  1064                           
  1065                           ;main.c: 139: servo_raw_data[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (PORTCbits.R
      +                          C0))] = PORTA;
  1066                           
  1067                           ;incstack = 0
  1068                           ; Regs used in _Renew_Raw_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
  1069  03CA  0020               	movlb	0	; select bank0
  1070  03CB  080C               	movf	12,w	;volatile
  1071  03CC  00F0               	movwf	??_Renew_Raw_Data
  1072  03CD  080E               	movf	14,w	;volatile
  1073  03CE  3901               	andlw	1
  1074  03CF  00F1               	movwf	??_Renew_Raw_Data+1
  1075  03D0  0C0E               	rrf	14,w	;volatile
  1076  03D1  3901               	andlw	1
  1077  03D2  00F2               	movwf	??_Renew_Raw_Data+2
  1078  03D3  3001               	movlw	1
  1079  03D4                     u1025:	
  1080  03D4  35F2               	lslf	??_Renew_Raw_Data+2,f
  1081  03D5  0B89               	decfsz	9,f
  1082  03D6  2BD4               	goto	u1025
  1083  03D7  0C0E               	rrf	14,w	;volatile
  1084  03D8  0C89               	rrf	9,f
  1085  03D9  3901               	andlw	1
  1086  03DA  00F3               	movwf	??_Renew_Raw_Data+3
  1087  03DB  3001               	movlw	1
  1088  03DC                     u1035:	
  1089  03DC  35F3               	lslf	??_Renew_Raw_Data+3,f
  1090  03DD  3EFF               	addlw	-1
  1091  03DE  1D03               	skipz
  1092  03DF  2BDC               	goto	u1035
  1093  03E0  3573               	lslf	??_Renew_Raw_Data+3,w
  1094  03E1  0472               	iorwf	??_Renew_Raw_Data+2,w
  1095  03E2  0471               	iorwf	??_Renew_Raw_Data+1,w
  1096  03E3  3E64               	addlw	(low (_servo_raw_data| 0))& (0+255)
  1097  03E4  0086               	movwf	6
  1098  03E5  0187               	clrf	7
  1099  03E6  0870               	movf	??_Renew_Raw_Data,w
  1100  03E7  0081               	movwf	1
  1101                           
  1102                           ;main.c: 141: data_renew[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (PORTCbits.RC0))
      +                          ] ^= 1;
  1103  03E8  3001               	movlw	1
  1104  03E9  00F0               	movwf	??_Renew_Raw_Data
  1105  03EA  080E               	movf	14,w	;volatile
  1106  03EB  3901               	andlw	1
  1107  03EC  00F1               	movwf	??_Renew_Raw_Data+1
  1108  03ED  0C0E               	rrf	14,w	;volatile
  1109  03EE  3901               	andlw	1
  1110  03EF  00F2               	movwf	??_Renew_Raw_Data+2
  1111  03F0  3001               	movlw	1
  1112  03F1                     u1045:	
  1113  03F1  35F2               	lslf	??_Renew_Raw_Data+2,f
  1114  03F2  0B89               	decfsz	9,f
  1115  03F3  2BF1               	goto	u1045
  1116  03F4  0C0E               	rrf	14,w	;volatile
  1117  03F5  0C89               	rrf	9,f
  1118  03F6  3901               	andlw	1
  1119  03F7  00F3               	movwf	??_Renew_Raw_Data+3
  1120  03F8  3001               	movlw	1
  1121  03F9                     u1055:	
  1122  03F9  35F3               	lslf	??_Renew_Raw_Data+3,f
  1123  03FA  3EFF               	addlw	-1
  1124  03FB  1D03               	skipz
  1125  03FC  2BF9               	goto	u1055
  1126  03FD  3573               	lslf	??_Renew_Raw_Data+3,w
  1127  03FE  0472               	iorwf	??_Renew_Raw_Data+2,w
  1128  03FF  0471               	iorwf	??_Renew_Raw_Data+1,w
  1129  0400  3E69               	addlw	(low (_data_renew| 0))& (0+255)
  1130  0401  0086               	movwf	6
  1131  0402  0187               	clrf	7
  1132  0403  0870               	movf	??_Renew_Raw_Data,w
  1133  0404  0681               	xorwf	1,f
  1134  0405  0008               	return
  1135  0406                     __end_of_Renew_Raw_Data:	
  1136                           
  1137                           	psect	text3
  1138  0382                     __ptext3:	
  1139 ;; *************** function _Initialize *****************
  1140 ;; Defined at:
  1141 ;;		line 180 in file "main.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1155 ;;      Params:         0       0       0       0
  1156 ;;      Locals:         0       0       0       0
  1157 ;;      Temps:          0       0       0       0
  1158 ;;      Totals:         0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    2
  1162 ;; This function calls:
  1163 ;;		_Oscillator_Initialize
  1164 ;;		_Pin_Initialize
  1165 ;;		_Servo_Initialize
  1166 ;;		_Timer_Initialize
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function _Initialize
  1174  0382                     _Initialize:	
  1175                           
  1176                           ;main.c: 181: Oscillator_Initialize();
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1180  0382  3183  2371  3183   	fcall	_Oscillator_Initialize
  1181                           
  1182                           ;main.c: 182: Pin_Initialize();
  1183  0385  3183  239F  3183   	fcall	_Pin_Initialize
  1184                           
  1185                           ;main.c: 183: Timer_Initialize();
  1186  0388  3183  237B  3183   	fcall	_Timer_Initialize
  1187                           
  1188                           ;main.c: 184: Servo_Initialize();
  1189  038B  3186  26C6         	fcall	_Servo_Initialize
  1190  038D  0008               	return
  1191  038E                     __end_of_Initialize:	
  1192                           
  1193                           	psect	text4
  1194  037B                     __ptext4:	
  1195 ;; *************** function _Timer_Initialize *****************
  1196 ;; Defined at:
  1197 ;;		line 215 in file "main.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		status,2
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1211 ;;      Params:         0       0       0       0
  1212 ;;      Locals:         0       0       0       0
  1213 ;;      Temps:          0       0       0       0
  1214 ;;      Totals:         0       0       0       0
  1215 ;;Total ram usage:        0 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_Initialize
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           
  1225                           ;psect for function _Timer_Initialize
  1226  037B                     _Timer_Initialize:	
  1227                           
  1228                           ;main.c: 218: T1CON = 0x00;
  1229                           
  1230                           ;incstack = 0
  1231                           ; Regs used in _Timer_Initialize: [status,2]
  1232  037B  0020               	movlb	0	; select bank0
  1233  037C  0198               	clrf	24	;volatile
  1234                           
  1235                           ;main.c: 221: INTCONbits.GIE = 0;
  1236  037D  138B               	bcf	11,7	;volatile
  1237                           
  1238                           ;main.c: 222: INTCONbits.PEIE = 0;
  1239  037E  130B               	bcf	11,6	;volatile
  1240                           
  1241                           ;main.c: 224: PIE1bits.TMR1IE = 0;
  1242  037F  0021               	movlb	1	; select bank1
  1243  0380  1011               	bcf	17,0	;volatile
  1244  0381  0008               	return
  1245  0382                     __end_of_Timer_Initialize:	
  1246                           
  1247                           	psect	text5
  1248  06C6                     __ptext5:	
  1249 ;; *************** function _Servo_Initialize *****************
  1250 ;; Defined at:
  1251 ;;		line 227 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  num            24    0[BANK0 ] const int [6][2]
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1265 ;;      Params:         0       0       0       0
  1266 ;;      Locals:         0      24       0       0
  1267 ;;      Temps:          2       0       0       0
  1268 ;;      Totals:         2      24       0       0
  1269 ;;Total ram usage:       26 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    1
  1272 ;; This function calls:
  1273 ;;		___bmul
  1274 ;; This function is called by:
  1275 ;;		_Initialize
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _Servo_Initialize
  1281  06C6                     _Servo_Initialize:	
  1282                           
  1283                           ;main.c: 228: const int num[2][6] = {;main.c: 229: {0, 0, 0, 1, 1, 2},;main.c: 230: {0, 
      +                          1, 2, 1, 2, 2};main.c: 231: };
  1284                           
  1285                           ;incstack = 0
  1286                           ; Regs used in _Servo_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1287  06C6  3000               	movlw	low (Servo_Initialize@F2760| (0+32768))
  1288  06C7  0084               	movwf	4
  1289  06C8  3088               	movlw	high (Servo_Initialize@F2760| (0+32768))
  1290  06C9  0085               	movwf	5
  1291  06CA  3020               	movlw	low Servo_Initialize@num
  1292  06CB  0086               	movwf	6
  1293  06CC  3000               	movlw	high Servo_Initialize@num
  1294  06CD  0087               	movwf	7
  1295  06CE  3018               	movlw	24
  1296  06CF  00F4               	movwf	??_Servo_Initialize
  1297  06D0                     u740:	
  1298  06D0  0012               	moviw fsr0++
  1299  06D1  001E               	movwi fsr1++
  1300  06D2  0BF4               	decfsz	??_Servo_Initialize,f
  1301  06D3  2ED0               	goto	u740
  1302                           
  1303                           ;main.c: 234: param[0].conv = 667E-8;
  1304  06D4  30CF               	movlw	207
  1305  06D5  0020               	movlb	0	; select bank0
  1306  06D6  00CB               	movwf	_param
  1307  06D7  30DF               	movlw	223
  1308  06D8  00CC               	movwf	_param+1
  1309  06D9  3036               	movlw	54
  1310  06DA  00CD               	movwf	_param+2
  1311                           
  1312                           ;main.c: 235: param[0].min = 1800;
  1313  06DB  3008               	movlw	8
  1314  06DC  00CE               	movwf	_param+3
  1315  06DD  3007               	movlw	7
  1316  06DE  00CF               	movwf	_param+4
  1317                           
  1318                           ;main.c: 237: param[1].conv = 1056E-8;
  1319  06DF  302B               	movlw	43
  1320  06E0  00D0               	movwf	_param+5
  1321  06E1  3031               	movlw	49
  1322  06E2  00D1               	movwf	_param+6
  1323  06E3  3037               	movlw	55
  1324  06E4  00D2               	movwf	_param+7
  1325                           
  1326                           ;main.c: 238: param[1].min = 1000;
  1327  06E5  30E8               	movlw	232
  1328  06E6  00D3               	movwf	_param+8
  1329  06E7  3003               	movlw	3
  1330  06E8  00D4               	movwf	_param+9
  1331                           
  1332                           ;main.c: 240: param[2].conv = 5926E-9;
  1333  06E9  30D8               	movlw	216
  1334  06EA  00D5               	movwf	_param+10
  1335  06EB  30C6               	movlw	198
  1336  06EC  00D6               	movwf	_param+11
  1337  06ED  3036               	movlw	54
  1338  06EE  00D7               	movwf	_param+12
  1339                           
  1340                           ;main.c: 241: param[2].min = 1400;
  1341  06EF  3078               	movlw	120
  1342  06F0  00D8               	movwf	_param+13
  1343  06F1  3005               	movlw	5
  1344  06F2  00D9               	movwf	_param+14
  1345                           
  1346                           ;main.c: 245: port[0].conv = param[num[0][(PORTB&0b00000111)]].conv;
  1347  06F3  3005               	movlw	5
  1348  06F4  00F4               	movwf	??_Servo_Initialize
  1349  06F5  0874               	movf	??_Servo_Initialize,w
  1350  06F6  00F0               	movwf	___bmul@multiplicand
  1351  06F7  080D               	movf	13,w	;volatile
  1352  06F8  3907               	andlw	7
  1353  06F9  0709               	addwf	9,w
  1354  06FA  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1355  06FB  0086               	movwf	6
  1356  06FC  0187               	clrf	7
  1357  06FD  0801               	movf	1,w
  1358  06FE  3183  238E  3186   	fcall	___bmul
  1359  0701  3E4B               	addlw	(low (_param| 0))& (0+255)
  1360  0702  0086               	movwf	6
  1361  0703  0187               	clrf	7
  1362  0704  3F40               	moviw [0]fsr1
  1363  0705  0021               	movlb	1	; select bank1
  1364  0706  00A0               	movwf	_port^(0+128)
  1365  0707  3F41               	moviw [1]fsr1
  1366  0708  00A1               	movwf	(_port+1)^(0+128)
  1367  0709  3F42               	moviw [2]fsr1
  1368  070A  00A2               	movwf	(_port+2)^(0+128)
  1369                           
  1370                           ;main.c: 246: port[0].min = param[num[0][(PORTB&0b00000111)]].min;
  1371  070B  3005               	movlw	5
  1372  070C  00F4               	movwf	??_Servo_Initialize
  1373  070D  0874               	movf	??_Servo_Initialize,w
  1374  070E  00F0               	movwf	___bmul@multiplicand
  1375  070F  0020               	movlb	0	; select bank0
  1376  0710  080D               	movf	13,w	;volatile
  1377  0711  3907               	andlw	7
  1378  0712  0709               	addwf	9,w
  1379  0713  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1380  0714  0086               	movwf	6
  1381  0715  0187               	clrf	7
  1382  0716  0801               	movf	1,w
  1383  0717  3183  238E  3186   	fcall	___bmul
  1384  071A  3E03               	addlw	3
  1385  071B  3E4B               	addlw	(low (_param| 0))& (0+255)
  1386  071C  0086               	movwf	6
  1387  071D  0187               	clrf	7
  1388  071E  3F40               	moviw [0]fsr1
  1389  071F  0021               	movlb	1	; select bank1
  1390  0720  00A3               	movwf	(_port^(0+128)+3)
  1391  0721  3F41               	moviw [1]fsr1
  1392  0722  00A4               	movwf	((_port+1)^(0+128)+3)
  1393                           
  1394                           ;main.c: 248: port[1].conv = param[num[1][(PORTB&0b00000111)]].conv;
  1395  0723  3005               	movlw	5
  1396  0724  00F4               	movwf	??_Servo_Initialize
  1397  0725  0874               	movf	??_Servo_Initialize,w
  1398  0726  00F0               	movwf	___bmul@multiplicand
  1399  0727  0020               	movlb	0	; select bank0
  1400  0728  080D               	movf	13,w	;volatile
  1401  0729  3907               	andlw	7
  1402  072A  0709               	addwf	9,w
  1403  072B  3E0C               	addlw	12
  1404  072C  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1405  072D  0086               	movwf	6
  1406  072E  0187               	clrf	7
  1407  072F  0801               	movf	1,w
  1408  0730  3183  238E  3186   	fcall	___bmul
  1409  0733  3E4B               	addlw	(low (_param| 0))& (0+255)
  1410  0734  0086               	movwf	6
  1411  0735  0187               	clrf	7
  1412  0736  3F40               	moviw [0]fsr1
  1413  0737  0021               	movlb	1	; select bank1
  1414  0738  00A5               	movwf	(_port^(0+128)+5)
  1415  0739  3F41               	moviw [1]fsr1
  1416  073A  00A6               	movwf	((_port+1)^(0+128)+5)
  1417  073B  3F42               	moviw [2]fsr1
  1418  073C  00A7               	movwf	((_port+2)^(0+128)+5)
  1419                           
  1420                           ;main.c: 249: port[1].min = param[num[1][(PORTB&0b00000111)]].min;
  1421  073D  3005               	movlw	5
  1422  073E  00F4               	movwf	??_Servo_Initialize
  1423  073F  0874               	movf	??_Servo_Initialize,w
  1424  0740  00F0               	movwf	___bmul@multiplicand
  1425  0741  0020               	movlb	0	; select bank0
  1426  0742  080D               	movf	13,w	;volatile
  1427  0743  3907               	andlw	7
  1428  0744  0709               	addwf	9,w
  1429  0745  3E0C               	addlw	12
  1430  0746  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1431  0747  0086               	movwf	6
  1432  0748  0187               	clrf	7
  1433  0749  0801               	movf	1,w
  1434  074A  3183  238E  3186   	fcall	___bmul
  1435  074D  3E03               	addlw	3
  1436  074E  3E4B               	addlw	(low (_param| 0))& (0+255)
  1437  074F  0086               	movwf	6
  1438  0750  0187               	clrf	7
  1439  0751  3F40               	moviw [0]fsr1
  1440  0752  0021               	movlb	1	; select bank1
  1441  0753  00A8               	movwf	(_port^(0+128)+8)
  1442  0754  3F41               	moviw [1]fsr1
  1443  0755  00A9               	movwf	((_port+1)^(0+128)+8)
  1444                           
  1445                           ;main.c: 251: port[2].conv = param[num[0][((PORTB&0b00111000)>>3)]].conv;
  1446  0756  3005               	movlw	5
  1447  0757  00F4               	movwf	??_Servo_Initialize
  1448  0758  0874               	movf	??_Servo_Initialize,w
  1449  0759  00F0               	movwf	___bmul@multiplicand
  1450  075A  0020               	movlb	0	; select bank0
  1451  075B  080D               	movf	13,w	;volatile
  1452  075C  00F5               	movwf	??_Servo_Initialize+1
  1453  075D  3003               	movlw	3
  1454  075E                     u755:	
  1455  075E  36F5               	lsrf	??_Servo_Initialize+1,f
  1456  075F  0B89               	decfsz	9,f
  1457  0760  2F5E               	goto	u755
  1458  0761  0875               	movf	??_Servo_Initialize+1,w
  1459  0762  3907               	andlw	7
  1460  0763  0709               	addwf	9,w
  1461  0764  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1462  0765  0086               	movwf	6
  1463  0766  0187               	clrf	7
  1464  0767  0801               	movf	1,w
  1465  0768  3183  238E  3186   	fcall	___bmul
  1466  076B  3E4B               	addlw	(low (_param| 0))& (0+255)
  1467  076C  0086               	movwf	6
  1468  076D  0187               	clrf	7
  1469  076E  3F40               	moviw [0]fsr1
  1470  076F  0021               	movlb	1	; select bank1
  1471  0770  00AA               	movwf	(_port^(0+128)+10)
  1472  0771  3F41               	moviw [1]fsr1
  1473  0772  00AB               	movwf	((_port+1)^(0+128)+10)
  1474  0773  3F42               	moviw [2]fsr1
  1475  0774  00AC               	movwf	((_port+2)^(0+128)+10)
  1476                           
  1477                           ;main.c: 252: port[2].min = param[num[0][((PORTB&0b00111000)>>3)]].min;
  1478  0775  3005               	movlw	5
  1479  0776  00F4               	movwf	??_Servo_Initialize
  1480  0777  0874               	movf	??_Servo_Initialize,w
  1481  0778  00F0               	movwf	___bmul@multiplicand
  1482  0779  0020               	movlb	0	; select bank0
  1483  077A  080D               	movf	13,w	;volatile
  1484  077B  00F5               	movwf	??_Servo_Initialize+1
  1485  077C  3003               	movlw	3
  1486  077D                     u765:	
  1487  077D  36F5               	lsrf	??_Servo_Initialize+1,f
  1488  077E  0B89               	decfsz	9,f
  1489  077F  2F7D               	goto	u765
  1490  0780  0875               	movf	??_Servo_Initialize+1,w
  1491  0781  3907               	andlw	7
  1492  0782  0709               	addwf	9,w
  1493  0783  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1494  0784  0086               	movwf	6
  1495  0785  0187               	clrf	7
  1496  0786  0801               	movf	1,w
  1497  0787  3183  238E  3186   	fcall	___bmul
  1498  078A  3E03               	addlw	3
  1499  078B  3E4B               	addlw	(low (_param| 0))& (0+255)
  1500  078C  0086               	movwf	6
  1501  078D  0187               	clrf	7
  1502  078E  3F40               	moviw [0]fsr1
  1503  078F  0021               	movlb	1	; select bank1
  1504  0790  00AD               	movwf	(_port^(0+128)+13)
  1505  0791  3F41               	moviw [1]fsr1
  1506  0792  00AE               	movwf	((_port+1)^(0+128)+13)
  1507                           
  1508                           ;main.c: 254: port[3].conv = param[num[1][((PORTB&0b00111000)>>3)]].conv;
  1509  0793  3005               	movlw	5
  1510  0794  00F4               	movwf	??_Servo_Initialize
  1511  0795  0874               	movf	??_Servo_Initialize,w
  1512  0796  00F0               	movwf	___bmul@multiplicand
  1513  0797  0020               	movlb	0	; select bank0
  1514  0798  080D               	movf	13,w	;volatile
  1515  0799  00F5               	movwf	??_Servo_Initialize+1
  1516  079A  3003               	movlw	3
  1517  079B                     u775:	
  1518  079B  36F5               	lsrf	??_Servo_Initialize+1,f
  1519  079C  0B89               	decfsz	9,f
  1520  079D  2F9B               	goto	u775
  1521  079E  0875               	movf	??_Servo_Initialize+1,w
  1522  079F  3907               	andlw	7
  1523  07A0  0709               	addwf	9,w
  1524  07A1  3E0C               	addlw	12
  1525  07A2  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1526  07A3  0086               	movwf	6
  1527  07A4  0187               	clrf	7
  1528  07A5  0801               	movf	1,w
  1529  07A6  3183  238E  3186   	fcall	___bmul
  1530  07A9  3E4B               	addlw	(low (_param| 0))& (0+255)
  1531  07AA  0086               	movwf	6
  1532  07AB  0187               	clrf	7
  1533  07AC  3F40               	moviw [0]fsr1
  1534  07AD  0021               	movlb	1	; select bank1
  1535  07AE  00AF               	movwf	(_port^(0+128)+15)
  1536  07AF  3F41               	moviw [1]fsr1
  1537  07B0  00B0               	movwf	((_port+1)^(0+128)+15)
  1538  07B1  3F42               	moviw [2]fsr1
  1539  07B2  00B1               	movwf	((_port+2)^(0+128)+15)
  1540                           
  1541                           ;main.c: 255: port[3].min = param[num[1][((PORTB&0b00111000)>>3)]].min;
  1542  07B3  3005               	movlw	5
  1543  07B4  00F4               	movwf	??_Servo_Initialize
  1544  07B5  0874               	movf	??_Servo_Initialize,w
  1545  07B6  00F0               	movwf	___bmul@multiplicand
  1546  07B7  0020               	movlb	0	; select bank0
  1547  07B8  080D               	movf	13,w	;volatile
  1548  07B9  00F5               	movwf	??_Servo_Initialize+1
  1549  07BA  3003               	movlw	3
  1550  07BB                     u785:	
  1551  07BB  36F5               	lsrf	??_Servo_Initialize+1,f
  1552  07BC  0B89               	decfsz	9,f
  1553  07BD  2FBB               	goto	u785
  1554  07BE  0875               	movf	??_Servo_Initialize+1,w
  1555  07BF  3907               	andlw	7
  1556  07C0  0709               	addwf	9,w
  1557  07C1  3E0C               	addlw	12
  1558  07C2  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1559  07C3  0086               	movwf	6
  1560  07C4  0187               	clrf	7
  1561  07C5  0801               	movf	1,w
  1562  07C6  3183  238E  3186   	fcall	___bmul
  1563  07C9  3E03               	addlw	3
  1564  07CA  3E4B               	addlw	(low (_param| 0))& (0+255)
  1565  07CB  0086               	movwf	6
  1566  07CC  0187               	clrf	7
  1567  07CD  3F40               	moviw [0]fsr1
  1568  07CE  0021               	movlb	1	; select bank1
  1569  07CF  00B2               	movwf	(_port^(0+128)+18)
  1570  07D0  3F41               	moviw [1]fsr1
  1571  07D1  00B3               	movwf	((_port+1)^(0+128)+18)
  1572                           
  1573                           ;main.c: 257: if(num[0][(PORTB&0b00000111)]==2)LATCbits.LATC7=1;
  1574  07D2  0020               	movlb	0	; select bank0
  1575  07D3  080D               	movf	13,w	;volatile
  1576  07D4  3907               	andlw	7
  1577  07D5  0709               	addwf	9,w
  1578  07D6  3E20               	addlw	(low (Servo_Initialize@num| 0))& (0+255)
  1579  07D7  0086               	movwf	6
  1580  07D8  0187               	clrf	7
  1581  07D9  0016               	moviw fsr1++
  1582  07DA  3A02               	xorlw	2
  1583  07DB  00F4               	movwf	??_Servo_Initialize
  1584  07DC  0016               	moviw fsr1++
  1585  07DD  04F4               	iorwf	??_Servo_Initialize,f
  1586  07DE  1D03               	btfss	3,2
  1587  07DF  2FE3               	goto	l109
  1588  07E0  0022               	movlb	2	; select bank2
  1589  07E1  178E               	bsf	14,7	;volatile
  1590  07E2  0008               	return
  1591  07E3                     l109:	
  1592                           
  1593                           ;main.c: 258: else LATCbits.LATC7=0;
  1594  07E3  0022               	movlb	2	; select bank2
  1595  07E4  138E               	bcf	14,7	;volatile
  1596  07E5  0008               	return
  1597  07E6                     __end_of_Servo_Initialize:	
  1598                           
  1599                           	psect	text6
  1600  039F                     __ptext6:	
  1601 ;; *************** function _Pin_Initialize *****************
  1602 ;; Defined at:
  1603 ;;		line 191 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1617 ;;      Params:         0       0       0       0
  1618 ;;      Locals:         0       0       0       0
  1619 ;;      Temps:          0       0       0       0
  1620 ;;      Totals:         0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_Initialize
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _Pin_Initialize
  1632  039F                     _Pin_Initialize:	
  1633                           
  1634                           ;main.c: 194: ANSELA = 0x00;
  1635                           
  1636                           ;incstack = 0
  1637                           ; Regs used in _Pin_Initialize: [wreg+status,2]
  1638  039F  0023               	movlb	3	; select bank3
  1639  03A0  018C               	clrf	12	;volatile
  1640                           
  1641                           ;main.c: 195: ANSELB = 0x00;
  1642  03A1  018D               	clrf	13	;volatile
  1643                           
  1644                           ;main.c: 197: TRISA = 0xFF;
  1645  03A2  30FF               	movlw	255
  1646  03A3  0021               	movlb	1	; select bank1
  1647  03A4  008C               	movwf	12	;volatile
  1648                           
  1649                           ;main.c: 198: TRISB = 0xFF;
  1650  03A5  30FF               	movlw	255
  1651  03A6  008D               	movwf	13	;volatile
  1652                           
  1653                           ;main.c: 201: TRISCbits.TRISC0 = 1;
  1654  03A7  140E               	bsf	14,0	;volatile
  1655                           
  1656                           ;main.c: 202: TRISCbits.TRISC1 = 1;
  1657  03A8  148E               	bsf	14,1	;volatile
  1658                           
  1659                           ;main.c: 203: TRISCbits.TRISC2 = 1;
  1660  03A9  150E               	bsf	14,2	;volatile
  1661                           
  1662                           ;main.c: 206: TRISCbits.TRISC3 = 0;
  1663  03AA  118E               	bcf	14,3	;volatile
  1664                           
  1665                           ;main.c: 207: TRISCbits.TRISC4 = 0;
  1666  03AB  120E               	bcf	14,4	;volatile
  1667                           
  1668                           ;main.c: 208: TRISCbits.TRISC5 = 0;
  1669  03AC  128E               	bcf	14,5	;volatile
  1670                           
  1671                           ;main.c: 209: TRISCbits.TRISC6 = 0;
  1672  03AD  130E               	bcf	14,6	;volatile
  1673                           
  1674                           ;main.c: 212: TRISCbits.TRISC7 = 0;
  1675  03AE  138E               	bcf	14,7	;volatile
  1676  03AF  0008               	return
  1677  03B0                     __end_of_Pin_Initialize:	
  1678                           
  1679                           	psect	text7
  1680  0371                     __ptext7:	
  1681 ;; *************** function _Oscillator_Initialize *****************
  1682 ;; Defined at:
  1683 ;;		line 187 in file "main.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1697 ;;      Params:         0       0       0       0
  1698 ;;      Locals:         0       0       0       0
  1699 ;;      Temps:          0       0       0       0
  1700 ;;      Totals:         0       0       0       0
  1701 ;;Total ram usage:        0 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_Initialize
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _Oscillator_Initialize
  1712  0371                     _Oscillator_Initialize:	
  1713                           
  1714                           ;main.c: 188: OSCCON = 0x73;
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _Oscillator_Initialize: [wreg]
  1718  0371  3073               	movlw	115
  1719  0372  0021               	movlb	1	; select bank1
  1720  0373  0099               	movwf	25	;volatile
  1721  0374  0008               	return
  1722  0375                     __end_of_Oscillator_Initialize:	
  1723                           
  1724                           	psect	text8
  1725  04A6                     __ptext8:	
  1726 ;; *************** function _Calc_Duty *****************
  1727 ;; Defined at:
  1728 ;;		line 144 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  i               2   37[BANK0 ] int 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1742 ;;      Params:         0       0       0       0
  1743 ;;      Locals:         0       5       0       0
  1744 ;;      Temps:          1       0       0       0
  1745 ;;      Totals:         1       5       0       0
  1746 ;;Total ram usage:        6 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    2
  1749 ;; This function calls:
  1750 ;;		___bmul
  1751 ;;		___ftmul
  1752 ;;		___fttol
  1753 ;;		___lbtoft
  1754 ;; This function is called by:
  1755 ;;		_main
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function _Calc_Duty
  1761  04A6                     _Calc_Duty:	
  1762                           
  1763                           ;main.c: 145: int i;;main.c: 149: for (i = 1; i < 5; i++) {
  1764                           
  1765                           ;incstack = 0
  1766                           ; Regs used in _Calc_Duty: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1767  04A6  3001               	movlw	1
  1768  04A7  0020               	movlb	0	; select bank0
  1769  04A8  00C5               	movwf	Calc_Duty@i
  1770  04A9  3000               	movlw	0
  1771  04AA  00C6               	movwf	Calc_Duty@i+1
  1772  04AB                     L2:	
  1773  04AB  0846               	movf	Calc_Duty@i+1,w
  1774  04AC  3A80               	xorlw	128
  1775  04AD  00FC               	movwf	??_Calc_Duty
  1776  04AE  3080               	movlw	128
  1777  04AF  027C               	subwf	??_Calc_Duty,w
  1778  04B0  1D03               	skipz
  1779  04B1  2CB4               	goto	u1065
  1780  04B2  3005               	movlw	5
  1781  04B3  0245               	subwf	Calc_Duty@i,w
  1782  04B4                     u1065:	
  1783  04B4  1803               	btfsc	3,0
  1784  04B5  0008               	return
  1785                           
  1786                           ;main.c: 151: servo_duty[i] = ((servo_raw_data[i] * port[i - 1].conv) * 2000000);
  1787  04B6  0020               	movlb	0	; select bank0
  1788  04B7  0845               	movf	Calc_Duty@i,w
  1789  04B8  3E64               	addlw	(low (_servo_raw_data| 0))& (0+255)
  1790  04B9  0086               	movwf	6
  1791  04BA  0187               	clrf	7
  1792  04BB  0801               	movf	1,w
  1793  04BC  3183  23B0  3184   	fcall	___lbtoft
  1794  04BF  0878               	movf	?___lbtoft,w
  1795  04C0  0020               	movlb	0	; select bank0
  1796  04C1  00A7               	movwf	___ftmul@f2
  1797  04C2  0879               	movf	?___lbtoft+1,w
  1798  04C3  00A8               	movwf	___ftmul@f2+1
  1799  04C4  087A               	movf	?___lbtoft+2,w
  1800  04C5  00A9               	movwf	___ftmul@f2+2
  1801  04C6  3005               	movlw	5
  1802  04C7  00FC               	movwf	??_Calc_Duty
  1803  04C8  087C               	movf	??_Calc_Duty,w
  1804  04C9  00F0               	movwf	___bmul@multiplicand
  1805  04CA  0845               	movf	Calc_Duty@i,w
  1806  04CB  3EFF               	addlw	255
  1807  04CC  3183  238E  3184   	fcall	___bmul
  1808  04CF  3EA0               	addlw	(low (_port| 0))& (0+255)
  1809  04D0  0086               	movwf	6
  1810  04D1  0187               	clrf	7
  1811  04D2  3F40               	moviw [0]fsr1
  1812  04D3  0020               	movlb	0	; select bank0
  1813  04D4  00A4               	movwf	___ftmul@f1
  1814  04D5  3F41               	moviw [1]fsr1
  1815  04D6  00A5               	movwf	___ftmul@f1+1
  1816  04D7  3F42               	moviw [2]fsr1
  1817  04D8  00A6               	movwf	___ftmul@f1+2
  1818  04D9  3186  2612  3184   	fcall	___ftmul
  1819  04DC  0020               	movlb	0	; select bank0
  1820  04DD  0824               	movf	?___ftmul,w
  1821  04DE  00C2               	movwf	_Calc_Duty$818
  1822  04DF  0825               	movf	?___ftmul+1,w
  1823  04E0  00C3               	movwf	_Calc_Duty$818+1
  1824  04E1  0826               	movf	?___ftmul+2,w
  1825  04E2  00C4               	movwf	_Calc_Duty$818+2
  1826                           
  1827                           ;main.c: 151: servo_duty[i] = ((servo_raw_data[i] * port[i - 1].conv) * 2000000);
  1828  04E3  0842               	movf	_Calc_Duty$818,w
  1829  04E4  00A7               	movwf	___ftmul@f2
  1830  04E5  0843               	movf	_Calc_Duty$818+1,w
  1831  04E6  00A8               	movwf	___ftmul@f2+1
  1832  04E7  0844               	movf	_Calc_Duty$818+2,w
  1833  04E8  00A9               	movwf	___ftmul@f2+2
  1834  04E9  3024               	movlw	36
  1835  04EA  00A4               	movwf	___ftmul@f1
  1836  04EB  30F4               	movlw	244
  1837  04EC  00A5               	movwf	___ftmul@f1+1
  1838  04ED  3049               	movlw	73
  1839  04EE  00A6               	movwf	___ftmul@f1+2
  1840  04EF  3186  2612  3184   	fcall	___ftmul
  1841  04F2  0020               	movlb	0	; select bank0
  1842  04F3  0824               	movf	?___ftmul,w
  1843  04F4  00B4               	movwf	___fttol@f1
  1844  04F5  0825               	movf	?___ftmul+1,w
  1845  04F6  00B5               	movwf	___fttol@f1+1
  1846  04F7  0826               	movf	?___ftmul+2,w
  1847  04F8  00B6               	movwf	___fttol@f1+2
  1848  04F9  3185  258B  3184   	fcall	___fttol
  1849  04FC  0020               	movlb	0	; select bank0
  1850  04FD  3545               	lslf	Calc_Duty@i,w
  1851  04FE  3E5A               	addlw	(low (_servo_duty| 0))& (0+255)
  1852  04FF  0086               	movwf	6
  1853  0500  0187               	clrf	7
  1854  0501  0834               	movf	?___fttol,w
  1855  0502  3FC0               	movwi [0]fsr1
  1856  0503  0835               	movf	?___fttol+1,w
  1857  0504  3FC1               	movwi [1]fsr1
  1858  0505  3001               	movlw	1
  1859  0506  07C5               	addwf	Calc_Duty@i,f
  1860  0507  3000               	movlw	0
  1861  0508  3DC6               	addwfc	Calc_Duty@i+1,f
  1862  0509  2CAB               	goto	L2
  1863  050A                     __end_of_Calc_Duty:	
  1864                           
  1865                           	psect	text9
  1866  03B0                     __ptext9:	
  1867 ;; *************** function ___lbtoft *****************
  1868 ;; Defined at:
  1869 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  c               1    wreg     unsigned char 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  c               1   11[COMMON] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  3    8[COMMON] float 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, pclath, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1883 ;;      Params:         3       0       0       0
  1884 ;;      Locals:         1       0       0       0
  1885 ;;      Temps:          0       4       0       0
  1886 ;;      Totals:         4       4       0       0
  1887 ;;Total ram usage:        8 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		___ftpack
  1892 ;; This function is called by:
  1893 ;;		_Calc_Duty
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function ___lbtoft
  1899  03B0                     ___lbtoft:	
  1900                           
  1901                           ;incstack = 0
  1902                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1903                           ;___lbtoft@c stored from wreg
  1904  03B0  00FB               	movwf	___lbtoft@c
  1905  03B1  087B               	movf	___lbtoft@c,w
  1906  03B2  0020               	movlb	0	; select bank0
  1907  03B3  00A0               	movwf	??___lbtoft
  1908  03B4  01A1               	clrf	??___lbtoft+1
  1909  03B5  01A2               	clrf	??___lbtoft+2
  1910  03B6  0820               	movf	??___lbtoft,w
  1911  03B7  00F0               	movwf	___ftpack@arg
  1912  03B8  0821               	movf	??___lbtoft+1,w
  1913  03B9  00F1               	movwf	___ftpack@arg+1
  1914  03BA  0822               	movf	??___lbtoft+2,w
  1915  03BB  00F2               	movwf	___ftpack@arg+2
  1916  03BC  308E               	movlw	142
  1917  03BD  00A3               	movwf	??___lbtoft+3
  1918  03BE  0823               	movf	??___lbtoft+3,w
  1919  03BF  00F3               	movwf	___ftpack@exp
  1920  03C0  01F4               	clrf	___ftpack@sign
  1921  03C1  3184  2442         	fcall	___ftpack
  1922  03C3  0870               	movf	?___ftpack,w
  1923  03C4  00F8               	movwf	?___lbtoft
  1924  03C5  0871               	movf	?___ftpack+1,w
  1925  03C6  00F9               	movwf	?___lbtoft+1
  1926  03C7  0872               	movf	?___ftpack+2,w
  1927  03C8  00FA               	movwf	?___lbtoft+2
  1928  03C9  0008               	return
  1929  03CA                     __end_of___lbtoft:	
  1930                           
  1931                           	psect	text10
  1932  058B                     __ptext10:	
  1933 ;; *************** function ___fttol *****************
  1934 ;; Defined at:
  1935 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  f1              3   20[BANK0 ] float 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  lval            4   29[BANK0 ] unsigned long 
  1940 ;;  exp1            1   33[BANK0 ] unsigned char 
  1941 ;;  sign1           1   28[BANK0 ] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  4   20[BANK0 ] long 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1951 ;;      Params:         0       4       0       0
  1952 ;;      Locals:         0       6       0       0
  1953 ;;      Temps:          0       4       0       0
  1954 ;;      Totals:         0      14       0       0
  1955 ;;Total ram usage:       14 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_Calc_Duty
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           
  1965                           ;psect for function ___fttol
  1966  058B                     ___fttol:	
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1970  058B  0020               	movlb	0	; select bank0
  1971  058C  0834               	movf	___fttol@f1,w
  1972  058D  00B8               	movwf	??___fttol
  1973  058E  0835               	movf	___fttol@f1+1,w
  1974  058F  00B9               	movwf	??___fttol+1
  1975  0590  0836               	movf	___fttol@f1+2,w
  1976  0591  00BA               	movwf	??___fttol+2
  1977  0592  1003               	clrc
  1978  0593  0D39               	rlf	??___fttol+1,w
  1979  0594  0D3A               	rlf	??___fttol+2,w
  1980  0595  00BB               	movwf	??___fttol+3
  1981  0596  083B               	movf	??___fttol+3,w
  1982  0597  00C1               	movwf	___fttol@exp1
  1983  0598  0841               	movf	___fttol@exp1,w
  1984  0599  1D03               	btfss	3,2
  1985  059A  2DA4               	goto	l1065
  1986  059B  3000               	movlw	0
  1987  059C  00B7               	movwf	?___fttol+3
  1988  059D  3000               	movlw	0
  1989  059E  00B6               	movwf	?___fttol+2
  1990  059F  3000               	movlw	0
  1991  05A0  00B5               	movwf	?___fttol+1
  1992  05A1  3000               	movlw	0
  1993  05A2  00B4               	movwf	?___fttol
  1994  05A3  0008               	return
  1995  05A4                     l1065:	
  1996  05A4  0834               	movf	___fttol@f1,w
  1997  05A5  00B8               	movwf	??___fttol
  1998  05A6  0835               	movf	___fttol@f1+1,w
  1999  05A7  00B9               	movwf	??___fttol+1
  2000  05A8  0836               	movf	___fttol@f1+2,w
  2001  05A9  00BA               	movwf	??___fttol+2
  2002  05AA  3017               	movlw	23
  2003  05AB                     u935:	
  2004  05AB  36BA               	lsrf	??___fttol+2,f
  2005  05AC  0CB9               	rrf	??___fttol+1,f
  2006  05AD  0CB8               	rrf	??___fttol,f
  2007  05AE  0B89               	decfsz	9,f
  2008  05AF  2DAB               	goto	u935
  2009  05B0  0838               	movf	??___fttol,w
  2010  05B1  00BB               	movwf	??___fttol+3
  2011  05B2  083B               	movf	??___fttol+3,w
  2012  05B3  00BC               	movwf	___fttol@sign1
  2013  05B4  17B5               	bsf	___fttol@f1+1,7
  2014  05B5  30FF               	movlw	255
  2015  05B6  05B4               	andwf	___fttol@f1,f
  2016  05B7  30FF               	movlw	255
  2017  05B8  05B5               	andwf	___fttol@f1+1,f
  2018  05B9  3000               	movlw	0
  2019  05BA  05B6               	andwf	___fttol@f1+2,f
  2020  05BB  0834               	movf	___fttol@f1,w
  2021  05BC  00BD               	movwf	___fttol@lval
  2022  05BD  0835               	movf	___fttol@f1+1,w
  2023  05BE  00BE               	movwf	___fttol@lval+1
  2024  05BF  0836               	movf	___fttol@f1+2,w
  2025  05C0  00BF               	movwf	___fttol@lval+2
  2026  05C1  01C0               	clrf	___fttol@lval+3
  2027  05C2  308E               	movlw	142
  2028  05C3  02C1               	subwf	___fttol@exp1,f
  2029  05C4  1FC1               	btfss	___fttol@exp1,7
  2030  05C5  2DE2               	goto	l1085
  2031  05C6  0841               	movf	___fttol@exp1,w
  2032  05C7  3A80               	xorlw	128
  2033  05C8  3E8F               	addlw	143
  2034  05C9  1803               	skipnc
  2035  05CA  2DD4               	goto	l1083
  2036  05CB  3000               	movlw	0
  2037  05CC  00B7               	movwf	?___fttol+3
  2038  05CD  3000               	movlw	0
  2039  05CE  00B6               	movwf	?___fttol+2
  2040  05CF  3000               	movlw	0
  2041  05D0  00B5               	movwf	?___fttol+1
  2042  05D1  3000               	movlw	0
  2043  05D2  00B4               	movwf	?___fttol
  2044  05D3  0008               	return
  2045  05D4                     l1083:	
  2046  05D4  3001               	movlw	1
  2047  05D5                     u965:	
  2048  05D5  36C0               	lsrf	___fttol@lval+3,f
  2049  05D6  0CBF               	rrf	___fttol@lval+2,f
  2050  05D7  0CBE               	rrf	___fttol@lval+1,f
  2051  05D8  0CBD               	rrf	___fttol@lval,f
  2052  05D9  0B89               	decfsz	9,f
  2053  05DA  2DD5               	goto	u965
  2054  05DB  3001               	movlw	1
  2055  05DC  00B8               	movwf	??___fttol
  2056  05DD  0838               	movf	??___fttol,w
  2057  05DE  07C1               	addwf	___fttol@exp1,f
  2058  05DF  1903               	btfsc	3,2
  2059  05E0  2DFB               	goto	l1093
  2060  05E1  2DD4               	goto	l1083
  2061  05E2                     l1085:	
  2062  05E2  3018               	movlw	24
  2063  05E3  0241               	subwf	___fttol@exp1,w
  2064  05E4  1C03               	skipc
  2065  05E5  2DF8               	goto	l491
  2066  05E6  3000               	movlw	0
  2067  05E7  00B7               	movwf	?___fttol+3
  2068  05E8  3000               	movlw	0
  2069  05E9  00B6               	movwf	?___fttol+2
  2070  05EA  3000               	movlw	0
  2071  05EB  00B5               	movwf	?___fttol+1
  2072  05EC  3000               	movlw	0
  2073  05ED  00B4               	movwf	?___fttol
  2074  05EE  0008               	return
  2075  05EF                     l1091:	
  2076  05EF  3001               	movlw	1
  2077  05F0                     u995:	
  2078  05F0  35BD               	lslf	___fttol@lval,f
  2079  05F1  0DBE               	rlf	___fttol@lval+1,f
  2080  05F2  0DBF               	rlf	___fttol@lval+2,f
  2081  05F3  0DC0               	rlf	___fttol@lval+3,f
  2082  05F4  0B89               	decfsz	9,f
  2083  05F5  2DF0               	goto	u995
  2084  05F6  3001               	movlw	1
  2085  05F7  02C1               	subwf	___fttol@exp1,f
  2086  05F8                     l491:	
  2087  05F8  0841               	movf	___fttol@exp1,w
  2088  05F9  1D03               	btfss	3,2
  2089  05FA  2DEF               	goto	l1091
  2090  05FB                     l1093:	
  2091  05FB  083C               	movf	___fttol@sign1,w
  2092  05FC  1903               	btfsc	3,2
  2093  05FD  2E09               	goto	l1097
  2094  05FE  09BD               	comf	___fttol@lval,f
  2095  05FF  09BE               	comf	___fttol@lval+1,f
  2096  0600  09BF               	comf	___fttol@lval+2,f
  2097  0601  09C0               	comf	___fttol@lval+3,f
  2098  0602  0ABD               	incf	___fttol@lval,f
  2099  0603  1903               	skipnz
  2100  0604  0ABE               	incf	___fttol@lval+1,f
  2101  0605  1903               	skipnz
  2102  0606  0ABF               	incf	___fttol@lval+2,f
  2103  0607  1903               	skipnz
  2104  0608  0AC0               	incf	___fttol@lval+3,f
  2105  0609                     l1097:	
  2106  0609  0840               	movf	___fttol@lval+3,w
  2107  060A  00B7               	movwf	?___fttol+3
  2108  060B  083F               	movf	___fttol@lval+2,w
  2109  060C  00B6               	movwf	?___fttol+2
  2110  060D  083E               	movf	___fttol@lval+1,w
  2111  060E  00B5               	movwf	?___fttol+1
  2112  060F  083D               	movf	___fttol@lval,w
  2113  0610  00B4               	movwf	?___fttol
  2114  0611  0008               	return
  2115  0612                     __end_of___fttol:	
  2116                           
  2117                           	psect	text11
  2118  0612                     __ptext11:	
  2119 ;; *************** function ___ftmul *****************
  2120 ;; Defined at:
  2121 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;  f1              3    4[BANK0 ] float 
  2124 ;;  f2              3    7[BANK0 ] float 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  2127 ;;  sign            1   19[BANK0 ] unsigned char 
  2128 ;;  cntr            1   18[BANK0 ] unsigned char 
  2129 ;;  exp             1   14[BANK0 ] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  3    4[BANK0 ] float 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0, pclath, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2139 ;;      Params:         0       6       0       0
  2140 ;;      Locals:         0       6       0       0
  2141 ;;      Temps:          0       4       0       0
  2142 ;;      Totals:         0      16       0       0
  2143 ;;Total ram usage:       16 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    1
  2146 ;; This function calls:
  2147 ;;		___ftpack
  2148 ;; This function is called by:
  2149 ;;		_Calc_Duty
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           
  2154                           ;psect for function ___ftmul
  2155  0612                     ___ftmul:	
  2156                           
  2157                           ;incstack = 0
  2158                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2159  0612  0020               	movlb	0	; select bank0
  2160  0613  0824               	movf	___ftmul@f1,w
  2161  0614  00AA               	movwf	??___ftmul
  2162  0615  0825               	movf	___ftmul@f1+1,w
  2163  0616  00AB               	movwf	??___ftmul+1
  2164  0617  0826               	movf	___ftmul@f1+2,w
  2165  0618  00AC               	movwf	??___ftmul+2
  2166  0619  1003               	clrc
  2167  061A  0D2B               	rlf	??___ftmul+1,w
  2168  061B  0D2C               	rlf	??___ftmul+2,w
  2169  061C  00AD               	movwf	??___ftmul+3
  2170  061D  082D               	movf	??___ftmul+3,w
  2171  061E  00AE               	movwf	___ftmul@exp
  2172  061F  082E               	movf	___ftmul@exp,w
  2173  0620  1D03               	btfss	3,2
  2174  0621  2E29               	goto	l1015
  2175  0622  3000               	movlw	0
  2176  0623  00A4               	movwf	?___ftmul
  2177  0624  3000               	movlw	0
  2178  0625  00A5               	movwf	?___ftmul+1
  2179  0626  3000               	movlw	0
  2180  0627  00A6               	movwf	?___ftmul+2
  2181  0628  0008               	return
  2182  0629                     l1015:	
  2183  0629  0827               	movf	___ftmul@f2,w
  2184  062A  00AA               	movwf	??___ftmul
  2185  062B  0828               	movf	___ftmul@f2+1,w
  2186  062C  00AB               	movwf	??___ftmul+1
  2187  062D  0829               	movf	___ftmul@f2+2,w
  2188  062E  00AC               	movwf	??___ftmul+2
  2189  062F  1003               	clrc
  2190  0630  0D2B               	rlf	??___ftmul+1,w
  2191  0631  0D2C               	rlf	??___ftmul+2,w
  2192  0632  00AD               	movwf	??___ftmul+3
  2193  0633  082D               	movf	??___ftmul+3,w
  2194  0634  00B3               	movwf	___ftmul@sign
  2195  0635  0833               	movf	___ftmul@sign,w
  2196  0636  1D03               	btfss	3,2
  2197  0637  2E3F               	goto	l1021
  2198  0638  3000               	movlw	0
  2199  0639  00A4               	movwf	?___ftmul
  2200  063A  3000               	movlw	0
  2201  063B  00A5               	movwf	?___ftmul+1
  2202  063C  3000               	movlw	0
  2203  063D  00A6               	movwf	?___ftmul+2
  2204  063E  0008               	return
  2205  063F                     l1021:	
  2206  063F  0833               	movf	___ftmul@sign,w
  2207  0640  3E7B               	addlw	123
  2208  0641  00AA               	movwf	??___ftmul
  2209  0642  082A               	movf	??___ftmul,w
  2210  0643  07AE               	addwf	___ftmul@exp,f
  2211  0644  0824               	movf	___ftmul@f1,w
  2212  0645  00AA               	movwf	??___ftmul
  2213  0646  0825               	movf	___ftmul@f1+1,w
  2214  0647  00AB               	movwf	??___ftmul+1
  2215  0648  0826               	movf	___ftmul@f1+2,w
  2216  0649  00AC               	movwf	??___ftmul+2
  2217  064A  3010               	movlw	16
  2218  064B                     u825:	
  2219  064B  36AC               	lsrf	??___ftmul+2,f
  2220  064C  0CAB               	rrf	??___ftmul+1,f
  2221  064D  0CAA               	rrf	??___ftmul,f
  2222  064E  0B89               	decfsz	9,f
  2223  064F  2E4B               	goto	u825
  2224  0650  082A               	movf	??___ftmul,w
  2225  0651  00AD               	movwf	??___ftmul+3
  2226  0652  082D               	movf	??___ftmul+3,w
  2227  0653  00B3               	movwf	___ftmul@sign
  2228  0654  0827               	movf	___ftmul@f2,w
  2229  0655  00AA               	movwf	??___ftmul
  2230  0656  0828               	movf	___ftmul@f2+1,w
  2231  0657  00AB               	movwf	??___ftmul+1
  2232  0658  0829               	movf	___ftmul@f2+2,w
  2233  0659  00AC               	movwf	??___ftmul+2
  2234  065A  3010               	movlw	16
  2235  065B                     u835:	
  2236  065B  36AC               	lsrf	??___ftmul+2,f
  2237  065C  0CAB               	rrf	??___ftmul+1,f
  2238  065D  0CAA               	rrf	??___ftmul,f
  2239  065E  0B89               	decfsz	9,f
  2240  065F  2E5B               	goto	u835
  2241  0660  082A               	movf	??___ftmul,w
  2242  0661  00AD               	movwf	??___ftmul+3
  2243  0662  082D               	movf	??___ftmul+3,w
  2244  0663  06B3               	xorwf	___ftmul@sign,f
  2245  0664  3080               	movlw	128
  2246  0665  00AA               	movwf	??___ftmul
  2247  0666  082A               	movf	??___ftmul,w
  2248  0667  05B3               	andwf	___ftmul@sign,f
  2249  0668  17A5               	bsf	___ftmul@f1+1,7
  2250  0669  17A8               	bsf	___ftmul@f2+1,7
  2251  066A  30FF               	movlw	255
  2252  066B  05A7               	andwf	___ftmul@f2,f
  2253  066C  30FF               	movlw	255
  2254  066D  05A8               	andwf	___ftmul@f2+1,f
  2255  066E  3000               	movlw	0
  2256  066F  05A9               	andwf	___ftmul@f2+2,f
  2257  0670  3000               	movlw	0
  2258  0671  00AF               	movwf	___ftmul@f3_as_product
  2259  0672  3000               	movlw	0
  2260  0673  00B0               	movwf	___ftmul@f3_as_product+1
  2261  0674  3000               	movlw	0
  2262  0675  00B1               	movwf	___ftmul@f3_as_product+2
  2263  0676  3007               	movlw	7
  2264  0677  00AA               	movwf	??___ftmul
  2265  0678  082A               	movf	??___ftmul,w
  2266  0679  00B2               	movwf	___ftmul@cntr
  2267  067A                     l1033:	
  2268  067A  1C24               	btfss	___ftmul@f1,0
  2269  067B  2E82               	goto	l1037
  2270  067C  0827               	movf	___ftmul@f2,w
  2271  067D  07AF               	addwf	___ftmul@f3_as_product,f
  2272  067E  0828               	movf	___ftmul@f2+1,w
  2273  067F  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  2274  0680  0829               	movf	___ftmul@f2+2,w
  2275  0681  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  2276  0682                     l1037:	
  2277  0682  3001               	movlw	1
  2278  0683                     u855:	
  2279  0683  36A6               	lsrf	___ftmul@f1+2,f
  2280  0684  0CA5               	rrf	___ftmul@f1+1,f
  2281  0685  0CA4               	rrf	___ftmul@f1,f
  2282  0686  0B89               	decfsz	9,f
  2283  0687  2E83               	goto	u855
  2284  0688  3001               	movlw	1
  2285  0689                     u865:	
  2286  0689  35A7               	lslf	___ftmul@f2,f
  2287  068A  0DA8               	rlf	___ftmul@f2+1,f
  2288  068B  0DA9               	rlf	___ftmul@f2+2,f
  2289  068C  0B89               	decfsz	9,f
  2290  068D  2E89               	goto	u865
  2291  068E  3001               	movlw	1
  2292  068F  02B2               	subwf	___ftmul@cntr,f
  2293  0690  1D03               	btfss	3,2
  2294  0691  2E7A               	goto	l1033
  2295  0692  3009               	movlw	9
  2296  0693  00AA               	movwf	??___ftmul
  2297  0694  082A               	movf	??___ftmul,w
  2298  0695  00B2               	movwf	___ftmul@cntr
  2299  0696                     l1045:	
  2300  0696  1C24               	btfss	___ftmul@f1,0
  2301  0697  2E9E               	goto	l1049
  2302  0698  0827               	movf	___ftmul@f2,w
  2303  0699  07AF               	addwf	___ftmul@f3_as_product,f
  2304  069A  0828               	movf	___ftmul@f2+1,w
  2305  069B  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  2306  069C  0829               	movf	___ftmul@f2+2,w
  2307  069D  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  2308  069E                     l1049:	
  2309  069E  3001               	movlw	1
  2310  069F                     u895:	
  2311  069F  36A6               	lsrf	___ftmul@f1+2,f
  2312  06A0  0CA5               	rrf	___ftmul@f1+1,f
  2313  06A1  0CA4               	rrf	___ftmul@f1,f
  2314  06A2  0B89               	decfsz	9,f
  2315  06A3  2E9F               	goto	u895
  2316  06A4  3001               	movlw	1
  2317  06A5                     u905:	
  2318  06A5  36B1               	lsrf	___ftmul@f3_as_product+2,f
  2319  06A6  0CB0               	rrf	___ftmul@f3_as_product+1,f
  2320  06A7  0CAF               	rrf	___ftmul@f3_as_product,f
  2321  06A8  0B89               	decfsz	9,f
  2322  06A9  2EA5               	goto	u905
  2323  06AA  3001               	movlw	1
  2324  06AB  02B2               	subwf	___ftmul@cntr,f
  2325  06AC  1D03               	btfss	3,2
  2326  06AD  2E96               	goto	l1045
  2327  06AE  082F               	movf	___ftmul@f3_as_product,w
  2328  06AF  00F0               	movwf	___ftpack@arg
  2329  06B0  0830               	movf	___ftmul@f3_as_product+1,w
  2330  06B1  00F1               	movwf	___ftpack@arg+1
  2331  06B2  0831               	movf	___ftmul@f3_as_product+2,w
  2332  06B3  00F2               	movwf	___ftpack@arg+2
  2333  06B4  082E               	movf	___ftmul@exp,w
  2334  06B5  00AA               	movwf	??___ftmul
  2335  06B6  082A               	movf	??___ftmul,w
  2336  06B7  00F3               	movwf	___ftpack@exp
  2337  06B8  0833               	movf	___ftmul@sign,w
  2338  06B9  00AB               	movwf	??___ftmul+1
  2339  06BA  082B               	movf	??___ftmul+1,w
  2340  06BB  00F4               	movwf	___ftpack@sign
  2341  06BC  3184  2442         	fcall	___ftpack
  2342  06BE  0870               	movf	?___ftpack,w
  2343  06BF  0020               	movlb	0	; select bank0
  2344  06C0  00A4               	movwf	?___ftmul
  2345  06C1  0871               	movf	?___ftpack+1,w
  2346  06C2  00A5               	movwf	?___ftmul+1
  2347  06C3  0872               	movf	?___ftpack+2,w
  2348  06C4  00A6               	movwf	?___ftmul+2
  2349  06C5  0008               	return
  2350  06C6                     __end_of___ftmul:	
  2351                           
  2352                           	psect	text12
  2353  0442                     __ptext12:	
  2354 ;; *************** function ___ftpack *****************
  2355 ;; Defined at:
  2356 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  arg             3    0[COMMON] unsigned um
  2359 ;;  exp             1    3[COMMON] unsigned char 
  2360 ;;  sign            1    4[COMMON] unsigned char 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  3    0[COMMON] float 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2372 ;;      Params:         5       0       0       0
  2373 ;;      Locals:         0       0       0       0
  2374 ;;      Temps:          3       0       0       0
  2375 ;;      Totals:         8       0       0       0
  2376 ;;Total ram usage:        8 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		___ftmul
  2382 ;;		___lbtoft
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function ___ftpack
  2388  0442                     ___ftpack:	
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2392  0442  0873               	movf	___ftpack@exp,w
  2393  0443  1903               	btfsc	3,2
  2394  0444  2C4A               	goto	l915
  2395  0445  0872               	movf	___ftpack@arg+2,w
  2396  0446  0471               	iorwf	___ftpack@arg+1,w
  2397  0447  0470               	iorwf	___ftpack@arg,w
  2398  0448  1D03               	skipz
  2399  0449  2C5B               	goto	l921
  2400  044A                     l915:	
  2401  044A  3000               	movlw	0
  2402  044B  00F0               	movwf	?___ftpack
  2403  044C  3000               	movlw	0
  2404  044D  00F1               	movwf	?___ftpack+1
  2405  044E  3000               	movlw	0
  2406  044F  00F2               	movwf	?___ftpack+2
  2407  0450  0008               	return
  2408  0451                     l919:	
  2409  0451  3001               	movlw	1
  2410  0452  00F5               	movwf	??___ftpack
  2411  0453  0875               	movf	??___ftpack,w
  2412  0454  07F3               	addwf	___ftpack@exp,f
  2413  0455  3001               	movlw	1
  2414  0456                     u645:	
  2415  0456  36F2               	lsrf	___ftpack@arg+2,f
  2416  0457  0CF1               	rrf	___ftpack@arg+1,f
  2417  0458  0CF0               	rrf	___ftpack@arg,f
  2418  0459  0B89               	decfsz	9,f
  2419  045A  2C56               	goto	u645
  2420  045B                     l921:	
  2421  045B  30FE               	movlw	254
  2422  045C  0572               	andwf	___ftpack@arg+2,w
  2423  045D  1903               	btfsc	3,2
  2424  045E  2C74               	goto	l400
  2425  045F  2C51               	goto	l919
  2426  0460                     l923:	
  2427  0460  3001               	movlw	1
  2428  0461  00F5               	movwf	??___ftpack
  2429  0462  0875               	movf	??___ftpack,w
  2430  0463  07F3               	addwf	___ftpack@exp,f
  2431  0464  3001               	movlw	1
  2432  0465  07F0               	addwf	___ftpack@arg,f
  2433  0466  3000               	movlw	0
  2434  0467  1803               	skipnc
  2435  0468  3001               	movlw	1
  2436  0469  07F1               	addwf	___ftpack@arg+1,f
  2437  046A  3000               	movlw	0
  2438  046B  1803               	skipnc
  2439  046C  3001               	movlw	1
  2440  046D  07F2               	addwf	___ftpack@arg+2,f
  2441  046E  3001               	movlw	1
  2442  046F                     u665:	
  2443  046F  36F2               	lsrf	___ftpack@arg+2,f
  2444  0470  0CF1               	rrf	___ftpack@arg+1,f
  2445  0471  0CF0               	rrf	___ftpack@arg,f
  2446  0472  0B89               	decfsz	9,f
  2447  0473  2C6F               	goto	u665
  2448  0474                     l400:	
  2449  0474  30FF               	movlw	255
  2450  0475  0572               	andwf	___ftpack@arg+2,w
  2451  0476  1903               	btfsc	3,2
  2452  0477  2C81               	goto	l931
  2453  0478  2C60               	goto	l923
  2454  0479                     l929:	
  2455  0479  3001               	movlw	1
  2456  047A  02F3               	subwf	___ftpack@exp,f
  2457  047B  3001               	movlw	1
  2458  047C                     u685:	
  2459  047C  35F0               	lslf	___ftpack@arg,f
  2460  047D  0DF1               	rlf	___ftpack@arg+1,f
  2461  047E  0DF2               	rlf	___ftpack@arg+2,f
  2462  047F  0B89               	decfsz	9,f
  2463  0480  2C7C               	goto	u685
  2464  0481                     l931:	
  2465  0481  1BF1               	btfsc	___ftpack@arg+1,7
  2466  0482  2C87               	goto	l407
  2467  0483  3002               	movlw	2
  2468  0484  0273               	subwf	___ftpack@exp,w
  2469  0485  1803               	skipnc
  2470  0486  2C79               	goto	l929
  2471  0487                     l407:	
  2472  0487  1873               	btfsc	___ftpack@exp,0
  2473  0488  2C8F               	goto	l408
  2474  0489  30FF               	movlw	255
  2475  048A  05F0               	andwf	___ftpack@arg,f
  2476  048B  307F               	movlw	127
  2477  048C  05F1               	andwf	___ftpack@arg+1,f
  2478  048D  30FF               	movlw	255
  2479  048E  05F2               	andwf	___ftpack@arg+2,f
  2480  048F                     l408:	
  2481  048F  1003               	clrc
  2482  0490  0CF3               	rrf	___ftpack@exp,f
  2483  0491  0873               	movf	___ftpack@exp,w
  2484  0492  00F5               	movwf	??___ftpack
  2485  0493  01F6               	clrf	??___ftpack+1
  2486  0494  01F7               	clrf	??___ftpack+2
  2487  0495  3010               	movlw	16
  2488  0496                     u725:	
  2489  0496  35F5               	lslf	??___ftpack,f
  2490  0497  0DF6               	rlf	??___ftpack+1,f
  2491  0498  0DF7               	rlf	??___ftpack+2,f
  2492  0499  0B89               	decfsz	9,f
  2493  049A  2C96               	goto	u725
  2494  049B  0875               	movf	??___ftpack,w
  2495  049C  04F0               	iorwf	___ftpack@arg,f
  2496  049D  0876               	movf	??___ftpack+1,w
  2497  049E  04F1               	iorwf	___ftpack@arg+1,f
  2498  049F  0877               	movf	??___ftpack+2,w
  2499  04A0  04F2               	iorwf	___ftpack@arg+2,f
  2500  04A1  0874               	movf	___ftpack@sign,w
  2501  04A2  1903               	btfsc	3,2
  2502  04A3  0008               	return
  2503  04A4  17F2               	bsf	___ftpack@arg+2,7
  2504  04A5  0008               	return
  2505  04A6                     __end_of___ftpack:	
  2506                           
  2507                           	psect	text13
  2508  038E                     __ptext13:	
  2509 ;; *************** function ___bmul *****************
  2510 ;; Defined at:
  2511 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  multiplier      1    wreg     unsigned char 
  2514 ;;  multiplicand    1    0[COMMON] unsigned char 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  multiplier      1    3[COMMON] unsigned char 
  2517 ;;  product         1    2[COMMON] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      unsigned char 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2527 ;;      Params:         1       0       0       0
  2528 ;;      Locals:         2       0       0       0
  2529 ;;      Temps:          1       0       0       0
  2530 ;;      Totals:         4       0       0       0
  2531 ;;Total ram usage:        4 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_Calc_Duty
  2537 ;;		_Servo_Initialize
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function ___bmul
  2543  038E                     ___bmul:	
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2547                           ;___bmul@multiplier stored from wreg
  2548  038E  00F3               	movwf	___bmul@multiplier
  2549  038F  01F2               	clrf	___bmul@product
  2550  0390                     l899:	
  2551  0390  1C73               	btfss	___bmul@multiplier,0
  2552  0391  2B96               	goto	l903
  2553  0392  0870               	movf	___bmul@multiplicand,w
  2554  0393  00F1               	movwf	??___bmul
  2555  0394  0871               	movf	??___bmul,w
  2556  0395  07F2               	addwf	___bmul@product,f
  2557  0396                     l903:	
  2558  0396  1003               	clrc
  2559  0397  0DF0               	rlf	___bmul@multiplicand,f
  2560  0398  1003               	clrc
  2561  0399  0CF3               	rrf	___bmul@multiplier,f
  2562  039A  0873               	movf	___bmul@multiplier,w
  2563  039B  1D03               	btfss	3,2
  2564  039C  2B90               	goto	l899
  2565  039D  0872               	movf	___bmul@product,w
  2566  039E  0008               	return
  2567  039F                     __end_of___bmul:	
  2568  007E                     btemp	set	126	;btemp
  2569  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    24
    Data        2
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     43      79
    BANK1            80      0      20
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Calc_Duty
    _Initialize->_Servo_Initialize
    _Servo_Initialize->___bmul
    _Calc_Duty->___lbtoft
    ___lbtoft->___ftpack
    ___fttol->___lbtoft
    ___ftmul->___lbtoft

Critical Paths under _main in BANK0

    _main->_Calc_Duty
    _Initialize->_Servo_Initialize
    _Calc_Duty->___fttol
    ___fttol->___ftmul
    ___ftmul->___lbtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    5118
                                             39 BANK0      4     0      4
                          _Calc_Duty
                         _Initialize
                     _Renew_Raw_Data
                   _Servo_Output_OFF
 ---------------------------------------------------------------------------------
 (1) _Servo_Output_OFF                                     4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Renew_Raw_Data                                       4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0     534
              _Oscillator_Initialize
                     _Pin_Initialize
                   _Servo_Initialize
                   _Timer_Initialize
 ---------------------------------------------------------------------------------
 (2) _Timer_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Servo_Initialize                                    26    26      0     534
                                              4 COMMON     2     2      0
                                              0 BANK0     24    24      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _Pin_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Oscillator_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Calc_Duty                                            6     6      0    4584
                                             12 COMMON     1     1      0
                                             34 BANK0      5     5      0
                             ___bmul
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    1651
                                              8 COMMON     4     1      3
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     305
                                             20 BANK0     14    10      4
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2167
                                              4 BANK0     16    10      6
                             ___bmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     326
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calc_Duty
     ___bmul
     ___ftmul
       ___bmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___bmul (ARG)
       ___ftmul (ARG)
         ___bmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _Initialize
     _Oscillator_Initialize
     _Pin_Initialize
     _Servo_Initialize
       ___bmul
     _Timer_Initialize
   _Renew_Raw_Data
   _Servo_Output_OFF

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      70       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      14       8       25.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      70      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Aug 18 10:44:25 2019

                ___bmul@product 0072                     __CFG_CP$OFF 0000                              l73 0440  
                           l109 07E3                             l400 0474                             l407 0487  
                           l408 048F                             l491 05F8                             l903 0396  
                           l921 045B                             l931 0481                             l923 0460  
                           l915 044A                             l919 0451                             l929 0479  
                           l899 0390                    __CFG_CPD$OFF 0000                             u740 06D0  
                           u725 0496                             u645 0456                             u665 046F  
                           u905 06A5                             u825 064B                             u835 065B  
                           u755 075E                             u685 047C                             u765 077D  
                           u855 0683                             u935 05AB                             u775 079B  
                           u865 0689                             u785 07BB                             u965 05D5  
                           u895 069F                             u995 05F0           _Oscillator_Initialize 0371  
               ?_Renew_Raw_Data 0070                    __CFG_BORV$HI 0000                             wreg 0009  
                  __CFG_LVP$OFF 0000                            l1021 063F                            l1015 0629  
                          l1033 067A                            l1131 054A                            l1045 0696  
                          l1037 0682                            l1141 0409                            l1135 056A  
                          l1127 052A                            l1049 069E                            l1065 05A4  
                          l1091 05EF                            l1083 05D4                            l1093 05FB  
                          l1085 05E2                            l1167 042B                            l1097 0609  
                          u1120 0413                            u1025 03D4                            u1105 0566  
                          u1130 0414                            u1035 03DC                            u1115 0586  
                          u1140 0419                            u1045 03F1                            u1150 041A  
                          u1055 03F9                            u1065 04B4                            u1085 0526  
                          u1095 0546                            _TMR1 0016                    __CFG_WRT$OFF 0000  
                          _main 0406                    ___ftpack@arg 0070                    ___ftpack@exp 0073  
                          _port 00A0                            fsr0h 0005                            fsr1h 0007  
                          indf0 0000                            fsr0l 0004                            indf1 0001  
                          fsr1l 0006                            btemp 007E                            start 0002  
                 __CFG_IESO$OFF 0000               ___bmul@multiplier 0073                    ___ftmul@cntr 0032  
                  ___ftmul@sign 0033               ?_Servo_Initialize 0070                    ___fttol@exp1 0041  
                  ___fttol@lval 003D              ??_Servo_Initialize 0074                           ?_main 0047  
                 __CFG_WDTE$OFF 0000                 __end_of___ftmul 06C6                           _T1CON 0018  
               __end_of___fttol 0612                           _PORTA 000C                           _PORTB 000D  
                         _TRISA 008C                           _TRISB 008D                  __CFG_FCMEN$OFF 0000  
                         _param 004B                   ___ftpack@sign 0074                  __CFG_BOREN$OFF 0000  
                         status 0003                           wtemp0 007E                   _Calc_Duty$818 0042  
            __size_of_Calc_Duty 0064                  __CFG_MCLRE$OFF 0000                 __initialization 07E6  
                  __end_of_main 0442                      _Initialize 0382          ?_Oscillator_Initialize 0070  
                        ??_main 007D                   ___fttol@sign1 003C                  __CFG_PLLEN$OFF 0000  
             ?_Servo_Output_OFF 0070                          _ANSELA 018C                          _ANSELB 018D  
              __end_of___ftpack 04A6                __end_of___lbtoft 03CA                          _OSCCON 0099  
            ??_Servo_Output_OFF 0070                  __CFG_PWRTE$OFF 0000                          ___bmul 038E  
                     ??___ftmul 002A                       ??___fttol 0038           ___ftmul@f3_as_product 002F  
             __end_of_Calc_Duty 050A         __end_of__initialization 07FD                      ___lbtoft@c 007B  
           ___bmul@multiplicand 0070       __size_of_Timer_Initialize 0007                      ___ftmul@f1 0024  
                    ___ftmul@f2 0027                      ___fttol@f1 0034                  __pcstackCOMMON 0070  
                  __pidataBANK0 036F                     ?_Initialize 0070                ??_Renew_Raw_Data 0070  
                    __pbssBANK0 004B                      __pbssBANK1 00A0                 __CFG_VCAPEN$OFF 0000  
                    _data_renew 0069                      __pmaintext 0406           Servo_Initialize@F2760 0800  
                       ?___bmul 0070             Servo_Initialize@num 0020         __size_of_Pin_Initialize 0011  
                     ?___ftpack 0070                       ?___lbtoft 0078       __size_of_Servo_Initialize 0120  
           __size_of_Initialize 000C                     _Timer1_time 006D                 __size_of___bmul 0011  
       ??_Oscillator_Initialize 0070                         ___ftmul 0612                         ___fttol 058B  
               __CFG_STVREN$OFF 0000                      ??___ftpack 0075                      ??___lbtoft 0020  
                       __ptext1 050A                         __ptext2 03CA                         __ptext3 0382  
                       __ptext4 037B                         __ptext5 06C6                         __ptext6 039F  
                       __ptext7 0371                         __ptext8 04A6                         __ptext9 03B0  
                     _T1CONbits 0018                         clrloop0 0376            end_of_initialization 07FD  
              _Timer_Initialize 037B       __size_of_Servo_Output_OFF 0081                       _PORTCbits 000E  
                    _servo_duty 005A                __CFG_FOSC$INTOSC 0000                       _TRISCbits 008E  
                     _Calc_Duty 04A6                     ___ftmul@exp 002E                  _Pin_Initialize 039F  
                __end_of___bmul 039F                    ??_Initialize 0076             start_initialization 07E6  
              _Servo_Initialize 06C6                      ?_Calc_Duty 0070              __end_of_Initialize 038E  
        __end_of_Pin_Initialize 03B0                        ??___bmul 0071                     __pdataBANK0 006D  
             __size_of___ftpack 0064               __size_of___lbtoft 001A                       ___latbits 0001  
                 __pcstackBANK0 0020                 ?_Pin_Initialize 0070                _Servo_Output_OFF 050A  
                      ?___ftmul 0024                        ?___fttol 0034  __size_of_Oscillator_Initialize 0004  
 __end_of_Oscillator_Initialize 0375        __end_of_Timer_Initialize 0382         __size_of_Renew_Raw_Data 003C  
                   ??_Calc_Duty 007C                        _LATCbits 010E                       clear_ram0 0375  
                      _PIE1bits 0091                        _PIR1bits 0011                  _servo_raw_data 0064  
      __end_of_Servo_Initialize 07E6                __size_of___ftmul 00B4                __size_of___fttol 0087  
                      ___ftpack 0442                        ___lbtoft 03B0                      Calc_Duty@i 0045  
                      __ptext10 058B                        __ptext11 0612                        __ptext12 0442  
                      __ptext13 038E                   __size_of_main 003C                        main@argc 0047  
                      main@argv 0049                      _INTCONbits 000B                  _Renew_Raw_Data 03CA  
      __end_of_Servo_Output_OFF 058B                ??_Pin_Initialize 0070               __CFG_CLKOUTEN$OFF 0000  
                 __pstringtext1 0800          __end_of_Renew_Raw_Data 0406               ?_Timer_Initialize 0070  
            ??_Timer_Initialize 0070   __end_ofServo_Initialize@F2760 0818  
