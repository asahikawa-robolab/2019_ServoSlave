

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 26 13:53:34 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1933
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.00
    27                           ; Generated 27/05/2018 GMT
    28                           ; 
    29                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F1933 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  0110                     	;# 
   112  0111                     	;# 
   113  0112                     	;# 
   114  0113                     	;# 
   115  0114                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011A                     	;# 
   122  011B                     	;# 
   123  011D                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0193                     	;# 
   132  0194                     	;# 
   133  0195                     	;# 
   134  0196                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019D                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  020D                     	;# 
   147  0210                     	;# 
   148  0211                     	;# 
   149  0212                     	;# 
   150  0213                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0216                     	;# 
   155  0217                     	;# 
   156  0291                     	;# 
   157  0291                     	;# 
   158  0292                     	;# 
   159  0293                     	;# 
   160  0294                     	;# 
   161  0295                     	;# 
   162  0295                     	;# 
   163  0296                     	;# 
   164  0298                     	;# 
   165  0298                     	;# 
   166  0299                     	;# 
   167  029A                     	;# 
   168  029B                     	;# 
   169  029C                     	;# 
   170  029C                     	;# 
   171  029D                     	;# 
   172  029E                     	;# 
   173  029F                     	;# 
   174  0311                     	;# 
   175  0311                     	;# 
   176  0312                     	;# 
   177  0313                     	;# 
   178  0314                     	;# 
   179  0315                     	;# 
   180  0315                     	;# 
   181  0316                     	;# 
   182  0318                     	;# 
   183  0318                     	;# 
   184  0319                     	;# 
   185  031A                     	;# 
   186  031C                     	;# 
   187  031C                     	;# 
   188  031D                     	;# 
   189  031E                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  0415                     	;# 
   194  0416                     	;# 
   195  0417                     	;# 
   196  041C                     	;# 
   197  041D                     	;# 
   198  041E                     	;# 
   199  0791                     	;# 
   200  0792                     	;# 
   201  0793                     	;# 
   202  0794                     	;# 
   203  0795                     	;# 
   204  0798                     	;# 
   205  0799                     	;# 
   206  07A0                     	;# 
   207  07A1                     	;# 
   208  07A3                     	;# 
   209  07A4                     	;# 
   210  07A6                     	;# 
   211  07A7                     	;# 
   212  07A9                     	;# 
   213  07AA                     	;# 
   214  0FE4                     	;# 
   215  0FE5                     	;# 
   216  0FE6                     	;# 
   217  0FE7                     	;# 
   218  0FE8                     	;# 
   219  0FE9                     	;# 
   220  0FEA                     	;# 
   221  0FEB                     	;# 
   222  0FED                     	;# 
   223  0FEE                     	;# 
   224  0FEF                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  010C                     	;# 
   274  010D                     	;# 
   275  010E                     	;# 
   276  0110                     	;# 
   277  0111                     	;# 
   278  0112                     	;# 
   279  0113                     	;# 
   280  0114                     	;# 
   281  0115                     	;# 
   282  0116                     	;# 
   283  0117                     	;# 
   284  0118                     	;# 
   285  0119                     	;# 
   286  011A                     	;# 
   287  011B                     	;# 
   288  011D                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  0191                     	;# 
   292  0191                     	;# 
   293  0192                     	;# 
   294  0193                     	;# 
   295  0193                     	;# 
   296  0193                     	;# 
   297  0194                     	;# 
   298  0195                     	;# 
   299  0196                     	;# 
   300  0199                     	;# 
   301  019A                     	;# 
   302  019B                     	;# 
   303  019B                     	;# 
   304  019B                     	;# 
   305  019B                     	;# 
   306  019C                     	;# 
   307  019C                     	;# 
   308  019D                     	;# 
   309  019E                     	;# 
   310  019F                     	;# 
   311  020D                     	;# 
   312  0210                     	;# 
   313  0211                     	;# 
   314  0212                     	;# 
   315  0213                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0216                     	;# 
   320  0217                     	;# 
   321  0291                     	;# 
   322  0291                     	;# 
   323  0292                     	;# 
   324  0293                     	;# 
   325  0294                     	;# 
   326  0295                     	;# 
   327  0295                     	;# 
   328  0296                     	;# 
   329  0298                     	;# 
   330  0298                     	;# 
   331  0299                     	;# 
   332  029A                     	;# 
   333  029B                     	;# 
   334  029C                     	;# 
   335  029C                     	;# 
   336  029D                     	;# 
   337  029E                     	;# 
   338  029F                     	;# 
   339  0311                     	;# 
   340  0311                     	;# 
   341  0312                     	;# 
   342  0313                     	;# 
   343  0314                     	;# 
   344  0315                     	;# 
   345  0315                     	;# 
   346  0316                     	;# 
   347  0318                     	;# 
   348  0318                     	;# 
   349  0319                     	;# 
   350  031A                     	;# 
   351  031C                     	;# 
   352  031C                     	;# 
   353  031D                     	;# 
   354  031E                     	;# 
   355  0394                     	;# 
   356  0395                     	;# 
   357  0396                     	;# 
   358  0415                     	;# 
   359  0416                     	;# 
   360  0417                     	;# 
   361  041C                     	;# 
   362  041D                     	;# 
   363  041E                     	;# 
   364  0791                     	;# 
   365  0792                     	;# 
   366  0793                     	;# 
   367  0794                     	;# 
   368  0795                     	;# 
   369  0798                     	;# 
   370  0799                     	;# 
   371  07A0                     	;# 
   372  07A1                     	;# 
   373  07A3                     	;# 
   374  07A4                     	;# 
   375  07A6                     	;# 
   376  07A7                     	;# 
   377  07A9                     	;# 
   378  07AA                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390                           
   391                           	psect	idataBANK0
   392  0458                     __pidataBANK0:	
   393                           
   394                           ;initializer for _Timer1_time
   395  0458  3418               	retlw	24
   396  0459  34FC               	retlw	252
   397  0016                     _TMR1	set	22
   398  000B                     _INTCONbits	set	11
   399  0018                     _T1CON	set	24
   400  000C                     _PORTAbits	set	12
   401  000E                     _PORTCbits	set	14
   402  000C                     _PORTA	set	12
   403  0011                     _PIR1bits	set	17
   404  0018                     _T1CONbits	set	24
   405  0091                     _PIE1bits	set	145
   406  008D                     _TRISBbits	set	141
   407  008E                     _TRISCbits	set	142
   408  008C                     _TRISA	set	140
   409  0099                     _OSCCON	set	153
   410  010D                     _LATBbits	set	269
   411  010E                     _LATCbits	set	270
   412  018D                     _ANSELB	set	397
   413  018C                     _ANSELA	set	396
   414                           
   415                           ; #config settings
   416  0000                     
   417                           	psect	cinit
   418  07ED                     start_initialization:	
   419  07ED                     __initialization:	
   420                           
   421                           ; Initialize objects allocated to BANK0
   422  07ED  3184  2458  3187   	fcall	__pidataBANK0	;fetch initializer
   423  07F0  00DB               	movwf	__pdataBANK0& (0+127)
   424  07F1  3184  2459  3187   	fcall	__pidataBANK0+1	;fetch initializer
   425  07F4  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   426                           
   427                           ; Clear objects allocated to COMMON
   428  07F5  01FD               	clrf	__pbssCOMMON& (0+127)
   429                           
   430                           ; Clear objects allocated to BANK0
   431  07F6  3048               	movlw	low __pbssBANK0
   432  07F7  0084               	movwf	4
   433  07F8  3000               	movlw	high __pbssBANK0
   434  07F9  0085               	movwf	5
   435  07FA  3013               	movlw	19
   436  07FB  3184  245E         	fcall	clear_ram0
   437  07FD                     end_of_initialization:	
   438                           ;End of C runtime variable initialization code
   439                           
   440  07FD                     __end_of__initialization:	
   441  07FD  0020               	movlb	0
   442  07FE  3184  2CE1         	ljmp	_main	;jump to C main() function
   443                           
   444                           	psect	bssCOMMON
   445  007D                     __pbssCOMMON:	
   446  007D                     _EmergencyStop:	
   447  007D                     	ds	1
   448                           
   449                           	psect	bssBANK0
   450  0048                     __pbssBANK0:	
   451  0048                     _servo_duty:	
   452  0048                     	ds	10
   453  0052                     _data_renew:	
   454  0052                     	ds	4
   455  0056                     _servo_raw_data:	
   456  0056                     	ds	5
   457                           
   458                           	psect	dataBANK0
   459  005B                     __pdataBANK0:	
   460  005B                     _Timer1_time:	
   461  005B                     	ds	2
   462                           
   463                           	psect	clrtext
   464  045E                     clear_ram0:	
   465                           ;	Called with FSR0 containing the base address, and
   466                           ;	WREG with the size to clear
   467                           
   468  045E  0064               	clrwdt	;clear the watchdog before getting into this loop
   469  045F                     clrloop0:	
   470  045F  0180               	clrf	0	;clear RAM location pointed to by FSR
   471  0460  3101               	addfsr 0,1
   472  0461  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   473  0462  2C5F               	goto	clrloop0	;have we reached the end yet?
   474  0463  3400               	retlw	0	;all done for this memory range, return
   475                           
   476                           	psect	cstackCOMMON
   477  0070                     __pcstackCOMMON:	
   478  0070                     ?_Initialize:	
   479  0070                     ??_Initialize:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_Renew_Raw_Data:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ??_Renew_Raw_Data:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_Calc_Duty:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_Servo_Output_OFF:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ??_Servo_Output_OFF:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_Oscillator_Initialize:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ??_Oscillator_Initialize:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_Pin_Initialize:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ??_Pin_Initialize:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_Timer_Initialize:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ??_Timer_Initialize:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?___ftpack:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ___ftpack@arg:	
   519                           ; 3 bytes @ 0x0
   520                           
   521                           
   522                           ; 3 bytes @ 0x0
   523  0070                     	ds	3
   524  0073                     ___ftpack@exp:	
   525                           
   526                           ; 1 bytes @ 0x3
   527  0073                     	ds	1
   528  0074                     ___ftpack@sign:	
   529                           
   530                           ; 1 bytes @ 0x4
   531  0074                     	ds	1
   532  0075                     ??___ftpack:	
   533                           
   534                           ; 1 bytes @ 0x5
   535  0075                     	ds	3
   536  0078                     ?___lbtoft:	
   537                           
   538                           ; 3 bytes @ 0x8
   539  0078                     	ds	3
   540  007B                     ___lbtoft@c:	
   541                           
   542                           ; 1 bytes @ 0xB
   543  007B                     	ds	1
   544  007C                     ??_Calc_Duty:	
   545                           
   546                           ; 1 bytes @ 0xC
   547  007C                     	ds	1
   548  007D                     ??_main:	
   549                           
   550                           	psect	cstackBANK0
   551  0020                     __pcstackBANK0:	
   552                           ; 1 bytes @ 0xD
   553                           
   554  0020                     ??___lbtoft:	
   555                           
   556                           ; 1 bytes @ 0x0
   557  0020                     	ds	4
   558  0024                     ?___ftmul:	
   559  0024                     ___ftmul@f1:	
   560                           ; 3 bytes @ 0x4
   561                           
   562                           
   563                           ; 3 bytes @ 0x4
   564  0024                     	ds	3
   565  0027                     ___ftmul@f2:	
   566                           
   567                           ; 3 bytes @ 0x7
   568  0027                     	ds	3
   569  002A                     ??___ftmul:	
   570                           
   571                           ; 1 bytes @ 0xA
   572  002A                     	ds	4
   573  002E                     ___ftmul@exp:	
   574                           
   575                           ; 1 bytes @ 0xE
   576  002E                     	ds	1
   577  002F                     ___ftmul@f3_as_product:	
   578                           
   579                           ; 3 bytes @ 0xF
   580  002F                     	ds	3
   581  0032                     ___ftmul@cntr:	
   582                           
   583                           ; 1 bytes @ 0x12
   584  0032                     	ds	1
   585  0033                     ___ftmul@sign:	
   586                           
   587                           ; 1 bytes @ 0x13
   588  0033                     	ds	1
   589  0034                     ?___fttol:	
   590  0034                     ___fttol@f1:	
   591                           ; 4 bytes @ 0x14
   592                           
   593                           
   594                           ; 3 bytes @ 0x14
   595  0034                     	ds	4
   596  0038                     ??___fttol:	
   597                           
   598                           ; 1 bytes @ 0x18
   599  0038                     	ds	4
   600  003C                     ___fttol@sign1:	
   601                           
   602                           ; 1 bytes @ 0x1C
   603  003C                     	ds	1
   604  003D                     ___fttol@lval:	
   605                           
   606                           ; 4 bytes @ 0x1D
   607  003D                     	ds	4
   608  0041                     ___fttol@exp1:	
   609                           
   610                           ; 1 bytes @ 0x21
   611  0041                     	ds	1
   612  0042                     Calc_Duty@i:	
   613                           
   614                           ; 2 bytes @ 0x22
   615  0042                     	ds	2
   616  0044                     ?_main:	
   617  0044                     main@argc:	
   618                           ; 2 bytes @ 0x24
   619                           
   620                           
   621                           ; 2 bytes @ 0x24
   622  0044                     	ds	2
   623  0046                     main@argv:	
   624                           
   625                           ; 2 bytes @ 0x26
   626  0046                     	ds	2
   627                           
   628                           	psect	maintext
   629  04E1                     __pmaintext:	
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 120 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  argc            2   36[BANK0 ] int 
   638 ;;  argv            2   38[BANK0 ] PTR PTR unsigned char 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2   36[BANK0 ] int 
   643 ;; Registers used:
   644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : B1F/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   650 ;;      Params:         0       4       0       0
   651 ;;      Locals:         0       0       0       0
   652 ;;      Temps:          0       0       0       0
   653 ;;      Totals:         0       4       0       0
   654 ;;Total ram usage:        4 bytes
   655 ;; Hardware stack levels required when called:    3
   656 ;; This function calls:
   657 ;;		_Calc_Duty
   658 ;;		_Initialize
   659 ;;		_Renew_Raw_Data
   660 ;;		_Servo_Output_OFF
   661 ;; This function is called by:
   662 ;;		Startup code after reset
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           
   667                           ;psect for function _main
   668  04E1                     _main:	
   669                           
   670                           ;main.c: 121: Initialize();
   671                           
   672                           ;incstack = 0
   673                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   674  04E1  3184  246B  3184   	fcall	_Initialize
   675  04E4                     l1078:	
   676                           ;main.c: 124: while (1) {
   677                           
   678                           
   679                           ;main.c: 125: Renew_Raw_Data();
   680  04E4  3184  249E  3184   	fcall	_Renew_Raw_Data
   681                           
   682                           ;main.c: 126: if (;main.c: 127: data_renew[0] ==;main.c: 128: data_renew[1] ==;main.c: 1
      +                          29: data_renew[2] ==;main.c: 130: data_renew[3];main.c: 131: )break;
   683  04E7  0020               	movlb	0	; select bank0
   684  04E8  0853               	movf	_data_renew+1,w
   685  04E9  0652               	xorwf	_data_renew,w
   686  04EA  1D03               	btfss	3,2
   687  04EB  2CEE               	goto	u1150
   688  04EC  3001               	movlw	1
   689  04ED  2CEF               	goto	u1160
   690  04EE                     u1150:	
   691  04EE  3000               	movlw	0
   692  04EF                     u1160:	
   693  04EF  0654               	xorwf	_data_renew+2,w
   694  04F0  1D03               	btfss	3,2
   695  04F1  2CF4               	goto	u1170
   696  04F2  3001               	movlw	1
   697  04F3  2CF5               	goto	u1180
   698  04F4                     u1170:	
   699  04F4  3000               	movlw	0
   700  04F5                     u1180:	
   701  04F5  0655               	xorwf	_data_renew+3,w
   702  04F6  1D03               	skipz
   703  04F7  2CE4               	goto	l1078
   704                           
   705                           ;main.c: 132: };main.c: 133: Calc_Duty();
   706  04F8  3185  2524  3184   	fcall	_Calc_Duty
   707  04FB                     L1:	
   708                           
   709                           ;main.c: 136: LATCbits.LATC3 = 1;
   710  04FB  0022               	movlb	2	; select bank2
   711  04FC  158E               	bsf	14,3	;volatile
   712                           
   713                           ;main.c: 137: LATCbits.LATC6 = 1;
   714  04FD  170E               	bsf	14,6	;volatile
   715                           
   716                           ;main.c: 138: LATCbits.LATC5 = 1;
   717  04FE  168E               	bsf	14,5	;volatile
   718                           
   719                           ;main.c: 139: LATCbits.LATC4 = 1;
   720  04FF  160E               	bsf	14,4	;volatile
   721                           
   722                           ;main.c: 144: TMR1 = 63736;
   723                           
   724                           ;main.c: 142: while (1) {
   725  0500  30F8               	movlw	248
   726  0501  0020               	movlb	0	; select bank0
   727  0502  0097               	movwf	23	;volatile
   728  0503  30F8               	movlw	248
   729  0504  0096               	movwf	22	;volatile
   730                           
   731                           ;main.c: 145: T1CONbits.TMR1ON = 1;
   732  0505  1418               	bsf	24,0	;volatile
   733  0506                     l68:	
   734                           ;main.c: 146: while (!PIR1bits.TMR1IF);
   735                           
   736  0506  1C11               	btfss	17,0	;volatile
   737  0507  2D06               	goto	l68
   738                           
   739                           ;main.c: 149: PIR1bits.TMR1IF = 0;
   740  0508  1011               	bcf	17,0	;volatile
   741                           
   742                           ;main.c: 150: TMR1 = 63136;
   743  0509  30F6               	movlw	246
   744  050A  0097               	movwf	23	;volatile
   745  050B  30A0               	movlw	160
   746  050C  0096               	movwf	22	;volatile
   747  050D                     l1100:	
   748                           ;main.c: 152: while (!PIR1bits.TMR1IF) {
   749                           
   750  050D  0020               	movlb	0	; select bank0
   751  050E  1811               	btfsc	17,0	;volatile
   752  050F  2D14               	goto	l73
   753                           
   754                           ;main.c: 154: Servo_Output_OFF();
   755  0510  3187  2714  3184   	fcall	_Servo_Output_OFF
   756  0513  2D0D               	goto	l1100
   757  0514                     l73:	
   758                           
   759                           ;main.c: 155: };main.c: 158: PIR1bits.TMR1IF = 0;
   760  0514  1011               	bcf	17,0	;volatile
   761                           
   762                           ;main.c: 159: TMR1 = 29736;
   763  0515  3074               	movlw	116
   764  0516  0097               	movwf	23	;volatile
   765  0517  3028               	movlw	40
   766  0518  0096               	movwf	22	;volatile
   767  0519                     l1102:	
   768                           ;main.c: 160: do {
   769                           
   770                           
   771                           ;main.c: 161: Renew_Raw_Data();
   772  0519  3184  249E  3184   	fcall	_Renew_Raw_Data
   773                           
   774                           ;main.c: 162: Calc_Duty();
   775  051C  3185  2524  3184   	fcall	_Calc_Duty
   776                           
   777                           ;main.c: 163: } while (!PIR1bits.TMR1IF);
   778  051F  0020               	movlb	0	; select bank0
   779  0520  1C11               	btfss	17,0	;volatile
   780  0521  2D19               	goto	l1102
   781                           
   782                           ;main.c: 164: PIR1bits.TMR1IF = 0;
   783  0522  1011               	bcf	17,0	;volatile
   784  0523  2CFB               	goto	L1
   785  0524                     __end_of_main:	
   786                           ;main.c: 170: };main.c: 171: return (0);;	Return value of _main is never used
   787                           
   788                           ;main.c: 169: LATCbits.LATC4 = 1;
   789                           
   790                           ;main.c: 168: LATCbits.LATC5 = 1;
   791                           
   792                           ;main.c: 167: LATCbits.LATC6 = 1;
   793                           
   794                           ;main.c: 166: LATCbits.LATC3 = 1;
   795                           
   796                           
   797                           	psect	text1
   798  0714                     __ptext1:	
   799 ;; *************** function _Servo_Output_OFF *****************
   800 ;; Defined at:
   801 ;;		line 202 in file "main.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   815 ;;      Params:         0       0       0       0
   816 ;;      Locals:         0       0       0       0
   817 ;;      Temps:         13       0       0       0
   818 ;;      Totals:        13       0       0       0
   819 ;;Total ram usage:       13 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; This function calls:
   822 ;;		Nothing
   823 ;; This function is called by:
   824 ;;		_main
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           
   829                           ;psect for function _Servo_Output_OFF
   830  0714                     _Servo_Output_OFF:	
   831                           
   832                           ;main.c: 203: if (TMR1 >= (63136 + servo_duty[1]) && (!EmergencyStop)) LATCbits.LATC3 = 
      +                          0;
   833                           
   834                           ;incstack = 0
   835                           ; Regs used in _Servo_Output_OFF: [wreg+status,2+status,0]
   836  0714  30A0               	movlw	160
   837  0715  00F0               	movwf	??_Servo_Output_OFF
   838  0716  30F6               	movlw	246
   839  0717  00F1               	movwf	??_Servo_Output_OFF+1
   840  0718  3000               	movlw	0
   841  0719  00F2               	movwf	??_Servo_Output_OFF+2
   842  071A  3000               	movlw	0
   843  071B  00F3               	movwf	??_Servo_Output_OFF+3
   844  071C  0020               	movlb	0	; select bank0
   845  071D  084A               	movf	_servo_duty+2,w
   846  071E  00F4               	movwf	??_Servo_Output_OFF+4
   847  071F  084B               	movf	_servo_duty+3,w
   848  0720  00F5               	movwf	??_Servo_Output_OFF+5
   849  0721  01F6               	clrf	??_Servo_Output_OFF+6
   850  0722  01F7               	clrf	??_Servo_Output_OFF+7
   851  0723  0874               	movf	??_Servo_Output_OFF+4,w
   852  0724  07F0               	addwf	??_Servo_Output_OFF,f
   853  0725  0875               	movf	??_Servo_Output_OFF+5,w
   854  0726  3DF1               	addwfc	??_Servo_Output_OFF+1,f
   855  0727  0876               	movf	??_Servo_Output_OFF+6,w
   856  0728  3DF2               	addwfc	??_Servo_Output_OFF+2,f
   857  0729  0877               	movf	??_Servo_Output_OFF+7,w
   858  072A  3DF3               	addwfc	??_Servo_Output_OFF+3,f
   859  072B  0816               	movf	22,w	;volatile
   860  072C  00F8               	movwf	??_Servo_Output_OFF+8
   861  072D  0817               	movf	23,w	;volatile
   862  072E  00F9               	movwf	??_Servo_Output_OFF+9
   863  072F  01FA               	clrf	??_Servo_Output_OFF+10
   864  0730  01FB               	clrf	??_Servo_Output_OFF+11
   865  0731  087B               	movf	??_Servo_Output_OFF+11,w
   866  0732  3A80               	xorlw	128
   867  0733  00FC               	movwf	??_Servo_Output_OFF+12
   868  0734  0873               	movf	??_Servo_Output_OFF+3,w
   869  0735  3A80               	xorlw	128
   870  0736  027C               	subwf	??_Servo_Output_OFF+12,w
   871  0737  1D03               	skipz
   872  0738  2F43               	goto	u1073
   873  0739  0872               	movf	??_Servo_Output_OFF+2,w
   874  073A  027A               	subwf	??_Servo_Output_OFF+10,w
   875  073B  1D03               	skipz
   876  073C  2F43               	goto	u1073
   877  073D  0871               	movf	??_Servo_Output_OFF+1,w
   878  073E  0279               	subwf	??_Servo_Output_OFF+9,w
   879  073F  1D03               	skipz
   880  0740  2F43               	goto	u1073
   881  0741  0870               	movf	??_Servo_Output_OFF,w
   882  0742  0278               	subwf	??_Servo_Output_OFF+8,w
   883  0743                     u1073:	
   884  0743  1C03               	skipc
   885  0744  2F4A               	goto	l1058
   886  0745  087D               	movf	_EmergencyStop,w
   887  0746  1D03               	btfss	3,2
   888  0747  2F4A               	goto	l1058
   889  0748  0022               	movlb	2	; select bank2
   890  0749  118E               	bcf	14,3	;volatile
   891  074A                     l1058:	
   892                           
   893                           ;main.c: 204: if (TMR1 >= (63136 + servo_duty[2]) && (!EmergencyStop)) LATCbits.LATC6 = 
      +                          0;
   894  074A  30A0               	movlw	160
   895  074B  00F0               	movwf	??_Servo_Output_OFF
   896  074C  30F6               	movlw	246
   897  074D  00F1               	movwf	??_Servo_Output_OFF+1
   898  074E  3000               	movlw	0
   899  074F  00F2               	movwf	??_Servo_Output_OFF+2
   900  0750  3000               	movlw	0
   901  0751  00F3               	movwf	??_Servo_Output_OFF+3
   902  0752  0020               	movlb	0	; select bank0
   903  0753  084C               	movf	_servo_duty+4,w
   904  0754  00F4               	movwf	??_Servo_Output_OFF+4
   905  0755  084D               	movf	_servo_duty+5,w
   906  0756  00F5               	movwf	??_Servo_Output_OFF+5
   907  0757  01F6               	clrf	??_Servo_Output_OFF+6
   908  0758  01F7               	clrf	??_Servo_Output_OFF+7
   909  0759  0874               	movf	??_Servo_Output_OFF+4,w
   910  075A  07F0               	addwf	??_Servo_Output_OFF,f
   911  075B  0875               	movf	??_Servo_Output_OFF+5,w
   912  075C  3DF1               	addwfc	??_Servo_Output_OFF+1,f
   913  075D  0876               	movf	??_Servo_Output_OFF+6,w
   914  075E  3DF2               	addwfc	??_Servo_Output_OFF+2,f
   915  075F  0877               	movf	??_Servo_Output_OFF+7,w
   916  0760  3DF3               	addwfc	??_Servo_Output_OFF+3,f
   917  0761  0816               	movf	22,w	;volatile
   918  0762  00F8               	movwf	??_Servo_Output_OFF+8
   919  0763  0817               	movf	23,w	;volatile
   920  0764  00F9               	movwf	??_Servo_Output_OFF+9
   921  0765  01FA               	clrf	??_Servo_Output_OFF+10
   922  0766  01FB               	clrf	??_Servo_Output_OFF+11
   923  0767  087B               	movf	??_Servo_Output_OFF+11,w
   924  0768  3A80               	xorlw	128
   925  0769  00FC               	movwf	??_Servo_Output_OFF+12
   926  076A  0873               	movf	??_Servo_Output_OFF+3,w
   927  076B  3A80               	xorlw	128
   928  076C  027C               	subwf	??_Servo_Output_OFF+12,w
   929  076D  1D03               	skipz
   930  076E  2F79               	goto	u1093
   931  076F  0872               	movf	??_Servo_Output_OFF+2,w
   932  0770  027A               	subwf	??_Servo_Output_OFF+10,w
   933  0771  1D03               	skipz
   934  0772  2F79               	goto	u1093
   935  0773  0871               	movf	??_Servo_Output_OFF+1,w
   936  0774  0279               	subwf	??_Servo_Output_OFF+9,w
   937  0775  1D03               	skipz
   938  0776  2F79               	goto	u1093
   939  0777  0870               	movf	??_Servo_Output_OFF,w
   940  0778  0278               	subwf	??_Servo_Output_OFF+8,w
   941  0779                     u1093:	
   942  0779  1C03               	skipc
   943  077A  2F80               	goto	l1064
   944  077B  087D               	movf	_EmergencyStop,w
   945  077C  1D03               	btfss	3,2
   946  077D  2F80               	goto	l1064
   947  077E  0022               	movlb	2	; select bank2
   948  077F  130E               	bcf	14,6	;volatile
   949  0780                     l1064:	
   950                           
   951                           ;main.c: 205: if (TMR1 >= (63136 + servo_duty[3]) && (!EmergencyStop)) LATCbits.LATC5 = 
      +                          0;
   952  0780  30A0               	movlw	160
   953  0781  00F0               	movwf	??_Servo_Output_OFF
   954  0782  30F6               	movlw	246
   955  0783  00F1               	movwf	??_Servo_Output_OFF+1
   956  0784  3000               	movlw	0
   957  0785  00F2               	movwf	??_Servo_Output_OFF+2
   958  0786  3000               	movlw	0
   959  0787  00F3               	movwf	??_Servo_Output_OFF+3
   960  0788  0020               	movlb	0	; select bank0
   961  0789  084E               	movf	_servo_duty+6,w
   962  078A  00F4               	movwf	??_Servo_Output_OFF+4
   963  078B  084F               	movf	_servo_duty+7,w
   964  078C  00F5               	movwf	??_Servo_Output_OFF+5
   965  078D  01F6               	clrf	??_Servo_Output_OFF+6
   966  078E  01F7               	clrf	??_Servo_Output_OFF+7
   967  078F  0874               	movf	??_Servo_Output_OFF+4,w
   968  0790  07F0               	addwf	??_Servo_Output_OFF,f
   969  0791  0875               	movf	??_Servo_Output_OFF+5,w
   970  0792  3DF1               	addwfc	??_Servo_Output_OFF+1,f
   971  0793  0876               	movf	??_Servo_Output_OFF+6,w
   972  0794  3DF2               	addwfc	??_Servo_Output_OFF+2,f
   973  0795  0877               	movf	??_Servo_Output_OFF+7,w
   974  0796  3DF3               	addwfc	??_Servo_Output_OFF+3,f
   975  0797  0816               	movf	22,w	;volatile
   976  0798  00F8               	movwf	??_Servo_Output_OFF+8
   977  0799  0817               	movf	23,w	;volatile
   978  079A  00F9               	movwf	??_Servo_Output_OFF+9
   979  079B  01FA               	clrf	??_Servo_Output_OFF+10
   980  079C  01FB               	clrf	??_Servo_Output_OFF+11
   981  079D  087B               	movf	??_Servo_Output_OFF+11,w
   982  079E  3A80               	xorlw	128
   983  079F  00FC               	movwf	??_Servo_Output_OFF+12
   984  07A0  0873               	movf	??_Servo_Output_OFF+3,w
   985  07A1  3A80               	xorlw	128
   986  07A2  027C               	subwf	??_Servo_Output_OFF+12,w
   987  07A3  1D03               	skipz
   988  07A4  2FAF               	goto	u1113
   989  07A5  0872               	movf	??_Servo_Output_OFF+2,w
   990  07A6  027A               	subwf	??_Servo_Output_OFF+10,w
   991  07A7  1D03               	skipz
   992  07A8  2FAF               	goto	u1113
   993  07A9  0871               	movf	??_Servo_Output_OFF+1,w
   994  07AA  0279               	subwf	??_Servo_Output_OFF+9,w
   995  07AB  1D03               	skipz
   996  07AC  2FAF               	goto	u1113
   997  07AD  0870               	movf	??_Servo_Output_OFF,w
   998  07AE  0278               	subwf	??_Servo_Output_OFF+8,w
   999  07AF                     u1113:	
  1000  07AF  1C03               	skipc
  1001  07B0  2FB6               	goto	l1070
  1002  07B1  087D               	movf	_EmergencyStop,w
  1003  07B2  1D03               	btfss	3,2
  1004  07B3  2FB6               	goto	l1070
  1005  07B4  0022               	movlb	2	; select bank2
  1006  07B5  128E               	bcf	14,5	;volatile
  1007  07B6                     l1070:	
  1008                           
  1009                           ;main.c: 206: if (TMR1 >= (63136 + servo_duty[4]) && (!EmergencyStop)) LATCbits.LATC4 = 
      +                          0;
  1010  07B6  30A0               	movlw	160
  1011  07B7  00F0               	movwf	??_Servo_Output_OFF
  1012  07B8  30F6               	movlw	246
  1013  07B9  00F1               	movwf	??_Servo_Output_OFF+1
  1014  07BA  3000               	movlw	0
  1015  07BB  00F2               	movwf	??_Servo_Output_OFF+2
  1016  07BC  3000               	movlw	0
  1017  07BD  00F3               	movwf	??_Servo_Output_OFF+3
  1018  07BE  0020               	movlb	0	; select bank0
  1019  07BF  0850               	movf	_servo_duty+8,w
  1020  07C0  00F4               	movwf	??_Servo_Output_OFF+4
  1021  07C1  0851               	movf	_servo_duty+9,w
  1022  07C2  00F5               	movwf	??_Servo_Output_OFF+5
  1023  07C3  01F6               	clrf	??_Servo_Output_OFF+6
  1024  07C4  01F7               	clrf	??_Servo_Output_OFF+7
  1025  07C5  0874               	movf	??_Servo_Output_OFF+4,w
  1026  07C6  07F0               	addwf	??_Servo_Output_OFF,f
  1027  07C7  0875               	movf	??_Servo_Output_OFF+5,w
  1028  07C8  3DF1               	addwfc	??_Servo_Output_OFF+1,f
  1029  07C9  0876               	movf	??_Servo_Output_OFF+6,w
  1030  07CA  3DF2               	addwfc	??_Servo_Output_OFF+2,f
  1031  07CB  0877               	movf	??_Servo_Output_OFF+7,w
  1032  07CC  3DF3               	addwfc	??_Servo_Output_OFF+3,f
  1033  07CD  0816               	movf	22,w	;volatile
  1034  07CE  00F8               	movwf	??_Servo_Output_OFF+8
  1035  07CF  0817               	movf	23,w	;volatile
  1036  07D0  00F9               	movwf	??_Servo_Output_OFF+9
  1037  07D1  01FA               	clrf	??_Servo_Output_OFF+10
  1038  07D2  01FB               	clrf	??_Servo_Output_OFF+11
  1039  07D3  087B               	movf	??_Servo_Output_OFF+11,w
  1040  07D4  3A80               	xorlw	128
  1041  07D5  00FC               	movwf	??_Servo_Output_OFF+12
  1042  07D6  0873               	movf	??_Servo_Output_OFF+3,w
  1043  07D7  3A80               	xorlw	128
  1044  07D8  027C               	subwf	??_Servo_Output_OFF+12,w
  1045  07D9  1D03               	skipz
  1046  07DA  2FE5               	goto	u1133
  1047  07DB  0872               	movf	??_Servo_Output_OFF+2,w
  1048  07DC  027A               	subwf	??_Servo_Output_OFF+10,w
  1049  07DD  1D03               	skipz
  1050  07DE  2FE5               	goto	u1133
  1051  07DF  0871               	movf	??_Servo_Output_OFF+1,w
  1052  07E0  0279               	subwf	??_Servo_Output_OFF+9,w
  1053  07E1  1D03               	skipz
  1054  07E2  2FE5               	goto	u1133
  1055  07E3  0870               	movf	??_Servo_Output_OFF,w
  1056  07E4  0278               	subwf	??_Servo_Output_OFF+8,w
  1057  07E5                     u1133:	
  1058  07E5  1C03               	skipc
  1059  07E6  0008               	return
  1060  07E7  087D               	movf	_EmergencyStop,w
  1061  07E8  1D03               	btfss	3,2
  1062  07E9  0008               	return
  1063  07EA  0022               	movlb	2	; select bank2
  1064  07EB  120E               	bcf	14,4	;volatile
  1065  07EC  0008               	return
  1066  07ED                     __end_of_Servo_Output_OFF:	
  1067                           ;main.c: 207: else;
  1068                           
  1069                           
  1070                           	psect	text2
  1071  049E                     __ptext2:	
  1072 ;; *************** function _Renew_Raw_Data *****************
  1073 ;; Defined at:
  1074 ;;		line 174 in file "main.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1088 ;;      Params:         0       0       0       0
  1089 ;;      Locals:         0       0       0       0
  1090 ;;      Temps:          4       0       0       0
  1091 ;;      Totals:         4       0       0       0
  1092 ;;Total ram usage:        4 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_main
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _Renew_Raw_Data
  1103  049E                     _Renew_Raw_Data:	
  1104                           
  1105                           ;main.c: 181: if (PORTA == 0xFF) {
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _Renew_Raw_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
  1109  049E  0020               	movlb	0	; select bank0
  1110  049F  0A0C               	incf	12,w	;volatile
  1111  04A0  1D03               	btfss	3,2
  1112  04A1  2CA5               	goto	l1034
  1113                           
  1114                           ;main.c: 182: EmergencyStop = 1;
  1115  04A2  01FD               	clrf	_EmergencyStop
  1116  04A3  0AFD               	incf	_EmergencyStop,f
  1117                           
  1118                           ;main.c: 183: } else {
  1119  04A4  2CC3               	goto	l1038
  1120  04A5                     l1034:	
  1121                           
  1122                           ;main.c: 184: EmergencyStop = 0;
  1123  04A5  01FD               	clrf	_EmergencyStop
  1124                           
  1125                           ;main.c: 185: servo_raw_data[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (PORTCbits.R
      +                          C0))] = PORTA;
  1126  04A6  080C               	movf	12,w	;volatile
  1127  04A7  00F0               	movwf	??_Renew_Raw_Data
  1128  04A8  080E               	movf	14,w	;volatile
  1129  04A9  3901               	andlw	1
  1130  04AA  00F1               	movwf	??_Renew_Raw_Data+1
  1131  04AB  0C0E               	rrf	14,w	;volatile
  1132  04AC  3901               	andlw	1
  1133  04AD  00F2               	movwf	??_Renew_Raw_Data+2
  1134  04AE  3001               	movlw	1
  1135  04AF                     u975:	
  1136  04AF  35F2               	lslf	??_Renew_Raw_Data+2,f
  1137  04B0  0B89               	decfsz	9,f
  1138  04B1  2CAF               	goto	u975
  1139  04B2  0C0E               	rrf	14,w	;volatile
  1140  04B3  0C89               	rrf	9,f
  1141  04B4  3901               	andlw	1
  1142  04B5  00F3               	movwf	??_Renew_Raw_Data+3
  1143  04B6  3001               	movlw	1
  1144  04B7                     u985:	
  1145  04B7  35F3               	lslf	??_Renew_Raw_Data+3,f
  1146  04B8  3EFF               	addlw	-1
  1147  04B9  1D03               	skipz
  1148  04BA  2CB7               	goto	u985
  1149  04BB  3573               	lslf	??_Renew_Raw_Data+3,w
  1150  04BC  0472               	iorwf	??_Renew_Raw_Data+2,w
  1151  04BD  0471               	iorwf	??_Renew_Raw_Data+1,w
  1152  04BE  3E56               	addlw	(low (_servo_raw_data| 0))& (0+255)
  1153  04BF  0086               	movwf	6
  1154  04C0  0187               	clrf	7
  1155  04C1  0870               	movf	??_Renew_Raw_Data,w
  1156  04C2  0081               	movwf	1
  1157  04C3                     l1038:	
  1158                           
  1159                           ;main.c: 186: };main.c: 188: data_renew[((PORTCbits.RC2 << 2) | (PORTCbits.RC1 << 1) | (
      +                          PORTCbits.RC0))] ^= 1;
  1160  04C3  3001               	movlw	1
  1161  04C4  00F0               	movwf	??_Renew_Raw_Data
  1162  04C5  080E               	movf	14,w	;volatile
  1163  04C6  3901               	andlw	1
  1164  04C7  00F1               	movwf	??_Renew_Raw_Data+1
  1165  04C8  0C0E               	rrf	14,w	;volatile
  1166  04C9  3901               	andlw	1
  1167  04CA  00F2               	movwf	??_Renew_Raw_Data+2
  1168  04CB  3001               	movlw	1
  1169  04CC                     u995:	
  1170  04CC  35F2               	lslf	??_Renew_Raw_Data+2,f
  1171  04CD  0B89               	decfsz	9,f
  1172  04CE  2CCC               	goto	u995
  1173  04CF  0C0E               	rrf	14,w	;volatile
  1174  04D0  0C89               	rrf	9,f
  1175  04D1  3901               	andlw	1
  1176  04D2  00F3               	movwf	??_Renew_Raw_Data+3
  1177  04D3  3001               	movlw	1
  1178  04D4                     u1005:	
  1179  04D4  35F3               	lslf	??_Renew_Raw_Data+3,f
  1180  04D5  3EFF               	addlw	-1
  1181  04D6  1D03               	skipz
  1182  04D7  2CD4               	goto	u1005
  1183  04D8  3573               	lslf	??_Renew_Raw_Data+3,w
  1184  04D9  0472               	iorwf	??_Renew_Raw_Data+2,w
  1185  04DA  0471               	iorwf	??_Renew_Raw_Data+1,w
  1186  04DB  3E52               	addlw	(low (_data_renew| 0))& (0+255)
  1187  04DC  0086               	movwf	6
  1188  04DD  0187               	clrf	7
  1189  04DE  0870               	movf	??_Renew_Raw_Data,w
  1190  04DF  0681               	xorwf	1,f
  1191  04E0  0008               	return
  1192  04E1                     __end_of_Renew_Raw_Data:	
  1193                           
  1194                           	psect	text3
  1195  046B                     __ptext3:	
  1196 ;; *************** function _Initialize *****************
  1197 ;; Defined at:
  1198 ;;		line 214 in file "main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1212 ;;      Params:         0       0       0       0
  1213 ;;      Locals:         0       0       0       0
  1214 ;;      Temps:          0       0       0       0
  1215 ;;      Totals:         0       0       0       0
  1216 ;;Total ram usage:        0 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    1
  1219 ;; This function calls:
  1220 ;;		_Oscillator_Initialize
  1221 ;;		_Pin_Initialize
  1222 ;;		_Timer_Initialize
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _Initialize
  1230  046B                     _Initialize:	
  1231                           
  1232                           ;main.c: 215: Oscillator_Initialize();
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in _Initialize: [wreg+status,2+status,0+pclath+cstack]
  1236  046B  3184  245A  3184   	fcall	_Oscillator_Initialize
  1237                           
  1238                           ;main.c: 216: Pin_Initialize();
  1239  046E  3184  2474  3184   	fcall	_Pin_Initialize
  1240                           
  1241                           ;main.c: 217: Timer_Initialize();
  1242  0471  3184  2464         	fcall	_Timer_Initialize
  1243  0473  0008               	return
  1244  0474                     __end_of_Initialize:	
  1245                           
  1246                           	psect	text4
  1247  0464                     __ptext4:	
  1248 ;; *************** function _Timer_Initialize *****************
  1249 ;; Defined at:
  1250 ;;		line 248 in file "main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		status,2
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1264 ;;      Params:         0       0       0       0
  1265 ;;      Locals:         0       0       0       0
  1266 ;;      Temps:          0       0       0       0
  1267 ;;      Totals:         0       0       0       0
  1268 ;;Total ram usage:        0 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_Initialize
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function _Timer_Initialize
  1279  0464                     _Timer_Initialize:	
  1280                           
  1281                           ;main.c: 251: T1CON = 0x00;
  1282                           
  1283                           ;incstack = 0
  1284                           ; Regs used in _Timer_Initialize: [status,2]
  1285  0464  0020               	movlb	0	; select bank0
  1286  0465  0198               	clrf	24	;volatile
  1287                           
  1288                           ;main.c: 254: INTCONbits.GIE = 0;
  1289  0466  138B               	bcf	11,7	;volatile
  1290                           
  1291                           ;main.c: 255: INTCONbits.PEIE = 0;
  1292  0467  130B               	bcf	11,6	;volatile
  1293                           
  1294                           ;main.c: 257: PIE1bits.TMR1IE = 0;
  1295  0468  0021               	movlb	1	; select bank1
  1296  0469  1011               	bcf	17,0	;volatile
  1297  046A  0008               	return
  1298  046B                     __end_of_Timer_Initialize:	
  1299                           
  1300                           	psect	text5
  1301  0474                     __ptext5:	
  1302 ;; *************** function _Pin_Initialize *****************
  1303 ;; Defined at:
  1304 ;;		line 224 in file "main.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1318 ;;      Params:         0       0       0       0
  1319 ;;      Locals:         0       0       0       0
  1320 ;;      Temps:          0       0       0       0
  1321 ;;      Totals:         0       0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_Initialize
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           
  1332                           ;psect for function _Pin_Initialize
  1333  0474                     _Pin_Initialize:	
  1334                           
  1335                           ;main.c: 227: ANSELA = 0x00;
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _Pin_Initialize: [wreg+status,2]
  1339  0474  0023               	movlb	3	; select bank3
  1340  0475  018C               	clrf	12	;volatile
  1341                           
  1342                           ;main.c: 228: ANSELB = 0x00;
  1343  0476  018D               	clrf	13	;volatile
  1344                           
  1345                           ;main.c: 230: TRISA = 0xFF;
  1346  0477  30FF               	movlw	255
  1347  0478  0021               	movlb	1	; select bank1
  1348  0479  008C               	movwf	12	;volatile
  1349                           
  1350                           ;main.c: 233: TRISCbits.TRISC0 = 1;
  1351  047A  140E               	bsf	14,0	;volatile
  1352                           
  1353                           ;main.c: 234: TRISCbits.TRISC1 = 1;
  1354  047B  148E               	bsf	14,1	;volatile
  1355                           
  1356                           ;main.c: 235: TRISCbits.TRISC2 = 1;
  1357  047C  150E               	bsf	14,2	;volatile
  1358                           
  1359                           ;main.c: 238: TRISCbits.TRISC3 = 0;
  1360  047D  118E               	bcf	14,3	;volatile
  1361                           
  1362                           ;main.c: 239: TRISCbits.TRISC4 = 0;
  1363  047E  120E               	bcf	14,4	;volatile
  1364                           
  1365                           ;main.c: 240: TRISCbits.TRISC5 = 0;
  1366  047F  128E               	bcf	14,5	;volatile
  1367                           
  1368                           ;main.c: 241: TRISCbits.TRISC6 = 0;
  1369  0480  130E               	bcf	14,6	;volatile
  1370                           
  1371                           ;main.c: 244: TRISBbits.TRISB0 = 0;
  1372  0481  100D               	bcf	13,0	;volatile
  1373                           
  1374                           ;main.c: 245: TRISCbits.TRISC7 = 0;
  1375  0482  138E               	bcf	14,7	;volatile
  1376  0483  0008               	return
  1377  0484                     __end_of_Pin_Initialize:	
  1378                           
  1379                           	psect	text6
  1380  045A                     __ptext6:	
  1381 ;; *************** function _Oscillator_Initialize *****************
  1382 ;; Defined at:
  1383 ;;		line 220 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1397 ;;      Params:         0       0       0       0
  1398 ;;      Locals:         0       0       0       0
  1399 ;;      Temps:          0       0       0       0
  1400 ;;      Totals:         0       0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_Initialize
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           
  1411                           ;psect for function _Oscillator_Initialize
  1412  045A                     _Oscillator_Initialize:	
  1413                           
  1414                           ;main.c: 221: OSCCON = 0x73;
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _Oscillator_Initialize: [wreg]
  1418  045A  3073               	movlw	115
  1419  045B  0021               	movlb	1	; select bank1
  1420  045C  0099               	movwf	25	;volatile
  1421  045D  0008               	return
  1422  045E                     __end_of_Oscillator_Initialize:	
  1423                           
  1424                           	psect	text7
  1425  0524                     __ptext7:	
  1426 ;; *************** function _Calc_Duty *****************
  1427 ;; Defined at:
  1428 ;;		line 191 in file "main.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  i               2   34[BANK0 ] int 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1442 ;;      Params:         0       0       0       0
  1443 ;;      Locals:         0       2       0       0
  1444 ;;      Temps:          1       0       0       0
  1445 ;;      Totals:         1       2       0       0
  1446 ;;Total ram usage:        3 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		___ftmul
  1451 ;;		___fttol
  1452 ;;		___lbtoft
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           
  1459                           ;psect for function _Calc_Duty
  1460  0524                     _Calc_Duty:	
  1461                           
  1462                           ;main.c: 192: int i;;main.c: 195: LATBbits.LATB0 = PORTAbits.RA0;
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in _Calc_Duty: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1466  0524  0020               	movlb	0	; select bank0
  1467  0525  1C0C               	btfss	12,0	;volatile
  1468  0526  2D2A               	goto	u1010
  1469  0527  0022               	movlb	2	; select bank2
  1470  0528  140D               	bsf	13,0	;volatile
  1471  0529  2D2C               	goto	u1024
  1472  052A                     u1010:	
  1473  052A  0022               	movlb	2	; select bank2
  1474  052B  100D               	bcf	13,0	;volatile
  1475  052C                     u1024:	
  1476                           
  1477                           ;main.c: 196: LATCbits.LATC7 = PORTAbits.RA1;
  1478  052C  0020               	movlb	0	; select bank0
  1479  052D  1C8C               	btfss	12,1	;volatile
  1480  052E  2D32               	goto	u1030
  1481  052F  0022               	movlb	2	; select bank2
  1482  0530  178E               	bsf	14,7	;volatile
  1483  0531  2D34               	goto	l1042
  1484  0532                     u1030:	
  1485  0532  0022               	movlb	2	; select bank2
  1486  0533  138E               	bcf	14,7	;volatile
  1487  0534                     l1042:	
  1488                           
  1489                           ;main.c: 197: for (i = 1; i < 5; i++) {
  1490  0534  3001               	movlw	1
  1491  0535  0020               	movlb	0	; select bank0
  1492  0536  00C2               	movwf	Calc_Duty@i
  1493  0537  3000               	movlw	0
  1494  0538  00C3               	movwf	Calc_Duty@i+1
  1495  0539                     L2:	
  1496  0539  0843               	movf	Calc_Duty@i+1,w
  1497  053A  3A80               	xorlw	128
  1498  053B  00FC               	movwf	??_Calc_Duty
  1499  053C  3080               	movlw	128
  1500  053D  027C               	subwf	??_Calc_Duty,w
  1501  053E  1D03               	skipz
  1502  053F  2D42               	goto	u1055
  1503  0540  3005               	movlw	5
  1504  0541  0242               	subwf	Calc_Duty@i,w
  1505  0542                     u1055:	
  1506  0542  1803               	btfsc	3,0
  1507  0543  0008               	return
  1508                           
  1509                           ;main.c: 198: servo_duty[i] = ((servo_raw_data[i] * 667E-8) * 2000000);
  1510  0544  0020               	movlb	0	; select bank0
  1511  0545  0842               	movf	Calc_Duty@i,w
  1512  0546  3E56               	addlw	(low (_servo_raw_data| 0))& (0+255)
  1513  0547  0086               	movwf	6
  1514  0548  0187               	clrf	7
  1515  0549  0801               	movf	1,w
  1516  054A  3184  2484  3185   	fcall	___lbtoft
  1517  054D  0878               	movf	?___lbtoft,w
  1518  054E  0020               	movlb	0	; select bank0
  1519  054F  00A7               	movwf	___ftmul@f2
  1520  0550  0879               	movf	?___lbtoft+1,w
  1521  0551  00A8               	movwf	___ftmul@f2+1
  1522  0552  087A               	movf	?___lbtoft+2,w
  1523  0553  00A9               	movwf	___ftmul@f2+2
  1524  0554  3071               	movlw	113
  1525  0555  00A4               	movwf	___ftmul@f1
  1526  0556  3055               	movlw	85
  1527  0557  00A5               	movwf	___ftmul@f1+1
  1528  0558  3041               	movlw	65
  1529  0559  00A6               	movwf	___ftmul@f1+2
  1530  055A  3186  2660  3185   	fcall	___ftmul
  1531  055D  0020               	movlb	0	; select bank0
  1532  055E  0824               	movf	?___ftmul,w
  1533  055F  00B4               	movwf	___fttol@f1
  1534  0560  0825               	movf	?___ftmul+1,w
  1535  0561  00B5               	movwf	___fttol@f1+1
  1536  0562  0826               	movf	?___ftmul+2,w
  1537  0563  00B6               	movwf	___fttol@f1+2
  1538  0564  3185  25D9  3185   	fcall	___fttol
  1539  0567  0020               	movlb	0	; select bank0
  1540  0568  3542               	lslf	Calc_Duty@i,w
  1541  0569  3E48               	addlw	(low (_servo_duty| 0))& (0+255)
  1542  056A  0086               	movwf	6
  1543  056B  0187               	clrf	7
  1544  056C  0834               	movf	?___fttol,w
  1545  056D  3FC0               	movwi [0]fsr1
  1546  056E  0835               	movf	?___fttol+1,w
  1547  056F  3FC1               	movwi [1]fsr1
  1548  0570  3001               	movlw	1
  1549  0571  07C2               	addwf	Calc_Duty@i,f
  1550  0572  3000               	movlw	0
  1551  0573  3DC3               	addwfc	Calc_Duty@i+1,f
  1552  0574  2D39               	goto	L2
  1553  0575                     __end_of_Calc_Duty:	
  1554                           
  1555                           	psect	text8
  1556  0484                     __ptext8:	
  1557 ;; *************** function ___lbtoft *****************
  1558 ;; Defined at:
  1559 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lbtoft.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  c               1    wreg     unsigned char 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  c               1   11[COMMON] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  3    8[COMMON] float 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0, pclath, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1573 ;;      Params:         3       0       0       0
  1574 ;;      Locals:         1       0       0       0
  1575 ;;      Temps:          0       4       0       0
  1576 ;;      Totals:         4       4       0       0
  1577 ;;Total ram usage:        8 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    1
  1580 ;; This function calls:
  1581 ;;		___ftpack
  1582 ;; This function is called by:
  1583 ;;		_Calc_Duty
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function ___lbtoft
  1589  0484                     ___lbtoft:	
  1590                           
  1591                           ;incstack = 0
  1592                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1593                           ;___lbtoft@c stored from wreg
  1594  0484  00FB               	movwf	___lbtoft@c
  1595  0485  087B               	movf	___lbtoft@c,w
  1596  0486  0020               	movlb	0	; select bank0
  1597  0487  00A0               	movwf	??___lbtoft
  1598  0488  01A1               	clrf	??___lbtoft+1
  1599  0489  01A2               	clrf	??___lbtoft+2
  1600  048A  0820               	movf	??___lbtoft,w
  1601  048B  00F0               	movwf	___ftpack@arg
  1602  048C  0821               	movf	??___lbtoft+1,w
  1603  048D  00F1               	movwf	___ftpack@arg+1
  1604  048E  0822               	movf	??___lbtoft+2,w
  1605  048F  00F2               	movwf	___ftpack@arg+2
  1606  0490  308E               	movlw	142
  1607  0491  00A3               	movwf	??___lbtoft+3
  1608  0492  0823               	movf	??___lbtoft+3,w
  1609  0493  00F3               	movwf	___ftpack@exp
  1610  0494  01F4               	clrf	___ftpack@sign
  1611  0495  3185  2575         	fcall	___ftpack
  1612  0497  0870               	movf	?___ftpack,w
  1613  0498  00F8               	movwf	?___lbtoft
  1614  0499  0871               	movf	?___ftpack+1,w
  1615  049A  00F9               	movwf	?___lbtoft+1
  1616  049B  0872               	movf	?___ftpack+2,w
  1617  049C  00FA               	movwf	?___lbtoft+2
  1618  049D  0008               	return
  1619  049E                     __end_of___lbtoft:	
  1620                           
  1621                           	psect	text9
  1622  05D9                     __ptext9:	
  1623 ;; *************** function ___fttol *****************
  1624 ;; Defined at:
  1625 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fttol.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  f1              3   20[BANK0 ] float 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  lval            4   29[BANK0 ] unsigned long 
  1630 ;;  exp1            1   33[BANK0 ] unsigned char 
  1631 ;;  sign1           1   28[BANK0 ] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  4   20[BANK0 ] long 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1641 ;;      Params:         0       4       0       0
  1642 ;;      Locals:         0       6       0       0
  1643 ;;      Temps:          0       4       0       0
  1644 ;;      Totals:         0      14       0       0
  1645 ;;Total ram usage:       14 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_Calc_Duty
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           
  1655                           ;psect for function ___fttol
  1656  05D9                     ___fttol:	
  1657                           
  1658                           ;incstack = 0
  1659                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1660  05D9  0020               	movlb	0	; select bank0
  1661  05DA  0834               	movf	___fttol@f1,w
  1662  05DB  00B8               	movwf	??___fttol
  1663  05DC  0835               	movf	___fttol@f1+1,w
  1664  05DD  00B9               	movwf	??___fttol+1
  1665  05DE  0836               	movf	___fttol@f1+2,w
  1666  05DF  00BA               	movwf	??___fttol+2
  1667  05E0  1003               	clrc
  1668  05E1  0D39               	rlf	??___fttol+1,w
  1669  05E2  0D3A               	rlf	??___fttol+2,w
  1670  05E3  00BB               	movwf	??___fttol+3
  1671  05E4  083B               	movf	??___fttol+3,w
  1672  05E5  00C1               	movwf	___fttol@exp1
  1673  05E6  0841               	movf	___fttol@exp1,w
  1674  05E7  1D03               	btfss	3,2
  1675  05E8  2DF2               	goto	l986
  1676  05E9  3000               	movlw	0
  1677  05EA  00B7               	movwf	?___fttol+3
  1678  05EB  3000               	movlw	0
  1679  05EC  00B6               	movwf	?___fttol+2
  1680  05ED  3000               	movlw	0
  1681  05EE  00B5               	movwf	?___fttol+1
  1682  05EF  3000               	movlw	0
  1683  05F0  00B4               	movwf	?___fttol
  1684  05F1  0008               	return
  1685  05F2                     l986:	
  1686  05F2  0834               	movf	___fttol@f1,w
  1687  05F3  00B8               	movwf	??___fttol
  1688  05F4  0835               	movf	___fttol@f1+1,w
  1689  05F5  00B9               	movwf	??___fttol+1
  1690  05F6  0836               	movf	___fttol@f1+2,w
  1691  05F7  00BA               	movwf	??___fttol+2
  1692  05F8  3017               	movlw	23
  1693  05F9                     u875:	
  1694  05F9  36BA               	lsrf	??___fttol+2,f
  1695  05FA  0CB9               	rrf	??___fttol+1,f
  1696  05FB  0CB8               	rrf	??___fttol,f
  1697  05FC  0B89               	decfsz	9,f
  1698  05FD  2DF9               	goto	u875
  1699  05FE  0838               	movf	??___fttol,w
  1700  05FF  00BB               	movwf	??___fttol+3
  1701  0600  083B               	movf	??___fttol+3,w
  1702  0601  00BC               	movwf	___fttol@sign1
  1703  0602  17B5               	bsf	___fttol@f1+1,7
  1704  0603  30FF               	movlw	255
  1705  0604  05B4               	andwf	___fttol@f1,f
  1706  0605  30FF               	movlw	255
  1707  0606  05B5               	andwf	___fttol@f1+1,f
  1708  0607  3000               	movlw	0
  1709  0608  05B6               	andwf	___fttol@f1+2,f
  1710  0609  0834               	movf	___fttol@f1,w
  1711  060A  00BD               	movwf	___fttol@lval
  1712  060B  0835               	movf	___fttol@f1+1,w
  1713  060C  00BE               	movwf	___fttol@lval+1
  1714  060D  0836               	movf	___fttol@f1+2,w
  1715  060E  00BF               	movwf	___fttol@lval+2
  1716  060F  01C0               	clrf	___fttol@lval+3
  1717  0610  308E               	movlw	142
  1718  0611  02C1               	subwf	___fttol@exp1,f
  1719  0612  1FC1               	btfss	___fttol@exp1,7
  1720  0613  2E30               	goto	l1006
  1721  0614  0841               	movf	___fttol@exp1,w
  1722  0615  3A80               	xorlw	128
  1723  0616  3E8F               	addlw	143
  1724  0617  1803               	skipnc
  1725  0618  2E22               	goto	l1004
  1726  0619  3000               	movlw	0
  1727  061A  00B7               	movwf	?___fttol+3
  1728  061B  3000               	movlw	0
  1729  061C  00B6               	movwf	?___fttol+2
  1730  061D  3000               	movlw	0
  1731  061E  00B5               	movwf	?___fttol+1
  1732  061F  3000               	movlw	0
  1733  0620  00B4               	movwf	?___fttol
  1734  0621  0008               	return
  1735  0622                     l1004:	
  1736  0622  3001               	movlw	1
  1737  0623                     u905:	
  1738  0623  36C0               	lsrf	___fttol@lval+3,f
  1739  0624  0CBF               	rrf	___fttol@lval+2,f
  1740  0625  0CBE               	rrf	___fttol@lval+1,f
  1741  0626  0CBD               	rrf	___fttol@lval,f
  1742  0627  0B89               	decfsz	9,f
  1743  0628  2E23               	goto	u905
  1744  0629  3001               	movlw	1
  1745  062A  00B8               	movwf	??___fttol
  1746  062B  0838               	movf	??___fttol,w
  1747  062C  07C1               	addwf	___fttol@exp1,f
  1748  062D  1903               	btfsc	3,2
  1749  062E  2E49               	goto	l1014
  1750  062F  2E22               	goto	l1004
  1751  0630                     l1006:	
  1752  0630  3018               	movlw	24
  1753  0631  0241               	subwf	___fttol@exp1,w
  1754  0632  1C03               	skipc
  1755  0633  2E46               	goto	l488
  1756  0634  3000               	movlw	0
  1757  0635  00B7               	movwf	?___fttol+3
  1758  0636  3000               	movlw	0
  1759  0637  00B6               	movwf	?___fttol+2
  1760  0638  3000               	movlw	0
  1761  0639  00B5               	movwf	?___fttol+1
  1762  063A  3000               	movlw	0
  1763  063B  00B4               	movwf	?___fttol
  1764  063C  0008               	return
  1765  063D                     l1012:	
  1766  063D  3001               	movlw	1
  1767  063E                     u935:	
  1768  063E  35BD               	lslf	___fttol@lval,f
  1769  063F  0DBE               	rlf	___fttol@lval+1,f
  1770  0640  0DBF               	rlf	___fttol@lval+2,f
  1771  0641  0DC0               	rlf	___fttol@lval+3,f
  1772  0642  0B89               	decfsz	9,f
  1773  0643  2E3E               	goto	u935
  1774  0644  3001               	movlw	1
  1775  0645  02C1               	subwf	___fttol@exp1,f
  1776  0646                     l488:	
  1777  0646  0841               	movf	___fttol@exp1,w
  1778  0647  1D03               	btfss	3,2
  1779  0648  2E3D               	goto	l1012
  1780  0649                     l1014:	
  1781  0649  083C               	movf	___fttol@sign1,w
  1782  064A  1903               	btfsc	3,2
  1783  064B  2E57               	goto	l1018
  1784  064C  09BD               	comf	___fttol@lval,f
  1785  064D  09BE               	comf	___fttol@lval+1,f
  1786  064E  09BF               	comf	___fttol@lval+2,f
  1787  064F  09C0               	comf	___fttol@lval+3,f
  1788  0650  0ABD               	incf	___fttol@lval,f
  1789  0651  1903               	skipnz
  1790  0652  0ABE               	incf	___fttol@lval+1,f
  1791  0653  1903               	skipnz
  1792  0654  0ABF               	incf	___fttol@lval+2,f
  1793  0655  1903               	skipnz
  1794  0656  0AC0               	incf	___fttol@lval+3,f
  1795  0657                     l1018:	
  1796  0657  0840               	movf	___fttol@lval+3,w
  1797  0658  00B7               	movwf	?___fttol+3
  1798  0659  083F               	movf	___fttol@lval+2,w
  1799  065A  00B6               	movwf	?___fttol+2
  1800  065B  083E               	movf	___fttol@lval+1,w
  1801  065C  00B5               	movwf	?___fttol+1
  1802  065D  083D               	movf	___fttol@lval,w
  1803  065E  00B4               	movwf	?___fttol
  1804  065F  0008               	return
  1805  0660                     __end_of___fttol:	
  1806                           
  1807                           	psect	text10
  1808  0660                     __ptext10:	
  1809 ;; *************** function ___ftmul *****************
  1810 ;; Defined at:
  1811 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ftmul.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;  f1              3    4[BANK0 ] float 
  1814 ;;  f2              3    7[BANK0 ] float 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  1817 ;;  sign            1   19[BANK0 ] unsigned char 
  1818 ;;  cntr            1   18[BANK0 ] unsigned char 
  1819 ;;  exp             1   14[BANK0 ] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  3    4[BANK0 ] float 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1829 ;;      Params:         0       6       0       0
  1830 ;;      Locals:         0       6       0       0
  1831 ;;      Temps:          0       4       0       0
  1832 ;;      Totals:         0      16       0       0
  1833 ;;Total ram usage:       16 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    1
  1836 ;; This function calls:
  1837 ;;		___ftpack
  1838 ;; This function is called by:
  1839 ;;		_Calc_Duty
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function ___ftmul
  1845  0660                     ___ftmul:	
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1849  0660  0020               	movlb	0	; select bank0
  1850  0661  0824               	movf	___ftmul@f1,w
  1851  0662  00AA               	movwf	??___ftmul
  1852  0663  0825               	movf	___ftmul@f1+1,w
  1853  0664  00AB               	movwf	??___ftmul+1
  1854  0665  0826               	movf	___ftmul@f1+2,w
  1855  0666  00AC               	movwf	??___ftmul+2
  1856  0667  1003               	clrc
  1857  0668  0D2B               	rlf	??___ftmul+1,w
  1858  0669  0D2C               	rlf	??___ftmul+2,w
  1859  066A  00AD               	movwf	??___ftmul+3
  1860  066B  082D               	movf	??___ftmul+3,w
  1861  066C  00AE               	movwf	___ftmul@exp
  1862  066D  082E               	movf	___ftmul@exp,w
  1863  066E  1D03               	btfss	3,2
  1864  066F  2E77               	goto	l936
  1865  0670  3000               	movlw	0
  1866  0671  00A4               	movwf	?___ftmul
  1867  0672  3000               	movlw	0
  1868  0673  00A5               	movwf	?___ftmul+1
  1869  0674  3000               	movlw	0
  1870  0675  00A6               	movwf	?___ftmul+2
  1871  0676  0008               	return
  1872  0677                     l936:	
  1873  0677  0827               	movf	___ftmul@f2,w
  1874  0678  00AA               	movwf	??___ftmul
  1875  0679  0828               	movf	___ftmul@f2+1,w
  1876  067A  00AB               	movwf	??___ftmul+1
  1877  067B  0829               	movf	___ftmul@f2+2,w
  1878  067C  00AC               	movwf	??___ftmul+2
  1879  067D  1003               	clrc
  1880  067E  0D2B               	rlf	??___ftmul+1,w
  1881  067F  0D2C               	rlf	??___ftmul+2,w
  1882  0680  00AD               	movwf	??___ftmul+3
  1883  0681  082D               	movf	??___ftmul+3,w
  1884  0682  00B3               	movwf	___ftmul@sign
  1885  0683  0833               	movf	___ftmul@sign,w
  1886  0684  1D03               	btfss	3,2
  1887  0685  2E8D               	goto	l942
  1888  0686  3000               	movlw	0
  1889  0687  00A4               	movwf	?___ftmul
  1890  0688  3000               	movlw	0
  1891  0689  00A5               	movwf	?___ftmul+1
  1892  068A  3000               	movlw	0
  1893  068B  00A6               	movwf	?___ftmul+2
  1894  068C  0008               	return
  1895  068D                     l942:	
  1896  068D  0833               	movf	___ftmul@sign,w
  1897  068E  3E7B               	addlw	123
  1898  068F  00AA               	movwf	??___ftmul
  1899  0690  082A               	movf	??___ftmul,w
  1900  0691  07AE               	addwf	___ftmul@exp,f
  1901  0692  0824               	movf	___ftmul@f1,w
  1902  0693  00AA               	movwf	??___ftmul
  1903  0694  0825               	movf	___ftmul@f1+1,w
  1904  0695  00AB               	movwf	??___ftmul+1
  1905  0696  0826               	movf	___ftmul@f1+2,w
  1906  0697  00AC               	movwf	??___ftmul+2
  1907  0698  3010               	movlw	16
  1908  0699                     u765:	
  1909  0699  36AC               	lsrf	??___ftmul+2,f
  1910  069A  0CAB               	rrf	??___ftmul+1,f
  1911  069B  0CAA               	rrf	??___ftmul,f
  1912  069C  0B89               	decfsz	9,f
  1913  069D  2E99               	goto	u765
  1914  069E  082A               	movf	??___ftmul,w
  1915  069F  00AD               	movwf	??___ftmul+3
  1916  06A0  082D               	movf	??___ftmul+3,w
  1917  06A1  00B3               	movwf	___ftmul@sign
  1918  06A2  0827               	movf	___ftmul@f2,w
  1919  06A3  00AA               	movwf	??___ftmul
  1920  06A4  0828               	movf	___ftmul@f2+1,w
  1921  06A5  00AB               	movwf	??___ftmul+1
  1922  06A6  0829               	movf	___ftmul@f2+2,w
  1923  06A7  00AC               	movwf	??___ftmul+2
  1924  06A8  3010               	movlw	16
  1925  06A9                     u775:	
  1926  06A9  36AC               	lsrf	??___ftmul+2,f
  1927  06AA  0CAB               	rrf	??___ftmul+1,f
  1928  06AB  0CAA               	rrf	??___ftmul,f
  1929  06AC  0B89               	decfsz	9,f
  1930  06AD  2EA9               	goto	u775
  1931  06AE  082A               	movf	??___ftmul,w
  1932  06AF  00AD               	movwf	??___ftmul+3
  1933  06B0  082D               	movf	??___ftmul+3,w
  1934  06B1  06B3               	xorwf	___ftmul@sign,f
  1935  06B2  3080               	movlw	128
  1936  06B3  00AA               	movwf	??___ftmul
  1937  06B4  082A               	movf	??___ftmul,w
  1938  06B5  05B3               	andwf	___ftmul@sign,f
  1939  06B6  17A5               	bsf	___ftmul@f1+1,7
  1940  06B7  17A8               	bsf	___ftmul@f2+1,7
  1941  06B8  30FF               	movlw	255
  1942  06B9  05A7               	andwf	___ftmul@f2,f
  1943  06BA  30FF               	movlw	255
  1944  06BB  05A8               	andwf	___ftmul@f2+1,f
  1945  06BC  3000               	movlw	0
  1946  06BD  05A9               	andwf	___ftmul@f2+2,f
  1947  06BE  3000               	movlw	0
  1948  06BF  00AF               	movwf	___ftmul@f3_as_product
  1949  06C0  3000               	movlw	0
  1950  06C1  00B0               	movwf	___ftmul@f3_as_product+1
  1951  06C2  3000               	movlw	0
  1952  06C3  00B1               	movwf	___ftmul@f3_as_product+2
  1953  06C4  3007               	movlw	7
  1954  06C5  00AA               	movwf	??___ftmul
  1955  06C6  082A               	movf	??___ftmul,w
  1956  06C7  00B2               	movwf	___ftmul@cntr
  1957  06C8                     l954:	
  1958  06C8  1C24               	btfss	___ftmul@f1,0
  1959  06C9  2ED0               	goto	l958
  1960  06CA  0827               	movf	___ftmul@f2,w
  1961  06CB  07AF               	addwf	___ftmul@f3_as_product,f
  1962  06CC  0828               	movf	___ftmul@f2+1,w
  1963  06CD  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  1964  06CE  0829               	movf	___ftmul@f2+2,w
  1965  06CF  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  1966  06D0                     l958:	
  1967  06D0  3001               	movlw	1
  1968  06D1                     u795:	
  1969  06D1  36A6               	lsrf	___ftmul@f1+2,f
  1970  06D2  0CA5               	rrf	___ftmul@f1+1,f
  1971  06D3  0CA4               	rrf	___ftmul@f1,f
  1972  06D4  0B89               	decfsz	9,f
  1973  06D5  2ED1               	goto	u795
  1974  06D6  3001               	movlw	1
  1975  06D7                     u805:	
  1976  06D7  35A7               	lslf	___ftmul@f2,f
  1977  06D8  0DA8               	rlf	___ftmul@f2+1,f
  1978  06D9  0DA9               	rlf	___ftmul@f2+2,f
  1979  06DA  0B89               	decfsz	9,f
  1980  06DB  2ED7               	goto	u805
  1981  06DC  3001               	movlw	1
  1982  06DD  02B2               	subwf	___ftmul@cntr,f
  1983  06DE  1D03               	btfss	3,2
  1984  06DF  2EC8               	goto	l954
  1985  06E0  3009               	movlw	9
  1986  06E1  00AA               	movwf	??___ftmul
  1987  06E2  082A               	movf	??___ftmul,w
  1988  06E3  00B2               	movwf	___ftmul@cntr
  1989  06E4                     l966:	
  1990  06E4  1C24               	btfss	___ftmul@f1,0
  1991  06E5  2EEC               	goto	l970
  1992  06E6  0827               	movf	___ftmul@f2,w
  1993  06E7  07AF               	addwf	___ftmul@f3_as_product,f
  1994  06E8  0828               	movf	___ftmul@f2+1,w
  1995  06E9  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  1996  06EA  0829               	movf	___ftmul@f2+2,w
  1997  06EB  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  1998  06EC                     l970:	
  1999  06EC  3001               	movlw	1
  2000  06ED                     u835:	
  2001  06ED  36A6               	lsrf	___ftmul@f1+2,f
  2002  06EE  0CA5               	rrf	___ftmul@f1+1,f
  2003  06EF  0CA4               	rrf	___ftmul@f1,f
  2004  06F0  0B89               	decfsz	9,f
  2005  06F1  2EED               	goto	u835
  2006  06F2  3001               	movlw	1
  2007  06F3                     u845:	
  2008  06F3  36B1               	lsrf	___ftmul@f3_as_product+2,f
  2009  06F4  0CB0               	rrf	___ftmul@f3_as_product+1,f
  2010  06F5  0CAF               	rrf	___ftmul@f3_as_product,f
  2011  06F6  0B89               	decfsz	9,f
  2012  06F7  2EF3               	goto	u845
  2013  06F8  3001               	movlw	1
  2014  06F9  02B2               	subwf	___ftmul@cntr,f
  2015  06FA  1D03               	btfss	3,2
  2016  06FB  2EE4               	goto	l966
  2017  06FC  082F               	movf	___ftmul@f3_as_product,w
  2018  06FD  00F0               	movwf	___ftpack@arg
  2019  06FE  0830               	movf	___ftmul@f3_as_product+1,w
  2020  06FF  00F1               	movwf	___ftpack@arg+1
  2021  0700  0831               	movf	___ftmul@f3_as_product+2,w
  2022  0701  00F2               	movwf	___ftpack@arg+2
  2023  0702  082E               	movf	___ftmul@exp,w
  2024  0703  00AA               	movwf	??___ftmul
  2025  0704  082A               	movf	??___ftmul,w
  2026  0705  00F3               	movwf	___ftpack@exp
  2027  0706  0833               	movf	___ftmul@sign,w
  2028  0707  00AB               	movwf	??___ftmul+1
  2029  0708  082B               	movf	??___ftmul+1,w
  2030  0709  00F4               	movwf	___ftpack@sign
  2031  070A  3185  2575         	fcall	___ftpack
  2032  070C  0870               	movf	?___ftpack,w
  2033  070D  0020               	movlb	0	; select bank0
  2034  070E  00A4               	movwf	?___ftmul
  2035  070F  0871               	movf	?___ftpack+1,w
  2036  0710  00A5               	movwf	?___ftmul+1
  2037  0711  0872               	movf	?___ftpack+2,w
  2038  0712  00A6               	movwf	?___ftmul+2
  2039  0713  0008               	return
  2040  0714                     __end_of___ftmul:	
  2041                           
  2042                           	psect	text11
  2043  0575                     __ptext11:	
  2044 ;; *************** function ___ftpack *****************
  2045 ;; Defined at:
  2046 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\float.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  arg             3    0[COMMON] unsigned um
  2049 ;;  exp             1    3[COMMON] unsigned char 
  2050 ;;  sign            1    4[COMMON] unsigned char 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  3    0[COMMON] float 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, status,0
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2062 ;;      Params:         5       0       0       0
  2063 ;;      Locals:         0       0       0       0
  2064 ;;      Temps:          3       0       0       0
  2065 ;;      Totals:         8       0       0       0
  2066 ;;Total ram usage:        8 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		___ftmul
  2072 ;;		___lbtoft
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           
  2077                           ;psect for function ___ftpack
  2078  0575                     ___ftpack:	
  2079                           
  2080                           ;incstack = 0
  2081                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2082  0575  0873               	movf	___ftpack@exp,w
  2083  0576  1903               	btfsc	3,2
  2084  0577  2D7D               	goto	l870
  2085  0578  0872               	movf	___ftpack@arg+2,w
  2086  0579  0471               	iorwf	___ftpack@arg+1,w
  2087  057A  0470               	iorwf	___ftpack@arg,w
  2088  057B  1D03               	skipz
  2089  057C  2D8E               	goto	l876
  2090  057D                     l870:	
  2091  057D  3000               	movlw	0
  2092  057E  00F0               	movwf	?___ftpack
  2093  057F  3000               	movlw	0
  2094  0580  00F1               	movwf	?___ftpack+1
  2095  0581  3000               	movlw	0
  2096  0582  00F2               	movwf	?___ftpack+2
  2097  0583  0008               	return
  2098  0584                     l874:	
  2099  0584  3001               	movlw	1
  2100  0585  00F5               	movwf	??___ftpack
  2101  0586  0875               	movf	??___ftpack,w
  2102  0587  07F3               	addwf	___ftpack@exp,f
  2103  0588  3001               	movlw	1
  2104  0589                     u645:	
  2105  0589  36F2               	lsrf	___ftpack@arg+2,f
  2106  058A  0CF1               	rrf	___ftpack@arg+1,f
  2107  058B  0CF0               	rrf	___ftpack@arg,f
  2108  058C  0B89               	decfsz	9,f
  2109  058D  2D89               	goto	u645
  2110  058E                     l876:	
  2111  058E  30FE               	movlw	254
  2112  058F  0572               	andwf	___ftpack@arg+2,w
  2113  0590  1903               	btfsc	3,2
  2114  0591  2DA7               	goto	l397
  2115  0592  2D84               	goto	l874
  2116  0593                     l878:	
  2117  0593  3001               	movlw	1
  2118  0594  00F5               	movwf	??___ftpack
  2119  0595  0875               	movf	??___ftpack,w
  2120  0596  07F3               	addwf	___ftpack@exp,f
  2121  0597  3001               	movlw	1
  2122  0598  07F0               	addwf	___ftpack@arg,f
  2123  0599  3000               	movlw	0
  2124  059A  1803               	skipnc
  2125  059B  3001               	movlw	1
  2126  059C  07F1               	addwf	___ftpack@arg+1,f
  2127  059D  3000               	movlw	0
  2128  059E  1803               	skipnc
  2129  059F  3001               	movlw	1
  2130  05A0  07F2               	addwf	___ftpack@arg+2,f
  2131  05A1  3001               	movlw	1
  2132  05A2                     u665:	
  2133  05A2  36F2               	lsrf	___ftpack@arg+2,f
  2134  05A3  0CF1               	rrf	___ftpack@arg+1,f
  2135  05A4  0CF0               	rrf	___ftpack@arg,f
  2136  05A5  0B89               	decfsz	9,f
  2137  05A6  2DA2               	goto	u665
  2138  05A7                     l397:	
  2139  05A7  30FF               	movlw	255
  2140  05A8  0572               	andwf	___ftpack@arg+2,w
  2141  05A9  1903               	btfsc	3,2
  2142  05AA  2DB4               	goto	l886
  2143  05AB  2D93               	goto	l878
  2144  05AC                     l884:	
  2145  05AC  3001               	movlw	1
  2146  05AD  02F3               	subwf	___ftpack@exp,f
  2147  05AE  3001               	movlw	1
  2148  05AF                     u685:	
  2149  05AF  35F0               	lslf	___ftpack@arg,f
  2150  05B0  0DF1               	rlf	___ftpack@arg+1,f
  2151  05B1  0DF2               	rlf	___ftpack@arg+2,f
  2152  05B2  0B89               	decfsz	9,f
  2153  05B3  2DAF               	goto	u685
  2154  05B4                     l886:	
  2155  05B4  1BF1               	btfsc	___ftpack@arg+1,7
  2156  05B5  2DBA               	goto	l404
  2157  05B6  3002               	movlw	2
  2158  05B7  0273               	subwf	___ftpack@exp,w
  2159  05B8  1803               	skipnc
  2160  05B9  2DAC               	goto	l884
  2161  05BA                     l404:	
  2162  05BA  1873               	btfsc	___ftpack@exp,0
  2163  05BB  2DC2               	goto	l405
  2164  05BC  30FF               	movlw	255
  2165  05BD  05F0               	andwf	___ftpack@arg,f
  2166  05BE  307F               	movlw	127
  2167  05BF  05F1               	andwf	___ftpack@arg+1,f
  2168  05C0  30FF               	movlw	255
  2169  05C1  05F2               	andwf	___ftpack@arg+2,f
  2170  05C2                     l405:	
  2171  05C2  1003               	clrc
  2172  05C3  0CF3               	rrf	___ftpack@exp,f
  2173  05C4  0873               	movf	___ftpack@exp,w
  2174  05C5  00F5               	movwf	??___ftpack
  2175  05C6  01F6               	clrf	??___ftpack+1
  2176  05C7  01F7               	clrf	??___ftpack+2
  2177  05C8  3010               	movlw	16
  2178  05C9                     u725:	
  2179  05C9  35F5               	lslf	??___ftpack,f
  2180  05CA  0DF6               	rlf	??___ftpack+1,f
  2181  05CB  0DF7               	rlf	??___ftpack+2,f
  2182  05CC  0B89               	decfsz	9,f
  2183  05CD  2DC9               	goto	u725
  2184  05CE  0875               	movf	??___ftpack,w
  2185  05CF  04F0               	iorwf	___ftpack@arg,f
  2186  05D0  0876               	movf	??___ftpack+1,w
  2187  05D1  04F1               	iorwf	___ftpack@arg+1,f
  2188  05D2  0877               	movf	??___ftpack+2,w
  2189  05D3  04F2               	iorwf	___ftpack@arg+2,f
  2190  05D4  0874               	movf	___ftpack@sign,w
  2191  05D5  1903               	btfsc	3,2
  2192  05D6  0008               	return
  2193  05D7  17F2               	bsf	___ftpack@arg+2,7
  2194  05D8  0008               	return
  2195  05D9                     __end_of___ftpack:	
  2196  007E                     btemp	set	126	;btemp
  2197  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     40      61
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Calc_Duty
    _main->_Servo_Output_OFF
    _Calc_Duty->___lbtoft
    ___lbtoft->___ftpack
    ___fttol->___lbtoft
    ___ftmul->___lbtoft

Critical Paths under _main in BANK0

    _main->_Calc_Duty
    _Calc_Duty->___fttol
    ___fttol->___ftmul
    ___ftmul->___lbtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4    4866
                                             36 BANK0      4     0      4
                          _Calc_Duty
                         _Initialize
                     _Renew_Raw_Data
                   _Servo_Output_OFF
 ---------------------------------------------------------------------------------
 (1) _Servo_Output_OFF                                    13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 (1) _Renew_Raw_Data                                       4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0       0
              _Oscillator_Initialize
                     _Pin_Initialize
                   _Timer_Initialize
 ---------------------------------------------------------------------------------
 (2) _Timer_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Pin_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Oscillator_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Calc_Duty                                            3     3      0    4866
                                             12 COMMON     1     1      0
                                             34 BANK0      2     2      0
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2014
                                              8 COMMON     4     1      3
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     316
                                             20 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2446
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1992
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calc_Duty
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _Initialize
     _Oscillator_Initialize
     _Pin_Initialize
     _Timer_Initialize
   _Renew_Raw_Data
   _Servo_Output_OFF

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      4B      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 26 13:53:34 2019

                   __CFG_CP$OFF 0000                              l73 0514                              l68 0506  
                           l404 05BA                             l405 05C2                             l397 05A7  
                           l488 0646                             l870 057D                             l942 068D  
                           l936 0677                             l874 0584                             l970 06EC  
                           l954 06C8                             l884 05AC                             l876 058E  
                           l886 05B4                             l878 0593                             l966 06E4  
                           l958 06D0                             l986 05F2                    __CFG_CPD$OFF 0000  
                           u725 05C9                             u645 0589                             u805 06D7  
                           u665 05A2                             u905 0623                             u835 06ED  
                           u685 05AF                             u845 06F3                             u765 0699  
                           u775 06A9                             u935 063E                             u795 06D1  
                           u875 05F9                             u975 04AF                             u985 04B7  
                           u995 04CC           _Oscillator_Initialize 045A                 ?_Renew_Raw_Data 0070  
                  __CFG_BORV$HI 0000                             wreg 0009                    __CFG_LVP$OFF 0000  
                          l1012 063D                            l1004 0622                            l1100 050D  
                          l1014 0649                            l1006 0630                            l1102 0519  
                          l1018 0657                            l1042 0534                            l1034 04A5  
                          l1038 04C3                            l1070 07B6                            l1064 0780  
                          l1058 074A                            l1078 04E4                            u1010 052A  
                          u1005 04D4                            u1030 0532                            u1024 052C  
                          u1113 07AF                            u1133 07E5                            u1150 04EE  
                          u1055 0542                            u1160 04EF                            u1073 0743  
                          u1170 04F4                            u1180 04F5                            u1093 0779  
                          _TMR1 0016                    __CFG_WRT$OFF 0000                            _main 04E1  
                  ___ftpack@arg 0070                    ___ftpack@exp 0073                            fsr0h 0005  
                          fsr1h 0007                            indf0 0000                            fsr0l 0004  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          start 0002                   __CFG_IESO$OFF 0000                    ___ftmul@cntr 0032  
                  ___ftmul@sign 0033                    ___fttol@exp1 0041                    ___fttol@lval 003D  
                         ?_main 0044                   __CFG_WDTE$OFF 0000                 __end_of___ftmul 0714  
                         _T1CON 0018                 __end_of___fttol 0660                           _PORTA 000C  
                         _TRISA 008C                  __CFG_FCMEN$OFF 0000                   ___ftpack@sign 0074  
                __CFG_BOREN$OFF 0000                           status 0003                           wtemp0 007E  
            __size_of_Calc_Duty 0051                  __CFG_MCLRE$OFF 0000                 __initialization 07ED  
                  __end_of_main 0524                      _Initialize 046B          ?_Oscillator_Initialize 0070  
                        ??_main 007D                   ___fttol@sign1 003C                  __CFG_PLLEN$OFF 0000  
             ?_Servo_Output_OFF 0070                          _ANSELA 018C                          _ANSELB 018D  
              __end_of___ftpack 05D9                __end_of___lbtoft 049E                          _OSCCON 0099  
            ??_Servo_Output_OFF 0070                  __CFG_PWRTE$OFF 0000                       ??___ftmul 002A  
                     ??___fttol 0038           ___ftmul@f3_as_product 002F               __end_of_Calc_Duty 0575  
       __end_of__initialization 07FD                      ___lbtoft@c 007B       __size_of_Timer_Initialize 0007  
                    ___ftmul@f1 0024                      ___ftmul@f2 0027                      ___fttol@f1 0034  
                __pcstackCOMMON 0070                    __pidataBANK0 0458                     ?_Initialize 0070  
              ??_Renew_Raw_Data 0070                      __pbssBANK0 0048                 __CFG_VCAPEN$OFF 0000  
                    _data_renew 0052                      __pmaintext 04E1         __size_of_Pin_Initialize 0010  
                     ?___ftpack 0070                       ?___lbtoft 0078             __size_of_Initialize 0009  
                   _Timer1_time 005B         ??_Oscillator_Initialize 0070                         ___ftmul 0660  
                       ___fttol 05D9                 __CFG_STVREN$OFF 0000                      ??___ftpack 0075  
                    ??___lbtoft 0020                         __ptext1 0714                         __ptext2 049E  
                       __ptext3 046B                         __ptext4 0464                         __ptext5 0474  
                       __ptext6 045A                         __ptext7 0524                         __ptext8 0484  
                       __ptext9 05D9                       _T1CONbits 0018                         clrloop0 045F  
          end_of_initialization 07FD                _Timer_Initialize 0464       __size_of_Servo_Output_OFF 00D9  
                     _PORTAbits 000C                       _PORTCbits 000E                      _servo_duty 0048  
              __CFG_FOSC$INTOSC 0000                       _TRISBbits 008D                       _TRISCbits 008E  
                     _Calc_Duty 0524                     ___ftmul@exp 002E                  _Pin_Initialize 0474  
                  ??_Initialize 0070             start_initialization 07ED                      ?_Calc_Duty 0070  
            __end_of_Initialize 0474          __end_of_Pin_Initialize 0484                     __pdataBANK0 005B  
             __size_of___ftpack 0064               __size_of___lbtoft 001A                     __pbssCOMMON 007D  
                     ___latbits 0001                   __pcstackBANK0 0020                 ?_Pin_Initialize 0070  
              _Servo_Output_OFF 0714                        ?___ftmul 0024                        ?___fttol 0034  
__size_of_Oscillator_Initialize 0004   __end_of_Oscillator_Initialize 045E        __end_of_Timer_Initialize 046B  
       __size_of_Renew_Raw_Data 0043                     ??_Calc_Duty 007C                        _LATBbits 010D  
                      _LATCbits 010E                       clear_ram0 045E                        _PIE1bits 0091  
                      _PIR1bits 0011                   _EmergencyStop 007D                  _servo_raw_data 0056  
              __size_of___ftmul 00B4                __size_of___fttol 0087                        ___ftpack 0575  
                      ___lbtoft 0484                      Calc_Duty@i 0042                        __ptext10 0660  
                      __ptext11 0575                   __size_of_main 0043                        main@argc 0044  
                      main@argv 0046                      _INTCONbits 000B                  _Renew_Raw_Data 049E  
      __end_of_Servo_Output_OFF 07ED                ??_Pin_Initialize 0070               __CFG_CLKOUTEN$OFF 0000  
        __end_of_Renew_Raw_Data 04E1               ?_Timer_Initialize 0070              ??_Timer_Initialize 0070  
